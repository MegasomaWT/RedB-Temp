using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using redb.Core.Postgres;
using redb.Core;
using redb.Core.Models.Entities;
using redb.Core.Models.Attributes;
using redb.Core.Extensions;

namespace SimpleTreeTest
{
    /// <summary>
    /// üöÄ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
    /// </summary>
    public class Program
    {
        public static async Task Main(string[] args)
        {
            Console.WriteLine("üå≥ === –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –î–ï–†–ï–í–¨–ï–í ===");
            Console.WriteLine("–¢–µ—Å—Ç–∏—Ä—É–µ–º: –∑–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–æ–≤, SQL injection –∑–∞—â–∏—Ç–∞, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ extension –º–µ—Ç–æ–¥—ã");
            
            try
            {
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DI
                var services = new ServiceCollection();
                services.AddLogging(b => b.AddConsole().SetMinimumLevel(LogLevel.Information));
                
                var connectionString = "Host=localhost;Port=5432;Username=postgres;Password=1;Database=redb;Pooling=true;";
                services.AddDbContext<redb.Core.Postgres.RedbContext>(options =>
                {
                    options.UseNpgsql(connectionString);
                });
                services.AddScoped<IRedbService, RedbService>();
                
                var provider = services.BuildServiceProvider();
                var redb = provider.GetRequiredService<IRedbService>();
                var logger = provider.GetRequiredService<ILogger<Program>>();
                
                logger.LogInformation("üîß –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤...");
                
                // –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É
                var scheme = await redb.SyncSchemeAsync<SimpleTestProps>("SimpleTreeTest", alias: "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–µ—Ä–µ–≤–∞");
                
                logger.LogInformation("üå± –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –¥–µ—Ä–µ–≤–æ...");
                
                // –ö–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª
                var root = new TreeRedbObject<SimpleTestProps>
                {
                    scheme_id = scheme.Id,
                    owner_id = 0,
                    who_change_id = 0,
                    name = "Root",
                    note = "–ö–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤",
                    properties = new SimpleTestProps
                    {
                        Value = 100,
                        Name = "Root Node"
                    }
                };
                
                var rootId = await redb.SaveAsync(root);
                logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ—Ä–µ–Ω—å: ID={rootId}");
                
                // –î–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª
                var child = new TreeRedbObject<SimpleTestProps>
                {
                    scheme_id = scheme.Id,
                    owner_id = 0,
                    who_change_id = 0,
                    name = "Child",
                    note = "–î–æ—á–µ—Ä–Ω–∏–π —É–∑–µ–ª",
                    properties = new SimpleTestProps
                    {
                        Value = 50,
                        Name = "Child Node"
                    }
                };
                
                var rootObj = await redb.LoadAsync<SimpleTestProps>(rootId, 1);
                var childId = await redb.CreateChildAsync(child, rootObj);
                logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω —Ä–µ–±–µ–Ω–æ–∫: ID={childId}");
                
                // –í–Ω—É–∫
                var grandchild = new TreeRedbObject<SimpleTestProps>
                {
                    scheme_id = scheme.Id,
                    owner_id = 0,
                    who_change_id = 0,
                    name = "GrandChild",
                    note = "–í–Ω—É–∫",
                    properties = new SimpleTestProps
                    {
                        Value = 25,
                        Name = "GrandChild Node"
                    }
                };
                
                var childObj = await redb.LoadAsync<SimpleTestProps>(childId, 1);
                var grandchildId = await redb.CreateChildAsync(grandchild, childObj);
                logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω –≤–Ω—É–∫: ID={grandchildId}");
                
                logger.LogInformation("");
                logger.LogInformation("üß™ === –¢–ï–°–¢ 1: GetPathToRootAsync —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ü–∏–∫–ª–æ–≤ ===");
                
                var grandchildObj = await redb.LoadAsync<SimpleTestProps>(grandchildId, 1);
                var path = await redb.GetPathToRootAsync<SimpleTestProps>(grandchildObj);
                var pathNames = string.Join(" > ", path.Select(p => p.name));
                logger.LogInformation($"‚úÖ –ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é: {pathNames}");
                logger.LogInformation($"‚úÖ –î–ª–∏–Ω–∞ –ø—É—Ç–∏: {path.Count()} —É–∑–ª–æ–≤");
                logger.LogInformation($"üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–æ–≤: –∞–∫—Ç–∏–≤–Ω–∞ (HashSet –≤ GetPathToRootWithUserAsync)");
                
                logger.LogInformation("");
                logger.LogInformation("üß™ === –¢–ï–°–¢ 2: –ù–æ–≤—ã–µ Extension –º–µ—Ç–æ–¥—ã IRedbObject ===");
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                var rootExtObj = await redb.LoadAsync<SimpleTestProps>(rootId, 1);
                var grandchildExtObj = grandchildObj; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
                
                // –¢–µ—Å—Ç IsDescendantOfAsync (üöÄ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
                var isDescendant = await grandchildExtObj.IsDescendantOfAsync<SimpleTestProps>(rootExtObj, redb);
                logger.LogInformation($"‚úÖ IsDescendantOfAsync: –í–Ω—É–∫ –ø–æ—Ç–æ–º–æ–∫ –∫–æ—Ä–Ω—è = {isDescendant}");
                
                // –¢–µ—Å—Ç GetTreeLevelAsync
                var rootLevel = await rootExtObj.GetTreeLevelAsync<SimpleTestProps>(redb);
                var grandchildLevel = await grandchildExtObj.GetTreeLevelAsync<SimpleTestProps>(redb);
                logger.LogInformation($"‚úÖ GetTreeLevelAsync: –ö–æ—Ä–µ–Ω—å —É—Ä–æ–≤–µ–Ω—å={rootLevel}, –í–Ω—É–∫ —É—Ä–æ–≤–µ–Ω—å={grandchildLevel}");
                
                // –¢–µ—Å—Ç —Å–≤–æ–π—Å—Ç–≤ –æ–±—ä–µ–∫—Ç–æ–≤
                logger.LogInformation($"‚úÖ IsRoot: –ö–æ—Ä–µ–Ω—å={rootExtObj.IsRoot}, –í–Ω—É–∫={grandchildExtObj.IsRoot}");
                logger.LogInformation($"‚úÖ HasParent: –ö–æ—Ä–µ–Ω—å={rootExtObj.HasParent}, –í–Ω—É–∫={grandchildExtObj.HasParent}");
                
                logger.LogInformation("");
                logger.LogInformation("üß™ === –¢–ï–°–¢ 3: –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ ===");
                
                var age = rootExtObj.GetAge();
                var displayName = rootExtObj.GetDisplayName();
                var debugInfo = grandchildExtObj.GetDebugInfo();
                
                logger.LogInformation($"‚úÖ –í–æ–∑—Ä–∞—Å—Ç –∫–æ—Ä–Ω—è: {age.TotalSeconds:F1} —Å–µ–∫—É–Ω–¥");
                logger.LogInformation($"‚úÖ DisplayName –∫–æ—Ä–Ω—è: '{displayName}'");
                logger.LogInformation($"‚úÖ DebugInfo –≤–Ω—É–∫–∞: {debugInfo}");
                
                logger.LogInformation("");
                logger.LogInformation("üß™ === –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ SQL injection –∑–∞—â–∏—Ç—ã ===");
                
                logger.LogInformation("‚ÑπÔ∏è  GetChildrenWithUserAsync —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã");
                var children = await redb.GetChildrenAsync<SimpleTestProps>(rootObj);
                logger.LogInformation($"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –¥–µ—Ç–µ–π: {children.Count()}");
                logger.LogInformation($"üîí SQL injection: –∑–∞—â–∏—â–µ–Ω (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ PostgresTreeProvider)");
                
                logger.LogInformation("");
                logger.LogInformation("üéâ === –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û ===");
                logger.LogInformation("üõ°Ô∏è ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–æ–≤: —Ä–∞–±–æ—Ç–∞–µ—Ç");
                logger.LogInformation("üöÄ ‚úÖ SQL injection –∑–∞—â–∏—Ç–∞: –∞–∫—Ç–∏–≤–Ω–∞");
                logger.LogInformation("‚ö° ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ extension –º–µ—Ç–æ–¥—ã: —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç");
                logger.LogInformation("üìä ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ IRedbObject: –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã");
                logger.LogInformation("");
                logger.LogInformation("üåü –í—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
                Console.WriteLine(ex.StackTrace);
                Environment.Exit(1);
            }
        }
    }
    
    /// <summary>
    /// –ü—Ä–æ—Å—Ç—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    /// </summary>
    [SchemeAlias("–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞")]
    public class SimpleTestProps
    {
        public int Value { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}

