using redb.Core.Providers;
using redb.Core.DBModels;
using redb.Core.Utils;
using redb.Core.Serialization;
using Microsoft.EntityFrameworkCore;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
using redb.Core.Models.Contracts;
using redb.Core.Models.Entities;
using redb.Core.Models.Configuration;


namespace redb.Core.Postgres.Providers
{
    /// <summary>
    /// PostgreSQL —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
    /// </summary>
    public class PostgresObjectStorageProvider : IObjectStorageProvider
    {
        private readonly RedbContext _context;
        private readonly IRedbObjectSerializer _serializer;
        private readonly IPermissionProvider _permissionProvider;
        private readonly IRedbSecurityContext _securityContext;
        private readonly ISchemeSyncProvider _schemeSync;
        private readonly RedbServiceConfiguration _configuration;

        public PostgresObjectStorageProvider(
            RedbContext context, 
            IRedbObjectSerializer serializer,
            IPermissionProvider permissionProvider,
            IRedbSecurityContext securityContext,
            ISchemeSyncProvider schemeSync,
            RedbServiceConfiguration configuration)
        {
            _context = context;
            _serializer = serializer;
            _permissionProvider = permissionProvider;
            _securityContext = securityContext;
            _schemeSync = schemeSync;
            _configuration = configuration ?? new RedbServiceConfiguration();
        }

        // ===== –ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç _securityContext –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é) =====
        
        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—ä–µ–∫—Ç –∏–∑ EAV –ø–æ ID (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç _securityContext –∏ config.DefaultCheckPermissionsOnLoad)
        /// </summary>
        public async Task<RedbObject<TProps>> LoadAsync<TProps>(long objectId, int depth = 10) where TProps : class, new()
        {
            var effectiveUser = _securityContext.GetEffectiveUser();
            return await LoadAsync<TProps>(objectId, effectiveUser, depth);
        }

        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—ä–µ–∫—Ç –∏–∑ EAV (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç _securityContext –∏ config.DefaultCheckPermissionsOnLoad)
        /// </summary>
        public async Task<RedbObject<TProps>> LoadAsync<TProps>(IRedbObject obj, int depth = 10) where TProps : class, new()
        {
            var effectiveUser = _securityContext.GetEffectiveUser();
            return await LoadAsync<TProps>(obj.Id, effectiveUser, depth);
        }

        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—ä–µ–∫—Ç –∏–∑ EAV —Å —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç config.DefaultCheckPermissionsOnLoad)
        /// </summary>
        public async Task<RedbObject<TProps>> LoadAsync<TProps>(IRedbObject obj, IRedbUser user, int depth = 10) where TProps : class, new()
        {
            return await LoadAsync<TProps>(obj.Id, user, depth);
        }

        // ===== –ü–ï–†–ï–ì–†–£–ó–ö–ò –° –Ø–í–ù–´–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú =====
        
        /// <summary>
        /// –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –∑–∞–≥—Ä—É–∑–∫–∏ - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ LoadAsync –µ–≥–æ –≤—ã–∑—ã–≤–∞—é—Ç
        /// </summary>
        public async Task<RedbObject<TProps>> LoadAsync<TProps>(long objectId, IRedbUser user, int depth = 10) where TProps : class, new()
        {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if (_configuration.DefaultCheckPermissionsOnLoad)
            {
                var canRead = await _permissionProvider.CanUserSelectObject(objectId, user.Id);
                if (!canRead)
                {
                    throw new UnauthorizedAccessException($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.Id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ {objectId}");
                }
            }

            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ PostgreSQL —Ñ—É–Ω–∫—Ü–∏–∏ get_object_json –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            var json = await _context.Database.SqlQueryRaw<string>(
                "SELECT get_object_json({0}, {1})::text AS \"Value\"", objectId, depth
            ).FirstOrDefaultAsync();

            if (string.IsNullOrEmpty(json))
            {
                throw new InvalidOperationException($"–û–±—ä–µ–∫—Ç —Å ID {objectId} –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }

            // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON –≤ RedbObject<TProps> —á–µ—Ä–µ–∑ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
            return _serializer.Deserialize<TProps>(json);
        }


        public async Task<long> SaveAsync<TProps>(IRedbObject<TProps> obj) where TProps : class, new()
        {
            var effectiveUser = _securityContext.GetEffectiveUser();
            return await SaveAsync(obj, effectiveUser);
        }

        
        public async Task<bool> DeleteAsync<TProps>(IRedbObject<TProps> obj) where TProps : class, new()
        {
            var effectiveUser = _securityContext.GetEffectiveUser();
            return await DeleteAsync(obj, effectiveUser);
        }

        public async Task<bool> DeleteAsync<TProps>(IRedbObject<TProps> obj, IRedbUser user) where TProps : class, new()
        {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if (_configuration.DefaultCheckPermissionsOnDelete)
            {
                var canDelete = await _permissionProvider.CanUserDeleteObject(obj, user);
                if (!canDelete)
                {
                    throw new UnauthorizedAccessException($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.Id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ {obj.Id}");
                }
            }

            var objToDelete = await _context.Objects.FindAsync(obj.Id);
            if (objToDelete == null)
            {
                return false;
            }

            _context.Objects.Remove(objToDelete);
            await _context.SaveChangesAsync();

            // === –°–¢–†–ê–¢–ï–ì–ò–Ø –°–ë–†–û–°–ê ID ===
            if (_configuration.IdResetStrategy == Models.Configuration.ObjectIdResetStrategy.AutoResetOnDelete)
            {
                obj.ResetId(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º ID
            }

            return true;
        }


        public async Task<long> SaveAsync<TProps>(IRedbObject<TProps> obj, IRedbUser user) where TProps : class, new()
        {
            if (obj.properties == null)
            {
                throw new ArgumentException("–°–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å null", nameof(obj));
            }

            // === –°–¢–†–ê–¢–ï–ì–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –£–î–ê–õ–ï–ù–ù–´–• –û–ë–™–ï–ö–¢–û–í (–∫–∞–∫ –±—ã–ª–æ –≤ RedbService) ===
            var isNewObject = obj.Id == 0;
            if (!isNewObject)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–±—ä–µ–∫—Ç (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö)
                var exists = await _context.Objects.AnyAsync(o => o.Id == obj.Id);
                
                if (!exists)
                {
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                    switch (_configuration.MissingObjectStrategy)
                    {
                        case MissingObjectStrategy.AutoSwitchToInsert:
                            isNewObject=!isNewObject;
                            break;
                        case MissingObjectStrategy.ReturnNull:
                            return 0;
                        case MissingObjectStrategy.ThrowException:
                        default:
                            throw new InvalidOperationException($"Object with id {obj.Id} not found. Current strategy: {_configuration.MissingObjectStrategy}");
                    }
                }
            }

            // üöÄ –ê–í–¢–û–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–•–ï–ú–´: –ï—Å–ª–∏ scheme_id = 0, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if (obj.SchemeId == 0 && _configuration.AutoSyncSchemesOnSave)
            {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∏–º–µ–Ω–∏ –∏ –∞–ª–∏–∞—Å–∞ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞
                var scheme = await _schemeSync.SyncSchemeAsync<TProps>();
                obj.SchemeId = scheme.Id;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if (_configuration.DefaultCheckPermissionsOnSave)
            {
                if (isNewObject)
                {
                    // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É
                    var scheme = await _context.Schemes.FindAsync(obj.SchemeId);
                    if (scheme != null)
                    {
                        var schemeContract = RedbScheme.FromEntity(scheme);
                        var canInsert = await _permissionProvider.CanUserInsertScheme(schemeContract, user);
                        if (!canInsert)
                        {
                            throw new UnauthorizedAccessException($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.Id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å—Ö–µ–º–µ {obj.SchemeId}");
                        }
                    }
                }
                else
                {
                    // –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –æ–±—ä–µ–∫—Ç –Ω–∞–ø—Ä—è–º—É—é
                    var canUpdate = await _permissionProvider.CanUserEditObject(obj, user);
                    if (!canUpdate)
                    {
                        throw new UnauthorizedAccessException($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.Id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ {obj.Id}");
                    }
                }
            }

            if (isNewObject)
            {
                // INSERT
                // üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç (TreeProvider –º–æ–≥ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)
                if (obj.Id == 0)
                {
                    obj.Id = _context.GetNextKey();
                }
                
                // === –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö –ê–£–î–ò–¢–ê (–∫–∞–∫ –±—ã–ª–æ –≤ RedbService) ===
                obj.OwnerId = user.Id;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
                obj.WhoChangeId = user.Id;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ç–æ –∏–∑–º–µ–Ω–∏–ª
                
                if (_configuration.AutoSetModifyDate)
                {
                    obj.DateCreate = DateTime.Now;
                    obj.DateModify = DateTime.Now;
                }

                // === –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö –•–ï–®–ò–†–û–í–ê–ù–ò–Ø ===
                if (_configuration.AutoRecomputeHash)
                {
                    obj.RecomputeHashForType();
                }

                // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ _objects
                var objectRecord = new _RObject
                {
                    Id = obj.Id,
                    IdParent = obj.ParentId,
                    IdScheme = obj.SchemeId,
                    IdOwner = obj.OwnerId,
                    IdWhoChange = obj.WhoChangeId,
                    DateCreate = obj.DateCreate,
                    DateModify = obj.DateModify,
                    DateBegin = obj.DateBegin,
                    DateComplete = obj.DateComplete,
                    Key = obj.Key,
                    CodeInt = obj.CodeInt,
                    CodeString = obj.CodeString,
                    CodeGuid = obj.CodeGuid,
                    Name = obj.Name,
                    Note = obj.Note,
                    Bool = obj.Bool,
                    Hash = obj.Hash
                };

                _context.Objects.Add(objectRecord);
            }
            else
            {
                // UPDATE
                var existingObject = await _context.Objects.FindAsync(obj.Id);
                if (existingObject == null)
                {
                    // === –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –û–ë–™–ï–ö–¢–û–í ===
                    switch (_configuration.MissingObjectStrategy)
                    {
                        case MissingObjectStrategy.AutoSwitchToInsert:
                            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ INSERT —Å –∑–∞–¥–∞–Ω–Ω—ã–º ID (—É–≤–∞–∂–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞)
                            // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º obj.Id - –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∑–∞–¥–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π ID
                            return await SaveAsync(obj, user);
                            
                        case MissingObjectStrategy.ReturnNull:
                            return 0;
                            
                        case MissingObjectStrategy.ThrowException:
                        default:
                            throw new InvalidOperationException($"–û–±—ä–µ–∫—Ç —Å ID {obj.Id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {_configuration.MissingObjectStrategy}");
                    }
                }

                // === –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö –ê–£–î–ò–¢–ê (–∫–∞–∫ –±—ã–ª–æ –≤ RedbService) ===
                obj.WhoChangeId = user.Id;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ç–æ –∏–∑–º–µ–Ω–∏–ª
                
                            if (_configuration.AutoSetModifyDate)
            {
                obj.DateModify = DateTime.Now;
            }

                // === –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö –•–ï–®–ò–†–û–í–ê–ù–ò–Ø ===
                if (_configuration.AutoRecomputeHash)
                {
                    obj.Hash = RedbHash.ComputeFor(obj);
                }

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
                existingObject.IdParent = obj.ParentId;
                existingObject.IdWhoChange = obj.WhoChangeId;
                existingObject.DateModify = obj.DateModify;
                existingObject.DateBegin = obj.DateBegin;
                existingObject.DateComplete = obj.DateComplete;
                existingObject.Key = obj.Key;
                existingObject.CodeInt = obj.CodeInt;
                existingObject.CodeString = obj.CodeString;
                existingObject.CodeGuid = obj.CodeGuid;
                existingObject.Name = obj.Name;
                existingObject.Note = obj.Note;
                existingObject.Bool = obj.Bool;
                existingObject.Hash = obj.Hash;
            }

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ –≤ _values
            await SavePropertiesAsync(obj.Id, obj.SchemeId, obj.properties);

            await _context.SaveChangesAsync();
            return obj.Id;
        }


        private async Task SavePropertiesAsync<TProps>(long objectId, long schemeId, TProps properties) where TProps : class
        {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä —Å—Ö–µ–º—ã —Å —Ç–∏–ø–∞–º–∏
            var structures = await _context.Structures
                .Where(s => s.IdScheme == schemeId)
                .Select(s => new { s.Id, s.Name, s.TypeNavigation.DbType, s.IsArray })
                .ToListAsync();

            // –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            var existingValues = await _context.Set<_RValue>()
                .Where(v => v.IdObject == objectId)
                .ToListAsync();
            _context.Set<_RValue>().RemoveRange(existingValues);

            // üöÄ –ü–†–Ø–ú–ê–Ø –†–ê–ë–û–¢–ê –° –û–ë–™–ï–ö–¢–û–ú —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
            var propertiesType = typeof(TProps);

            foreach (var structure in structures)
            {
                var property = propertiesType.GetProperty(structure.Name);
                if (property == null) continue;
                
                // üö´ –ò–ì–ù–û–†–ò–†–£–ï–ú –ø–æ–ª—è —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º [JsonIgnore]
                if (property.GetCustomAttributes(typeof(JsonIgnoreAttribute), false).Any()) continue;

                var rawValue = property.GetValue(properties);
                if (rawValue == null) continue;

                var valueRecord = new _RValue
                {
                    Id = _context.GetNextKey(),
                    IdObject = objectId,
                    IdStructure = structure.Id
                };

                // üéØ –ö–õ–Æ–ß–ï–í–ê–Ø –ú–ê–ì–ò–Ø: –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                var dbType = structure.DbType ?? "String"; // Fallback –¥–ª—è null
                
                var processedValue = await ProcessNestedObjectsAsync(rawValue, dbType, structure.IsArray ?? false, objectId);
                
                // SetValueByType —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                SetValueByType(valueRecord, dbType, processedValue, structure.IsArray ?? false);
                _context.Set<_RValue>().Add(valueRecord);
            }
        }

        /// <summary>
        /// üöÄ –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ RedbObject, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Ö —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        /// </summary>
        private async Task<object?> ProcessNestedObjectsAsync(object rawValue, string dbType, bool isArray, long parentObjectId = 0)
        {
            if (rawValue == null) return null;

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤
            if (isArray && rawValue is System.Collections.IEnumerable enumerable && rawValue is not string)
            {
                var processedList = new List<object>();
                foreach (var item in enumerable)
                {
                    if (IsRedbObjectWithoutId(item))
                    {
                        var nestedObj = (IRedbObject)item;
                        // üéØ –£–°–¢–ê–ù–û–í–ö–ê –†–û–î–ò–¢–ï–õ–Ø: –ï—Å–ª–∏ —É –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π
                        if ((nestedObj.ParentId == 0 || nestedObj.ParentId == null) && parentObjectId > 0)
                        {
                            nestedObj.ParentId = parentObjectId;
                        }
                        var savedId = await SaveAsync((dynamic)item);
                        processedList.Add((long)savedId);
                    }
                    else if (IsRedbObjectWithId(item))
                    {
                        processedList.Add(((IRedbObject)item).Id);
                    }
                    else
                    {
                        processedList.Add(item);
                    }
                }
                return processedList;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            if (IsRedbObjectWithoutId(rawValue))
            {
                var nestedObj = (IRedbObject)rawValue;
                // üéØ –£–°–¢–ê–ù–û–í–ö–ê –†–û–î–ò–¢–ï–õ–Ø: –ï—Å–ª–∏ —É –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π
                if ((nestedObj.ParentId == 0 || nestedObj.ParentId == null) && parentObjectId > 0)
                {
                    nestedObj.ParentId = parentObjectId;
                }
                var savedId = await SaveAsync((dynamic)rawValue);
                return (long)savedId;
            }
            
            if (IsRedbObjectWithId(rawValue))
            {
                return ((IRedbObject)rawValue).Id;
            }

            return rawValue;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –æ–±—ä–µ–∫—Ç —ç—Ç–æ IRedbObject —Å Id = 0 (–Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å)
        /// </summary>
        private static bool IsRedbObjectWithoutId(object? value)
        {
            if (value is IRedbObject redbObj)
            {
                return redbObj.Id == 0;
            }
            return false;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –æ–±—ä–µ–∫—Ç —ç—Ç–æ IRedbObject —Å Id != 0 (—É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω)
        /// </summary>
        private static bool IsRedbObjectWithId(object? value)
        {
            if (value is IRedbObject redbObj)
            {
                return redbObj.Id != 0;
            }
            return false;
        }

        private static void SetValueByType(_RValue valueRecord, string dbType, object? processedValue, bool isArray)
        {
            if (processedValue == null)
            {
                // –í—Å–µ –ø–æ–ª—è –æ—Å—Ç–∞–Ω—É—Ç—Å—è NULL
                return;
            }

            if (isArray)
            {
                // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ (—É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ID –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–æ–≤)
                var jsonOptions = new JsonSerializerOptions
                {
                    Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping,
                    WriteIndented = false
                };
                valueRecord.Array = JsonSerializer.Serialize(processedValue, jsonOptions);
                return;
            }

            // –ü—Ä—è–º–æ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            switch (dbType)
            {
                case "String":
                case "Text":
                    valueRecord.String = processedValue?.ToString();
                    break;
                case "Long":
                    if (processedValue is long longVal)
                        valueRecord.Long = longVal;
                    else if (processedValue is int intVal)
                        valueRecord.Long = intVal;
                    else if (long.TryParse(processedValue?.ToString(), out var parsedLong))
                        valueRecord.Long = parsedLong;
                    break;
                case "Double":
                    if (processedValue is double doubleVal)
                        valueRecord.Double = doubleVal;
                    else if (processedValue is float floatVal)
                        valueRecord.Double = floatVal;
                    else if (double.TryParse(processedValue?.ToString(), out var parsedDouble))
                        valueRecord.Double = parsedDouble;
                    break;
                case "Boolean":
                    if (processedValue is bool boolVal)
                        valueRecord.Boolean = boolVal;
                    else if (bool.TryParse(processedValue?.ToString(), out var parsedBool))
                        valueRecord.Boolean = parsedBool;
                    break;
                case "DateTime":
                    if (processedValue is DateTime dateTime)
                        valueRecord.DateTime = dateTime;
                    else if (DateTime.TryParse(processedValue?.ToString(), out var parsedDate))
                        valueRecord.DateTime = parsedDate;
                    break;
                case "Guid":
                    if (processedValue is Guid guidVal)
                        valueRecord.Guid = guidVal;
                    else if (Guid.TryParse(processedValue?.ToString(), out var parsedGuid))
                        valueRecord.Guid = parsedGuid;
                    break;
                case "ByteArray":
                    if (processedValue is byte[] byteArray)
                        valueRecord.ByteArray = byteArray;
                    break;
                case "Object":
                case "ListItem":
                    // üöÄ –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –≠—Ç–∞ –≤–µ—Ç–∫–∞ –º–æ–∂–µ—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, —Ç.–∫. Object –∏–º–µ–µ—Ç db_type="Long"
                    // –ù–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    if (processedValue is long objectId)
                        valueRecord.Long = objectId;
                    break;
                default:
                    valueRecord.String = processedValue?.ToString();
                    break;
            }
        }



        // ===== LEGACY –ú–ï–¢–û–î–´ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã) =====
        
        /*
        public async Task<int> DeleteSubtreeAsync(RedbObject parentObj, IRedbUser user, bool checkPermissions = true)
        {
            return await DeleteSubtreeAsync(parentObj.Id, user.Id, checkPermissions);
        }
        
        public async Task<int> DeleteSubtreeAsync(RedbObject parentObj, bool checkPermissions = true)
        {
            var effectiveUser = _securityContext.GetEffectiveUserWithPriority();
            return await DeleteSubtreeAsync(parentObj.Id, effectiveUser.UserId, effectiveUser.ShouldCheckPermissions && checkPermissions);
        }
        */
    }
}
