using redb.Core.Providers;
using redb.Core.DBModels;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using System.Threading.Tasks;
using redb.Core.Models.Enums;
using redb.Core.Models.Permissions;
using redb.Core.Models.Contracts;
using redb.Core.Models.Entities;
using redb.Core.Models.Security;
using System.Collections.Concurrent;

namespace redb.Core.Postgres.Providers
{
    /// <summary>
    /// PostgreSQL —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    /// </summary>
    public class PostgresPermissionProvider : IPermissionProvider
    {
        private readonly RedbContext _context;
        private readonly IRedbSecurityContext _securityContext;
        
        // ===== üöÄ SQL-–ë–ê–ó–ò–†–û–í–ê–ù–ù–´–ï –ú–ï–¢–û–î–´ –ü–†–û–í–ï–†–ö–ò –ü–†–ê–í =====
        
        /// <summary>
        /// –ö–µ—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∞–≤ (userId_objectId -> (result, cachedAt))
        /// </summary>
        private static readonly ConcurrentDictionary<string, (UserPermissionResult result, DateTime cachedAt)> _permissionCache = new();
        
        /// <summary>
        /// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞ –ø—Ä–∞–≤
        /// </summary>
        private static readonly TimeSpan _cacheLifetime = TimeSpan.FromMinutes(5);
        
        /// <summary>
        /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞ –ø—Ä–∞–≤
        /// </summary>
        private static long _cacheRequests = 0;
        private static long _cacheHits = 0;

        public PostgresPermissionProvider(RedbContext context, IRedbSecurityContext securityContext)
        {
            _context = context;
            _securityContext = securityContext;
        }

        // ===== üîß –ü–†–ò–í–ê–¢–ù–´–ï SQL –ú–ï–¢–û–î–´ =====
        
        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ SQL —Ñ—É–Ω–∫—Ü–∏—é get_user_permissions_for_object
        /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ—â–Ω—É—é —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é –ª–æ–≥–∏–∫—É –ë–î —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        /// </summary>
        /// <param name="objectId">ID –æ–±—ä–µ–∫—Ç–∞</param>
        /// <param name="userId">ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</param>
        /// <returns>–†–µ–∑—É–ª—å—Ç–∞—Ç SQL —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ null –µ—Å–ª–∏ –ø—Ä–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</returns>
        private async Task<UserPermissionResult?> GetEffectivePermissionViaSqlAsync(long objectId, long userId)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            var cacheKey = $"{userId}_{objectId}";
            Interlocked.Increment(ref _cacheRequests);
            
            if (_permissionCache.TryGetValue(cacheKey, out var cached))
            {
                var isExpired = DateTime.UtcNow - cached.cachedAt > _cacheLifetime;
                if (!isExpired)
                {
                    Interlocked.Increment(ref _cacheHits);
                    return cached.result;
                }
            }

            var result = await _context.Database
                .SqlQueryRaw<UserPermissionResult>(
                    "SELECT * FROM get_user_permissions_for_object({0}, {1})", 
                    objectId, userId)
                .FirstOrDefaultAsync();

            // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (result != null)
            {
                _permissionCache[cacheKey] = (result, DateTime.UtcNow);
            }

            return result;
        }

        /// <summary>
        /// –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –ø—Ä–∞–≤ (–ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ permissions)
        /// </summary>
        /// <param name="userId">ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (null = –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)</param>
        /// <param name="objectId">ID –æ–±—ä–µ–∫—Ç–∞ (null = –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã)</param>
        private static void InvalidatePermissionCache(long? userId = null, long? objectId = null)
        {
            if (userId.HasValue && objectId.HasValue)
            {
                // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
                _permissionCache.TryRemove($"{userId}_{objectId}", out _);
            }
            else if (userId.HasValue)
            {
                // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                var keysToRemove = _permissionCache.Keys
                    .Where(k => k.StartsWith($"{userId}_"))
                    .ToList();
                foreach (var key in keysToRemove)
                    _permissionCache.TryRemove(key, out _);
            }
            else if (objectId.HasValue)
            {
                // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ–±—ä–µ–∫—Ç–∞
                var keysToRemove = _permissionCache.Keys
                    .Where(k => k.EndsWith($"_{objectId}"))
                    .ToList();
                foreach (var key in keysToRemove)
                    _permissionCache.TryRemove(key, out _);
            }
            else
            {
                // –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–µ—à
                _permissionCache.Clear();
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞ –ø—Ä–∞–≤
        /// </summary>
        /// <returns>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∞</returns>
        public static string GetCacheStatistics()
        {
            var hitRate = _cacheRequests > 0 ? (double)_cacheHits / _cacheRequests * 100 : 0;
            return $"–ö–µ—à –ø—Ä–∞–≤: –ó–∞–ø—Ä–æ—Å–æ–≤={_cacheRequests}, " +
                   $"–ü–æ–ø–∞–¥–∞–Ω–∏–π={_cacheHits}, " +
                   $"Hit Rate={hitRate:F1}%, " +
                   $"–ó–∞–ø–∏—Å–µ–π –≤ –∫–µ—à–µ={_permissionCache.Count}";
        }

        // ===== –ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç _securityContext) =====
        
        public IQueryable<long> GetReadableObjectIds()
        {
            var effectiveUser = ((RedbSecurityContext)_securityContext).GetEffectiveUser();
            return GetReadableObjectIds(effectiveUser.Id);
        }

        public async Task<bool> CanUserEditObject(IRedbObject obj)
        {
            var effectiveUser = ((RedbSecurityContext)_securityContext).GetEffectiveUser();
            return await CanUserEditObject(obj.Id, effectiveUser.Id);
        }

        public async Task<bool> CanUserSelectObject(IRedbObject obj)
        {
            var effectiveUser = ((RedbSecurityContext)_securityContext).GetEffectiveUser();
            return await CanUserSelectObject(obj.Id, effectiveUser.Id);
        }

        public async Task<bool> CanUserInsertScheme(IRedbScheme scheme)
        {
            var effectiveUser = ((RedbSecurityContext)_securityContext).GetEffectiveUser();
            return await CanUserInsertScheme(scheme.Id, effectiveUser.Id);
        }

        // ===== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –° –Ø–í–ù–´–ú –£–ö–ê–ó–ê–ù–ò–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =====

        public IQueryable<long> GetReadableObjectIds(IRedbUser user)
        {
            return GetReadableObjectIds(user.Id);
        }
        
        public IQueryable<long> GetReadableObjectIds(long userId)
        {
            // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—â–Ω—ã–π SQL VIEW v_user_permissions –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            return _context.Database
                .SqlQuery<long>($"""
                    SELECT DISTINCT object_id 
                    FROM v_user_permissions 
                    WHERE user_id = {userId} 
                      AND can_select = true
                    """);
        }

        public async Task<bool> CanUserEditObject(long objectId, long userId)
        {
            var permission = await GetEffectivePermissionViaSqlAsync(objectId, userId);
            if (permission == null)
            {
                throw new InvalidOperationException($"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {objectId} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}. SQL —Ñ—É–Ω–∫—Ü–∏—è get_user_permissions_for_object –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –≤–µ—Ä–Ω—É–ª–∞ NULL.");
            }
            return permission.CanUpdate;
        }

        public async Task<bool> CanUserSelectObject(long objectId, long userId)
        {
            var permission = await GetEffectivePermissionViaSqlAsync(objectId, userId);
            if (permission == null)
            {
                throw new InvalidOperationException($"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {objectId} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}. SQL —Ñ—É–Ω–∫—Ü–∏—è get_user_permissions_for_object –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –≤–µ—Ä–Ω—É–ª–∞ NULL.");
            }
            return permission.CanSelect;
        }

        public async Task<bool> CanUserInsertScheme(long schemeId, long userId)
        {
            var permission = await GetEffectivePermissionViaSqlAsync(schemeId, userId);
            if (permission == null)
            {
                throw new InvalidOperationException($"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è —Å—Ö–µ–º—ã {schemeId} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}. SQL —Ñ—É–Ω–∫—Ü–∏—è get_user_permissions_for_object –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –≤–µ—Ä–Ω—É–ª–∞ NULL.");
            }
            return permission.CanInsert;
        }

        public async Task<bool> CanUserDeleteObject(IRedbObject obj)
        {
            var effectiveUser = ((RedbSecurityContext)_securityContext).GetEffectiveUser();
            return await CanUserDeleteObject(obj, effectiveUser);
        }

        public async Task<bool> CanUserDeleteObject(RedbObject obj, IRedbUser user)
        {
            return await CanUserDeleteObject(obj.Id, user.Id);
        }

        public async Task<bool> CanUserInsertScheme(RedbObject obj, IRedbUser user)
        {
            return await CanUserInsertScheme(obj.SchemeId, user.Id);
        }

        public async Task<bool> CanUserEditObject(IRedbObject obj, IRedbUser user)
        {
            return await CanUserEditObject(obj.Id, user.Id);
        }

        public async Task<bool> CanUserSelectObject(IRedbObject obj, IRedbUser user)
        {
            return await CanUserSelectObject(obj.Id, user.Id);
        }

        public async Task<bool> CanUserInsertScheme(IRedbScheme scheme, IRedbUser user)
        {
            return await CanUserInsertScheme(scheme.Id, user.Id);
        }

        public async Task<bool> CanUserDeleteObject(IRedbObject obj, IRedbUser user)
        {
            return await CanUserDeleteObject(obj.Id, user.Id);
        }
        
        public async Task<bool> CanUserEditObject(RedbObject obj)
        {
            var effectiveUser = ((RedbSecurityContext)_securityContext).GetEffectiveUser();
            return await CanUserEditObject(obj.Id, effectiveUser.Id);
        }
        
        public async Task<bool> CanUserSelectObject(RedbObject obj)
        {
            var effectiveUser = ((RedbSecurityContext)_securityContext).GetEffectiveUser();
            return await CanUserSelectObject(obj.Id, effectiveUser.Id);
        }
        
        public async Task<bool> CanUserDeleteObject(RedbObject obj)
        {
            var effectiveUser = ((RedbSecurityContext)_securityContext).GetEffectiveUser();
            return await CanUserDeleteObject(obj.Id, effectiveUser.Id);
        }
        
        public async Task<bool> CanUserEditObject(RedbObject obj, IRedbUser user)
        {
            return await CanUserEditObject(obj.Id, user.Id);
        }
        
        public async Task<bool> CanUserSelectObject(RedbObject obj, IRedbUser user)
        {
            return await CanUserSelectObject(obj.Id, user.Id);
        }

        public async Task<bool> CanUserDeleteObject(long objectId, long userId)
        {
            var permission = await GetEffectivePermissionViaSqlAsync(objectId, userId);
            if (permission == null)
            {
                throw new InvalidOperationException($"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {objectId} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}. SQL —Ñ—É–Ω–∫—Ü–∏—è get_user_permissions_for_object –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –≤–µ—Ä–Ω—É–ª–∞ NULL.");
            }
            return permission.CanDelete;
        }

        // ===== üîß –ù–û–í–´–ï CRUD –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ó–†–ï–®–ï–ù–ò–ô =====

        public async Task<IRedbPermission> CreatePermissionAsync(PermissionRequest request, IRedbUser? currentUser = null)
        {
            var newPermission = new _RPermission
            {
                Id = _context.GetNextKey(),
                IdUser = request.UserId,
                IdRole = request.RoleId,
                IdRef = request.ObjectId,
                Select = request.CanSelect,
                Insert = request.CanInsert,
                Update = request.CanUpdate,
                Delete = request.CanDelete
            };

            _context.Set<_RPermission>().Add(newPermission);
            await _context.SaveChangesAsync();

            // ‚≠ê –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            InvalidatePermissionCache(request.UserId, request.ObjectId);
            if (request.ObjectId != 0) // –ï—Å–ª–∏ –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞
            {
                InvalidatePermissionCache(null, request.ObjectId); // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            }

            return RedbPermission.FromEntity(newPermission);
        }

        public async Task<IRedbPermission> UpdatePermissionAsync(IRedbPermission permission, PermissionRequest request, IRedbUser? currentUser = null)
        {
            var dbPermission = await _context.Set<_RPermission>()
                .FirstOrDefaultAsync(p => p.Id == permission.Id);

            if (dbPermission == null)
                throw new ArgumentException($"–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å ID {permission.Id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞
            dbPermission.Select = request.CanSelect;
            dbPermission.Insert = request.CanInsert;
            dbPermission.Update = request.CanUpdate;
            dbPermission.Delete = request.CanDelete;

            await _context.SaveChangesAsync();

            return RedbPermission.FromEntity(dbPermission);
        }

        public async Task<bool> DeletePermissionAsync(IRedbPermission permission, IRedbUser? currentUser = null)
        {
            var dbPermission = await _context.Set<_RPermission>()
                .FirstOrDefaultAsync(p => p.Id == permission.Id);

            if (dbPermission == null)
                return false;

            _context.Set<_RPermission>().Remove(dbPermission);
            var result = await _context.SaveChangesAsync();

            // ‚≠ê –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            InvalidatePermissionCache(permission.IdUser, permission.IdRef);
            if (permission.IdRef != 0) // –ï—Å–ª–∏ –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞
            {
                InvalidatePermissionCache(null, permission.IdRef); // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            }

            return result > 0;
        }

        // ===== üîç –ü–û–ò–°–ö –†–ê–ó–†–ï–®–ï–ù–ò–ô =====

        public async Task<List<IRedbPermission>> GetPermissionsByUserAsync(IRedbUser user)
        {
            var permissions = await _context.Set<_RPermission>()
                .Where(p => p.IdUser == user.Id)
                .Include(p => p.UserNavigation)
                .ToListAsync();
            
            return permissions.Select(p => (IRedbPermission)RedbPermission.FromEntity(p)).ToList();
        }

        public async Task<List<IRedbPermission>> GetPermissionsByRoleAsync(IRedbRole role)
        {
            var permissions = await _context.Set<_RPermission>()
                .Where(p => p.IdRole == role.Id)
                .Include(p => p.RoleNavigation)
                .ToListAsync();
            
            return permissions.Select(p => (IRedbPermission)RedbPermission.FromEntity(p)).ToList();
        }

        public async Task<List<IRedbPermission>> GetPermissionsByObjectAsync(IRedbObject obj)
        {
            var permissions = await _context.Set<_RPermission>()
                .Where(p => p.IdRef == obj.Id || p.IdRef == 0) // –í–∫–ª—é—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞
                .Include(p => p.UserNavigation)
                .Include(p => p.RoleNavigation)
                .ToListAsync();
            
            return permissions.Select(p => (IRedbPermission)RedbPermission.FromEntity(p)).ToList();
        }

        public async Task<IRedbPermission?> GetPermissionByIdAsync(long permissionId)
        {
            var permission = await _context.Set<_RPermission>()
                .Where(p => p.Id == permissionId)
                .Include(p => p.UserNavigation)
                .Include(p => p.RoleNavigation)
                .FirstOrDefaultAsync();
            
            return permission != null ? RedbPermission.FromEntity(permission) : null;
        }

        // ===== üéØ –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ó–†–ï–®–ï–ù–ò–Ø–ú–ò =====

        public async Task<bool> GrantPermissionAsync(IRedbUser user, IRedbObject obj, PermissionAction actions, IRedbUser? currentUser = null)
        {
            return await GrantPermissionAsync(user.Id, null, obj.Id, actions, currentUser);
        }

        public async Task<bool> GrantPermissionAsync(IRedbRole role, IRedbObject obj, PermissionAction actions, IRedbUser? currentUser = null)
        {
            return await GrantPermissionAsync(null, role.Id, obj.Id, actions, currentUser);
        }

        private async Task<bool> GrantPermissionAsync(long? userId, long? roleId, long objectId, PermissionAction actions, IRedbUser? currentUser = null)
        {
            // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            var existingPermission = await _context.Set<_RPermission>()
                .FirstOrDefaultAsync(p => p.IdUser == userId && p.IdRole == roleId && p.IdRef == objectId);

            if (existingPermission != null)
            {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (–¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞)
                existingPermission.Select = existingPermission.Select == true || actions.HasFlag(PermissionAction.Select);
                existingPermission.Insert = existingPermission.Insert == true || actions.HasFlag(PermissionAction.Insert);
                existingPermission.Update = existingPermission.Update == true || actions.HasFlag(PermissionAction.Update);
                existingPermission.Delete = existingPermission.Delete == true || actions.HasFlag(PermissionAction.Delete);
            }
            else
            {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                var newPermission = new _RPermission
                {
                    Id = _context.GetNextKey(),
                    IdUser = userId,
                    IdRole = roleId,
                    IdRef = objectId,
                    Select = actions.HasFlag(PermissionAction.Select),
                    Insert = actions.HasFlag(PermissionAction.Insert),
                    Update = actions.HasFlag(PermissionAction.Update),
                    Delete = actions.HasFlag(PermissionAction.Delete)
                };

                _context.Set<_RPermission>().Add(newPermission);
            }

            var result = await _context.SaveChangesAsync();
            return result > 0;
        }

        public async Task<bool> RevokePermissionAsync(IRedbUser user, IRedbObject obj, IRedbUser? currentUser = null)
        {
            return await RevokePermissionAsync(user.Id, null, obj.Id, currentUser);
        }

        public async Task<bool> RevokePermissionAsync(IRedbRole role, IRedbObject obj, IRedbUser? currentUser = null)
        {
            return await RevokePermissionAsync(null, role.Id, obj.Id, currentUser);
        }

        private async Task<bool> RevokePermissionAsync(long? userId, long? roleId, long objectId, IRedbUser? currentUser = null)
        {
            var permission = await _context.Set<_RPermission>()
                .FirstOrDefaultAsync(p => p.IdUser == userId && p.IdRole == roleId && p.IdRef == objectId);

            if (permission == null)
                return false;

            _context.Set<_RPermission>().Remove(permission);
            var result = await _context.SaveChangesAsync();

            return result > 0;
        }

        public async Task<int> RevokeAllUserPermissionsAsync(IRedbUser user, IRedbUser? currentUser = null)
        {
            var permissions = await _context.Set<_RPermission>()
                .Where(p => p.IdUser == user.Id)
                .ToListAsync();

            _context.Set<_RPermission>().RemoveRange(permissions);
            var result = await _context.SaveChangesAsync();

            return result;
        }

        public async Task<int> RevokeAllRolePermissionsAsync(IRedbRole role, IRedbUser? currentUser = null)
        {
            var permissions = await _context.Set<_RPermission>()
                .Where(p => p.IdRole == role.Id)
                .ToListAsync();

            _context.Set<_RPermission>().RemoveRange(permissions);
            var result = await _context.SaveChangesAsync();

            return result;
        }

        public async Task<EffectivePermissionResult> GetEffectivePermissionsAsync(IRedbUser user, IRedbObject obj)
        {
            return await GetEffectivePermissionsAsync(user.Id, obj.Id);
        }

        public async Task<Dictionary<IRedbObject, EffectivePermissionResult>> GetEffectivePermissionsBatchAsync(IRedbUser user, IRedbObject[] objects)
        {
            var objectIds = objects.Select(o => o.Id).ToArray();
            var results = await GetEffectivePermissionsBatchAsync(user.Id, objectIds);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            var finalResults = new Dictionary<IRedbObject, EffectivePermissionResult>();
            foreach (var obj in objects)
            {
                if (results.TryGetValue(obj.Id, out var result))
                {
                    finalResults[obj] = result;
                }
            }
            
            return finalResults;
        }

        public async Task<List<EffectivePermissionResult>> GetAllEffectivePermissionsAsync(IRedbUser user)
        {
            return await GetAllEffectivePermissionsAsync(user.Id);
        }

        // ===== ‚ö° –≠–§–§–ï–ö–¢–ò–í–ù–´–ï –ü–†–ê–í–ê =====

        public async Task<EffectivePermissionResult> GetEffectivePermissionsAsync(long userId, long objectId)
        {
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—ã–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–∫–ª—é—á–∞—è –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ _id_ref=0)
            var userPermissions = await _context.Set<_RPermission>()
                .Where(p => p.IdUser == userId && (p.IdRef == objectId || p.IdRef == 0))
                .ToListAsync();

            // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var userRoles = await _context.Set<_RUsersRole>()
                .Where(ur => ur.IdUser == userId)
                .Select(ur => ur.IdRole)
                .ToListAsync();

            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∞ —Ä–æ–ª–µ–π (–≤–∫–ª—é—á–∞—è –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ _id_ref=0)
            var rolePermissions = await _context.Set<_RPermission>()
                .Where(p => userRoles.Contains(p.IdRole ?? 0) && (p.IdRef == objectId || p.IdRef == 0))
                .ToListAsync();

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–∞–≤–∞ (OR –ª–æ–≥–∏–∫–∞)
            var result = new EffectivePermissionResult
            {
                UserId = userId,
                ObjectId = objectId,
                PermissionSourceId = objectId,
                PermissionType = "Combined",
                CanSelect = userPermissions.Any(p => p.Select == true) || rolePermissions.Any(p => p.Select == true),
                CanInsert = userPermissions.Any(p => p.Insert == true) || rolePermissions.Any(p => p.Insert == true),
                CanUpdate = userPermissions.Any(p => p.Update == true) || rolePermissions.Any(p => p.Update == true),
                CanDelete = userPermissions.Any(p => p.Delete == true) || rolePermissions.Any(p => p.Delete == true)
            };

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            if (userPermissions.Any() && rolePermissions.Any())
            {
                result.PermissionType = "UserAndRole";
            }
            else if (userPermissions.Any())
            {
                result.PermissionType = "User";
                result.PermissionUserId = userId;
            }
            else if (rolePermissions.Any())
            {
                result.PermissionType = "Role";
                result.RoleId = rolePermissions.First().IdRole;
            }

            return result;
        }

        public async Task<Dictionary<long, EffectivePermissionResult>> GetEffectivePermissionsBatchAsync(long userId, long[] objectIds)
        {
            if (objectIds == null || objectIds.Length == 0)
                return new Dictionary<long, EffectivePermissionResult>();

            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—ã–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
            var userPermissions = await _context.Set<_RPermission>()
                .Where(p => p.IdUser == userId && objectIds.Contains(p.IdRef))
                .ToListAsync();

            // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var userRoles = await _context.Set<_RUsersRole>()
                .Where(ur => ur.IdUser == userId)
                .Select(ur => ur.IdRole)
                .ToListAsync();

            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∞ —Ä–æ–ª–µ–π –Ω–∞ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
            var rolePermissions = await _context.Set<_RPermission>()
                .Where(p => userRoles.Contains(p.IdRole ?? 0) && objectIds.Contains(p.IdRef))
                .ToListAsync();

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–∞–≤–∞ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º
            var userPermissionsByObject = userPermissions.GroupBy(p => p.IdRef).ToDictionary(g => g.Key, g => g.ToList());
            var rolePermissionsByObject = rolePermissions.GroupBy(p => p.IdRef).ToDictionary(g => g.Key, g => g.ToList());

            var result = new Dictionary<long, EffectivePermissionResult>();

            // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            foreach (var objectId in objectIds)
            {
                var userPerms = userPermissionsByObject.GetValueOrDefault(objectId, new List<_RPermission>());
                var rolePerms = rolePermissionsByObject.GetValueOrDefault(objectId, new List<_RPermission>());

                var effectiveResult = new EffectivePermissionResult
                {
                    UserId = userId,
                    ObjectId = objectId,
                    PermissionSourceId = objectId,
                    PermissionType = "Combined",
                    CanSelect = userPerms.Any(p => p.Select == true) || rolePerms.Any(p => p.Select == true),
                    CanInsert = userPerms.Any(p => p.Insert == true) || rolePerms.Any(p => p.Insert == true),
                    CanUpdate = userPerms.Any(p => p.Update == true) || rolePerms.Any(p => p.Update == true),
                    CanDelete = userPerms.Any(p => p.Delete == true) || rolePerms.Any(p => p.Delete == true)
                };

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                if (userPerms.Any() && rolePerms.Any())
                {
                    effectiveResult.PermissionType = "UserAndRole";
                }
                else if (userPerms.Any())
                {
                    effectiveResult.PermissionType = "User";
                    effectiveResult.PermissionUserId = userId;
                }
                else if (rolePerms.Any())
                {
                    effectiveResult.PermissionType = "Role";
                    effectiveResult.RoleId = rolePerms.First().IdRole;
                }

                result[objectId] = effectiveResult;
            }

            return result;
        }

        public async Task<List<EffectivePermissionResult>> GetAllEffectivePermissionsAsync(long userId)
        {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä—è–º—ã–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var userPermissions = await _context.Set<_RPermission>()
                .Where(p => p.IdUser == userId)
                .ToListAsync();

            // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var userRoles = await _context.Set<_RUsersRole>()
                .Where(ur => ur.IdUser == userId)
                .Select(ur => ur.IdRole)
                .ToListAsync();

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∞ —Ä–æ–ª–µ–π
            var rolePermissions = await _context.Set<_RPermission>()
                .Where(p => userRoles.Contains(p.IdRole ?? 0))
                .ToListAsync();

            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            var allObjectIds = userPermissions.Select(p => p.IdRef)
                .Concat(rolePermissions.Select(p => p.IdRef))
                .Distinct()
                .ToList();

            var result = new List<EffectivePermissionResult>();

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–∞–≤–∞ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º
            var userPermissionsByObject = userPermissions.GroupBy(p => p.IdRef).ToDictionary(g => g.Key, g => g.ToList());
            var rolePermissionsByObject = rolePermissions.GroupBy(p => p.IdRef).ToDictionary(g => g.Key, g => g.ToList());

            // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            foreach (var objectId in allObjectIds)
            {
                var userPerms = userPermissionsByObject.GetValueOrDefault(objectId, new List<_RPermission>());
                var rolePerms = rolePermissionsByObject.GetValueOrDefault(objectId, new List<_RPermission>());

                var effectiveResult = new EffectivePermissionResult
                {
                    UserId = userId,
                    ObjectId = objectId,
                    PermissionSourceId = objectId,
                    PermissionType = "Combined",
                    CanSelect = userPerms.Any(p => p.Select == true) || rolePerms.Any(p => p.Select == true),
                    CanInsert = userPerms.Any(p => p.Insert == true) || rolePerms.Any(p => p.Insert == true),
                    CanUpdate = userPerms.Any(p => p.Update == true) || rolePerms.Any(p => p.Update == true),
                    CanDelete = userPerms.Any(p => p.Delete == true) || rolePerms.Any(p => p.Delete == true)
                };

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                if (userPerms.Any() && rolePerms.Any())
                {
                    effectiveResult.PermissionType = "UserAndRole";
                }
                else if (userPerms.Any())
                {
                    effectiveResult.PermissionType = "User";
                    effectiveResult.PermissionUserId = userId;
                }
                else if (rolePerms.Any())
                {
                    effectiveResult.PermissionType = "Role";
                    effectiveResult.RoleId = rolePerms.First().IdRole;
                }

                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–∞–≤–∞
                if (effectiveResult.HasAnyPermission)
                {
                    result.Add(effectiveResult);
                }
            }

            return result.OrderBy(r => r.ObjectId).ToList();
        }

        // ===== üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====

        public async Task<int> GetPermissionCountAsync()
        {
            return await _context.Set<_RPermission>().CountAsync();
        }

        public async Task<int> GetUserPermissionCountAsync(IRedbUser user)
        {
            return await GetUserPermissionCountAsync(user.Id);
        }

        public async Task<int> GetUserPermissionCountAsync(long userId)
        {
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä—è–º—ã–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var directPermissions = await _context.Set<_RPermission>()
                .Where(p => p.IdUser == userId)
                .CountAsync();

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∞ —á–µ—Ä–µ–∑ —Ä–æ–ª–∏
            var userRoles = await _context.Set<_RUsersRole>()
                .Where(ur => ur.IdUser == userId)
                .Select(ur => ur.IdRole)
                .ToListAsync();

            var rolePermissions = await _context.Set<_RPermission>()
                .Where(p => userRoles.Contains(p.IdRole ?? 0))
                .CountAsync();

            return directPermissions + rolePermissions;
        }

        public async Task<int> GetRolePermissionCountAsync(IRedbRole role)
        {
            return await GetRolePermissionCountAsync(role.Id);
        }

        public async Task<int> GetRolePermissionCountAsync(long roleId)
        {
            return await _context.Set<_RPermission>()
                .Where(p => p.IdRole == roleId)
                .CountAsync();
        }
    }
}