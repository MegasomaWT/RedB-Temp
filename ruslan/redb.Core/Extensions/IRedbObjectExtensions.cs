using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using redb.Core.Models.Contracts;
using redb.Core.Models.Entities;
using redb.Core.Providers;

namespace redb.Core.Extensions
{
    /// <summary>
    /// Extension –º–µ—Ç–æ–¥—ã –¥–ª—è IRedbObject –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ä–µ–≤—å—è–º–∏ –∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
    /// </summary>
    public static class IRedbObjectExtensions
    {
        // ===== –î–†–ï–í–û–í–ò–î–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò =====

        /// <summary>
        /// üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –ø–æ—Ç–æ–º–∫–æ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
        /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é –∏–∑ GetPathToRootAsync, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç —Ü–∏–∫–ª–æ–≤
        /// </summary>
        /// <param name="obj">–ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π –æ–±—ä–µ–∫—Ç</param>
        /// <param name="potentialAncestor">–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–æ–∫</param>
        /// <param name="treeProvider">–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ä–µ–≤—å—è–º–∏</param>
        public static async Task<bool> IsDescendantOfAsync<T>(
            this IRedbObject obj, 
            IRedbObject potentialAncestor,
            ITreeProvider treeProvider) where T : class, new()
        {
            if (obj.Id == potentialAncestor.Id) return false; // –û–±—ä–µ–∫—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ—Ç–æ–º–∫–æ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è
            
            try
            {
                // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥, –Ω–æ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ü–∏–∫–ª–æ–≤
                var pathToRoot = await treeProvider.GetPathToRootAsync<T>(obj);
                
                // üîç –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º HashSet –¥–ª—è O(1) –ø–æ–∏—Å–∫–∞ –≤–º–µ—Å—Ç–æ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –ø–µ—Ä–µ–±–æ—Ä–∞
                var ancestorIds = new HashSet<long>(pathToRoot.Select(ancestor => ancestor.Id));
                return ancestorIds.Contains(potentialAncestor.Id);
            }
            catch
            {
                return false; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –ø—Ä–µ–¥–∫–æ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–º–∫–∞
        /// </summary>
        /// <param name="obj">–ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π –æ–±—ä–µ–∫—Ç</param>
        /// <param name="potentialDescendant">–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–º–æ–∫</param>
        /// <param name="treeProvider">–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ä–µ–≤—å—è–º–∏</param>
        public static async Task<bool> IsAncestorOfAsync<T>(
            this IRedbObject obj, 
            IRedbObject potentialDescendant,
            ITreeProvider treeProvider) where T : class, new()
        {
            return await potentialDescendant.IsDescendantOfAsync<T>(obj, treeProvider);
        }

        /// <summary>
        /// üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è: –ü–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –æ–±—ä–µ–∫—Ç–∞ –≤ –¥–µ—Ä–µ–≤–µ (–∫–æ—Ä–µ–Ω—å = 0)  
        /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞—â–∏—Ç—É –æ—Ç —Ü–∏–∫–ª–æ–≤ –∏ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        /// </summary>
        /// <param name="obj">–û–±—ä–µ–∫—Ç</param>
        /// <param name="treeProvider">–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ä–µ–≤—å—è–º–∏</param>
        public static async Task<int> GetTreeLevelAsync<T>(
            this IRedbObject obj,
            ITreeProvider treeProvider) where T : class, new()
        {
            try
            {
                var pathToRoot = await treeProvider.GetPathToRootAsync<T>(obj);
                var pathCount = pathToRoot.Count();
                
                // ‚úÖ –ó–ê–©–ò–¢–ê: –ï—Å–ª–∏ –ø—É—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å —Ü–∏–∫–ª
                if (pathCount > 1000) 
                {
                    return -1; // –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≥–ª—É–±–æ–∫–æ–µ –¥–µ—Ä–µ–≤–æ - –≤–æ–∑–º–æ–∂–Ω–æ —Ü–∏–∫–ª
                }
                
                return Math.Max(0, pathCount - 1); // -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ –ø—É—Ç–∏ –≤–∫–ª—é—á–µ–Ω —Å–∞–º –æ–±—ä–µ–∫—Ç
            }
            catch
            {
                return -1; // –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç –ª–∏—Å—Ç–æ–º –¥–µ—Ä–µ–≤–∞ (–±–µ–∑ –¥–µ—Ç–µ–π)
        /// </summary>
        /// <param name="obj">–û–±—ä–µ–∫—Ç</param>
        /// <param name="treeProvider">–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ä–µ–≤—å—è–º–∏</param>
        public static async Task<bool> IsLeafAsync<T>(
            this IRedbObject obj,
            ITreeProvider treeProvider) where T : class, new()
        {
            try
            {
                var children = await treeProvider.GetChildrenAsync<T>(obj);
                return !children.Any();
            }
            catch
            {
                return true; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –ª–∏—Å—Ç–æ–º
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –æ–±—ä–µ–∫—Ç–∞
        /// </summary>
        /// <param name="obj">–û–±—ä–µ–∫—Ç</param>
        /// <param name="treeProvider">–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ä–µ–≤—å—è–º–∏</param>
        public static async Task<int> GetChildrenCountAsync<T>(
            this IRedbObject obj,
            ITreeProvider treeProvider) where T : class, new()
        {
            try
            {
                var children = await treeProvider.GetChildrenAsync<T>(obj);
                return children.Count();
            }
            catch
            {
                return 0;
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤ –æ–±—ä–µ–∫—Ç–∞
        /// </summary>
        /// <param name="obj">–û–±—ä–µ–∫—Ç</param>
        /// <param name="treeProvider">–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ä–µ–≤—å—è–º–∏</param>
        /// <param name="maxDepth">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞</param>
        public static async Task<int> GetDescendantsCountAsync<T>(
            this IRedbObject obj,
            ITreeProvider treeProvider,
            int? maxDepth = null) where T : class, new()
        {
            try
            {
                var descendants = await treeProvider.GetDescendantsAsync<T>(obj, maxDepth);
                return descendants.Count();
            }
            catch
            {
                return 0;
            }
        }

        // ===== –ü–†–û–í–ï–†–ö–ò –°–û–°–¢–û–Ø–ù–ò–Ø =====

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –æ–±—ä–µ–∫—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –º–µ—Ç–∫–∞–º
        /// </summary>
        /// <param name="obj">–û–±—ä–µ–∫—Ç</param>
        /// <param name="checkDate">–î–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∞—è)</param>
        public static bool IsActiveAt(this IRedbObject obj, DateTime? checkDate = null)
        {
            var date = checkDate ?? DateTime.Now;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
            if (obj.DateBegin.HasValue && date < obj.DateBegin.Value)
                return false;
                
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
            if (obj.DateComplete.HasValue && date > obj.DateComplete.Value)
                return false;
                
            return true;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –æ–±—ä–µ–∫—Ç–∞
        /// </summary>
        /// <param name="obj">–û–±—ä–µ–∫—Ç</param>
        /// <param name="checkDate">–î–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∞—è)</param>
        public static bool IsExpired(this IRedbObject obj, DateTime? checkDate = null)
        {
            var date = checkDate ?? DateTime.Now;
            return obj.DateComplete.HasValue && date > obj.DateComplete.Value;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—á–∞–ª –ª–∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç
        /// </summary>
        /// <param name="obj">–û–±—ä–µ–∫—Ç</param>
        /// <param name="checkDate">–î–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∞—è)</param>
        public static bool HasStarted(this IRedbObject obj, DateTime? checkDate = null)
        {
            var date = checkDate ?? DateTime.Now;
            return !obj.DateBegin.HasValue || date >= obj.DateBegin.Value;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞ (–≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è)
        /// </summary>
        /// <param name="obj">–û–±—ä–µ–∫—Ç</param>
        /// <param name="referenceDate">–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–∞—è –¥–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∞—è)</param>
        public static TimeSpan GetAge(this IRedbObject obj, DateTime? referenceDate = null)
        {
            var date = referenceDate ?? DateTime.Now;
            return date - obj.DateCreate;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        /// </summary>
        /// <param name="obj">–û–±—ä–µ–∫—Ç</param>
        /// <param name="referenceDate">–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–∞—è –¥–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–µ–∫—É—â–∞—è)</param>
        public static TimeSpan GetTimeSinceLastModification(this IRedbObject obj, DateTime? referenceDate = null)
        {
            var date = referenceDate ?? DateTime.Now;
            return date - obj.DateModify;
        }

        // ===== –£–¢–ò–õ–ò–¢–´ =====

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –æ–±—ä–µ–∫—Ç–∞ —Å fallback –ª–æ–≥–∏–∫–æ–π
        /// </summary>
        /// <param name="obj">–û–±—ä–µ–∫—Ç</param>
        /// <param name="includeId">–í–∫–ª—é—á–∞—Ç—å –ª–∏ ID –≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è</param>
        public static string GetDisplayName(this IRedbObject obj, bool includeId = true)
        {
            var displayName = obj.Name;
            
            // Fallback –∫ –∫–æ–¥–∞–º
            if (string.IsNullOrWhiteSpace(displayName))
            {
                if (!string.IsNullOrWhiteSpace(obj.CodeString))
                    displayName = obj.CodeString;
                else if (obj.CodeInt.HasValue)
                    displayName = $"Code_{obj.CodeInt.Value}";
                else if (obj.CodeGuid.HasValue)
                    displayName = obj.CodeGuid.Value.ToString("D").Substring(0, 8);
                else if (obj.Key.HasValue)
                    displayName = $"Key_{obj.Key.Value}";
                else
                    displayName = $"Object_{obj.Id}";
            }
            
            return includeId ? $"{displayName} (#{obj.Id})" : displayName;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        /// </summary>
        /// <param name="obj">–û–±—ä–µ–∫—Ç</param>
        public static string GetDebugInfo(this IRedbObject obj)
        {
            return $"Object[Id={obj.Id}, Scheme={obj.SchemeId}, Name='{obj.Name}', Parent={obj.ParentId}, Owner={obj.OwnerId}]";
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏ –æ–±—ä–µ–∫—Ç–∞
        /// </summary>
        /// <param name="pathObjects">–û–±—ä–µ–∫—Ç—ã –ø—É—Ç–∏ –æ—Ç –∫–æ—Ä–Ω—è –∫ –æ–±—ä–µ–∫—Ç—É</param>
        /// <param name="separator">–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "/")</param>
        public static string CreateHierarchicalPath(this IEnumerable<IRedbObject> pathObjects, string separator = "/")
        {
            return string.Join(separator, pathObjects.Select(obj => obj.Name ?? $"#{obj.Id}"));
        }
    }
}
