using Microsoft.Extensions.DependencyInjection;
using redb.Core.Models.Attributes;
using redb.Core.Postgres.Providers;
using redb.Core.Utils;

namespace redb.Examples
{
    // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª–∏ —Å –Ω–æ–≤—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
    
    [RedbScheme]
    public class Company
    {
        public string Name { get; set; } = string.Empty;
        public string Inn { get; set; } = string.Empty;
        public DateTime RegisterDate { get; set; }
    }

    [RedbScheme("emp")]  // –ê–ª–∏–∞—Å –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
    public class Employee
    {
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Position { get; set; } = string.Empty;
        public decimal Salary { get; set; }
        public DateTime HireDate { get; set; }
    }

    [RedbScheme]
    public class Project
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public DateTime StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public string Status { get; set; } = "Active";
    }

    // 2. –ü—Ä–∏–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–≥–æ –Ω–æ–≤–æ–µ API
    
    public class OrganizationService
    {
        private readonly PostgresTreeProvider _treeProvider;

        public OrganizationService(PostgresTreeProvider treeProvider)
        {
            _treeProvider = treeProvider;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
        /// </summary>
        public async Task<OrganizationStructure> GetOrganizationStructureAsync(long companyId)
        {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –∫–∞–∫ –∫–æ—Ä–µ–Ω—å
            var company = await LoadCompanyAsync(companyId);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω–æ–µ –¥–µ—Ä–µ–≤–æ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ!
            var orgTree = await _treeProvider.LoadPolymorphicTreeAsync(company, maxDepth: 10);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            var structure = new OrganizationStructure();
            
            if (orgTree is RedbObject<Company> companyObj)
            {
                structure.CompanyName = companyObj.properties.Name;
                structure.CompanyInn = companyObj.properties.Inn;
            }

            // –°–æ–±–∏—Ä–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ –¥–µ—Ä–µ–≤–∞
            await AnalyzeOrganizationTree(orgTree, structure);
            
            return structure;
        }

        /// <summary>
        /// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–µ—Ä–µ–≤–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
        /// </summary>
        private async Task AnalyzeOrganizationTree(ITreeRedbObject node, OrganizationStructure structure)
        {
            // –ö–∞–∂–¥—ã–π —É–∑–µ–ª —É–∂–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω –±–ª–∞–≥–æ–¥–∞—Ä—è AutomaticTypeRegistry!
            
            switch (node)
            {
                case RedbObject<Employee> emp:
                    structure.Employees.Add(new EmployeeInfo
                    {
                        Id = emp.Id,
                        FullName = $"{emp.properties.FirstName} {emp.properties.LastName}",
                        Position = emp.properties.Position,
                        Salary = emp.properties.Salary,
                        HireDate = emp.properties.HireDate
                    });
                    break;
                    
                case RedbObject<Project> proj:
                    structure.Projects.Add(new ProjectInfo
                    {
                        Id = proj.Id,
                        Title = proj.properties.Title,
                        Description = proj.properties.Description,
                        Status = proj.properties.Status,
                        StartDate = proj.properties.StartDate,
                        EndDate = proj.properties.EndDate
                    });
                    break;
                    
                // –ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–ø—ã
                case RedbObject<Company> subCompany:
                    structure.Subsidiaries.Add(subCompany.properties.Name);
                    break;
            }

            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ç–µ–π
            foreach (var child in node.Children)
            {
                await AnalyzeOrganizationTree(child, structure);
            }
        }

        /// <summary>
        /// –ù–∞–π—Ç–∏ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        /// </summary>
        public async Task<List<Employee>> GetTeamMembersAsync(long managerId)
        {
            var manager = await LoadEmployeeAsync(managerId);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö!
            var allSubordinates = await _treeProvider.GetPolymorphicDescendantsAsync(manager);
            
            var teamMembers = new List<Employee>();
            
            foreach (var subordinate in allSubordinates)
            {
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
                if (subordinate is RedbObject<Employee> emp)
                {
                    teamMembers.Add(emp.properties);
                }
            }
            
            return teamMembers;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        /// </summary>
        public async Task<List<string>> GetCareerPathAsync(long employeeId)
        {
            var employee = await LoadEmployeeAsync(employeeId);
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é - –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω!
            var careerPath = await _treeProvider.GetPolymorphicPathToRootAsync(employee);
            
            var path = new List<string>();
            
            foreach (var level in careerPath.Reverse())
            {
                var levelDescription = level switch
                {
                    RedbObject<Company> company => $"üè¢ {company.properties.Name}",
                    RedbObject<Employee> emp => $"üë§ {emp.properties.FirstName} {emp.properties.LastName} - {emp.properties.Position}",
                    RedbObject<Project> proj => $"üìã –ü—Ä–æ–µ–∫—Ç: {proj.properties.Title}",
                    _ => $"‚ùì {level.Name}"
                };
                
                path.Add(levelDescription);
            }
            
            return path;
        }

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏ (–∑–∞–≥–ª—É—à–∫–∏)
        private async Task<RedbObject<Company>> LoadCompanyAsync(long companyId) 
        {
            // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏
            throw new NotImplementedException("–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ IObjectStorageProvider");
        }

        private async Task<RedbObject<Employee>> LoadEmployeeAsync(long employeeId)
        {
            // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞  
            throw new NotImplementedException("–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ IObjectStorageProvider");
        }
    }

    // 3. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    public class OrganizationStructure
    {
        public string CompanyName { get; set; } = string.Empty;
        public string CompanyInn { get; set; } = string.Empty;
        public List<EmployeeInfo> Employees { get; set; } = new();
        public List<ProjectInfo> Projects { get; set; } = new();
        public List<string> Subsidiaries { get; set; } = new();
    }

    public class EmployeeInfo
    {
        public long Id { get; set; }
        public string FullName { get; set; } = string.Empty;
        public string Position { get; set; } = string.Empty;
        public decimal Salary { get; set; }
        public DateTime HireDate { get; set; }
    }

    public class ProjectInfo
    {
        public long Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public DateTime StartDate { get; set; }
        public DateTime? EndDate { get; set; }
    }

    // 4. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    
    public static class ServiceConfiguration
    {
        public static async Task ConfigureRedbServicesAsync(IServiceCollection services)
        {
            // ... —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è redb ...
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AutomaticTypeRegistry –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            var serviceProvider = services.BuildServiceProvider();
            var treeProvider = serviceProvider.GetRequiredService<PostgresTreeProvider>();
            
            // üöÄ –ö–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ —Ç–∏–ø–æ–≤
            await treeProvider.InitializeTypeRegistryAsync();
            
            Console.WriteLine("‚úÖ AutomaticTypeRegistry –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
            Console.WriteLine($"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ç–∏–ø—ã: Company, Employee (alias: emp), Project");
        }
    }

    // 5. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    
    public class Program
    {
        public static async Task Main(string[] args)
        {
            // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            var services = new ServiceCollection();
            await ServiceConfiguration.ConfigureRedbServicesAsync(services);
            services.AddScoped<OrganizationService>();
            
            var serviceProvider = services.BuildServiceProvider();
            var orgService = serviceProvider.GetRequiredService<OrganizationService>();
            
            // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            try
            {
                var structure = await orgService.GetOrganizationStructureAsync(companyId: 1);
                
                Console.WriteLine($"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {structure.CompanyName} (–ò–ù–ù: {structure.CompanyInn})");
                Console.WriteLine($"üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {structure.Employees.Count}");
                Console.WriteLine($"üìã –ü—Ä–æ–µ–∫—Ç–æ–≤: {structure.Projects.Count}");
                
                foreach (var employee in structure.Employees)
                {
                    Console.WriteLine($"  üë§ {employee.FullName} - {employee.Position} ({employee.Salary:C})");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
            }
        }
    }
}
