using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.Models.Entities;
using redb.ConsoleTest.Models;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// üå≥ –≠—Ç–∞–ø 34: –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö LINQ-–∑–∞–ø—Ä–æ—Å–æ–≤
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
    /// </summary>
    public class Stage34_SimpleTreeLinq : BaseTestStage
    {
        public override string Name => "–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö LINQ";
        public override string Description => "–ë–∞–∑–æ–≤—ã–µ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: —Å–æ–∑–¥–∞–Ω–∏–µ TreeQuery –∏ –ø—Ä–æ—Å—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã";
        public override int Order => 34;

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üå≥ === –£–ü–†–û–©–ï–ù–ù–´–ô –¢–ï–°–¢ –î–†–ï–í–û–í–ò–î–ù–´–• LINQ ===");
            logger.LogInformation("–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ TreeQuery API");

            // ===== –¢–ï–°–¢ 1: –°–û–ó–î–ê–ù–ò–ï –î–†–ï–í–û–í–ò–î–ù–û–ì–û –ó–ê–ü–†–û–°–ê =====
            logger.LogInformation("üìã –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ TreeQuery (–±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)");
            
            try
            {
                // –°–æ–∑–¥–∞–µ–º –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
                var treeQuery = redb.TreeQuery<CategoryTestProps>();
                logger.LogInformation("‚úÖ TreeQuery<CategoryTestProps>() —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");

                // –°–æ–∑–¥–∞–µ–º –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
                var asyncTreeQuery = await redb.TreeQueryAsync<CategoryTestProps>();
                logger.LogInformation("‚úÖ TreeQueryAsync<CategoryTestProps>() —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ");
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TreeQuery");
                throw;
            }

            // ===== –¢–ï–°–¢ 2: –°–û–ó–î–ê–ù–ò–ï –ü–†–û–°–¢–´–• –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• =====
            logger.LogInformation("üìã –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
            
            try
            {
                // –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                await redb.SyncSchemeAsync<CategoryTestProps>();
                logger.LogInformation("‚úÖ –°—Ö–µ–º–∞ CategoryTestProps —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");

                // –°–æ–∑–¥–∞–µ–º 2 –ø—Ä–æ—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                var rootCategory = new RedbObject<CategoryTestProps>
                {
                    name = "TestRoot",
                    parent_id = null,
                    properties = new CategoryTestProps
                    {
                        Name = "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
                        IsActive = true
                    }
                };

                var rootId = await redb.SaveAsync(rootCategory);
                logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: TestRoot (ID: {rootId})");

                var childCategory = new RedbObject<CategoryTestProps>
                {
                    name = "TestChild", 
                    parent_id = rootId,
                    properties = new CategoryTestProps
                    {
                        Name = "–î–æ—á–µ—Ä–Ω—è—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
                        IsActive = true
                    }
                };

                var childId = await redb.SaveAsync(childCategory);
                logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–æ—á–µ—Ä–Ω—è—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: TestChild (ID: {childId})");

                // ===== –¢–ï–°–¢ 3: –ü–†–û–°–¢–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï COUNT =====
                logger.LogInformation("üìã –¢–µ—Å—Ç 3: CountAsync() –¥–ª—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞");
                
                var query = await redb.TreeQueryAsync<CategoryTestProps>();
                var totalCount = await query.CountAsync();
                logger.LogInformation($"‚úÖ –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ TreeQuery: {totalCount}");

                // ===== –¢–ï–°–¢ 4: –ü–†–û–°–¢–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TOLIST =====
                logger.LogInformation("üìã –¢–µ—Å—Ç 4: ToListAsync() –¥–ª—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞");
                
                var allCategories = await query.ToListAsync();
                logger.LogInformation($"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {allCategories.Count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ TreeQuery:");
                
                foreach (var cat in allCategories)
                {
                    logger.LogInformation($"  - {cat.name}: {cat.properties.Name} (parent: {cat.parent_id})");
                }

                // ===== –û–ß–ò–°–¢–ö–ê =====
                logger.LogInformation("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
                await redb.DeleteAsync(childCategory);
                await redb.DeleteAsync(rootCategory);
                logger.LogInformation("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã");

            }
            catch (Exception ex)
            {
                logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö LINQ");
                throw;
            }

            logger.LogInformation("‚úÖ === –£–ü–†–û–©–ï–ù–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û ===");
        }
    }
}
