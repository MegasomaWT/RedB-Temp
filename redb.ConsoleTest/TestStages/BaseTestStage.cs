using Microsoft.Extensions.Logging;
using redb.Core;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —ç—Ç–∞–ø–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    /// </summary>
    public abstract class BaseTestStage : ITestStage
    {
        // –°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
        private static readonly Dictionary<string, object> _stageData = new();
        private static readonly List<BaseTestStage> _executedStages = new();
        public abstract string Name { get; }
        public abstract string Description { get; }
        public abstract int Order { get; }

        public async Task ExecuteAsync(ILogger logger, IRedbService redb)
        {
            try
            {
                logger.LogInformation("");
                logger.LogInformation("üîó === –≠–¢–ê–ü {Order}: {Name} ===", Order, Name.ToUpper());
                
                if (!string.IsNullOrEmpty(Description))
                {
                    logger.LogInformation(Description);
                }

                await ExecuteStageAsync(logger, redb);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∞–ø –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
                _executedStages.Add(this);
                
                logger.LogInformation("‚úÖ === –≠–¢–ê–ü {Order} –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û ===", Order);
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –≤ —ç—Ç–∞–ø–µ {Order}: {Name}", Order, Name);
                throw;
            }
        }

        /// <summary>
        /// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–ø–∞
        /// </summary>
        protected abstract Task ExecuteStageAsync(ILogger logger, IRedbService redb);

        /// <summary>
        /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–∞—Ö
        /// </summary>
        protected void SetStageData<T>(string key, T value)
        {
            _stageData[key] = value!;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç—Ç–∞–ø–æ–≤
        /// </summary>
        protected T? GetStageData<T>(string key)
        {
            return _stageData.TryGetValue(key, out var value) ? (T)value : default;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç—Ç–∞–ø –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        /// </summary>
        protected T? GetPreviousStage<T>() where T : BaseTestStage
        {
            return _executedStages.OfType<T>().LastOrDefault();
        }
    }
}
