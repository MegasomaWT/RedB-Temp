using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.Models.Entities;
using redb.ConsoleTest.Models;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –≠–¢–ê–ü 35: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ [JsonIgnore]
    /// </summary>
    public class Stage35_JsonIgnoreTest : BaseTestStage
    {
        public override int Order => 35;
        public override string Name => "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ [JsonIgnore]";
        public override string Description => "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º [JsonIgnore] –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ö–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤";

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üö´ === –≠–¢–ê–ü 35: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï [JsonIgnore] ===");
            
            logger.LogInformation("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å JsonIgnoreTestProps:");
            logger.LogInformation("   ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º—ã–µ –ø–æ–ª—è: Name, Stock, Price, CreatedDate, Description, IsActive");
            logger.LogInformation("   ‚ùå –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è: TempValue, CacheTime, IsInMemoryOnly, ComputedField");
            
            // üîß –°–û–ó–î–ê–ù–ò–ï –°–•–ï–ú–´ —Å —É—á–µ—Ç–æ–º [JsonIgnore]
            logger.LogInformation("üîß –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º [JsonIgnore] –ø–æ–ª–µ–π...");
            var scheme = await redb.SyncSchemeAsync<JsonIgnoreTestProps>();
            logger.LogInformation("‚úÖ –°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞: {schemeName} (ID: {schemeId})", scheme.Name, scheme.Id);
            
            // üìä –ê–ù–ê–õ–ò–ó –°–û–ó–î–ê–ù–ù–´–• –°–¢–†–£–ö–¢–£–†
            logger.LogInformation("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ö–µ–º—ã...");
            var structures = await redb.GetStructuresAsync(scheme);
            logger.LogInformation("üìã –í—Å–µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä —Å–æ–∑–¥–∞–Ω–æ: {count}", structures.Count);
            
            foreach (var structure in structures)
            {
                logger.LogInformation("   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {name} - Type ID: {typeId}", structure.Name, structure.IdType);
            }
            
            // üö´ –ü–†–û–í–ï–†–ö–ê —á—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è –ù–ï —Å–æ–∑–¥–∞–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            var ignoredFields = new[] { "TempValue", "CacheTime", "IsInMemoryOnly", "ComputedField" };
            var foundIgnoredFields = structures.Where(s => ignoredFields.Contains(s.Name)).ToList();
            
            if (foundIgnoredFields.Any())
            {
                logger.LogError("‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª–µ–π:");
                foreach (var field in foundIgnoredFields)
                {
                    logger.LogError("   ‚ùå {fieldName} - –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ!", field.Name);
                }
            }
            else
            {
                logger.LogInformation("‚úÖ –£–°–ü–ï–•: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —Å—Ö–µ–º—ã");
            }
            
            // üíæ –°–û–ó–î–ê–ù–ò–ï –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –û–ë–™–ï–ö–¢–ê
            logger.LogInformation("üíæ –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–º–∏ –ø–æ–ª—è–º–∏...");
            var testObj = new RedbObject<JsonIgnoreTestProps>
            {
                name = "–¢–µ—Å—Ç JsonIgnore",
                note = "–û–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π",
                properties = new JsonIgnoreTestProps
                {
                    // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º—ã–µ –ø–æ–ª—è
                    Name = "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç",
                    Stock = 100,
                    Price = 999.99,
                    CreatedDate = DateTime.Now,
                    Description = "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞",
                    IsActive = true,
                    
                    // ‚ùå –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è (–ù–ï –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞—Å—Ç—å –≤ –ë–î)
                    TempValue = "–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                    CacheTime = DateTime.Now.AddHours(1),
                    IsInMemoryOnly = true
                }
            };
            
            logger.LogInformation("üìã –ó–Ω–∞—á–µ–Ω–∏—è –ü–ï–†–ï–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º:");
            logger.LogInformation("   ‚úÖ Name: '{name}'", testObj.properties.Name);
            logger.LogInformation("   ‚úÖ Stock: {stock}", testObj.properties.Stock);
            logger.LogInformation("   ‚úÖ Price: ${price}", testObj.properties.Price);
            logger.LogInformation("   ‚úÖ Description: '{desc}'", testObj.properties.Description);
            logger.LogInformation("   ‚ùå TempValue: '{temp}' (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ)", testObj.properties.TempValue);
            logger.LogInformation("   ‚ùå IsInMemoryOnly: {inMemory} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ)", testObj.properties.IsInMemoryOnly);
            logger.LogInformation("   ‚ùå ComputedField: '{computed}' (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ)", testObj.properties.ComputedField);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç
            var savedId = await redb.SaveAsync(testObj);
            logger.LogInformation("‚úÖ –û–±—ä–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {id}", savedId);
            
            // üìñ –ó–ê–ì–†–£–ñ–ê–ï–ú –ò –ü–†–û–í–ï–†–Ø–ï–ú
            logger.LogInformation("üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î...");
            var loaded = await redb.LoadAsync<JsonIgnoreTestProps>(savedId);
            
            logger.LogInformation("üìã –ó–Ω–∞—á–µ–Ω–∏—è –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î:");
            logger.LogInformation("   ‚úÖ Name: '{name}' - {status}", 
                loaded.properties.Name, 
                loaded.properties.Name == testObj.properties.Name ? "‚úÖ –°–û–í–ü–ê–î–ê–ï–¢" : "‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢");
            logger.LogInformation("   ‚úÖ Stock: {stock} - {status}", 
                loaded.properties.Stock,
                loaded.properties.Stock == testObj.properties.Stock ? "‚úÖ –°–û–í–ü–ê–î–ê–ï–¢" : "‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢");
            logger.LogInformation("   ‚úÖ Price: ${price} - {status}", 
                loaded.properties.Price,
                Math.Abs(loaded.properties.Price - testObj.properties.Price) < 0.01 ? "‚úÖ –°–û–í–ü–ê–î–ê–ï–¢" : "‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢");
            logger.LogInformation("   ‚úÖ Description: '{desc}' - {status}", 
                loaded.properties.Description,
                loaded.properties.Description == testObj.properties.Description ? "‚úÖ –°–û–í–ü–ê–î–ê–ï–¢" : "‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢");
                
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è –ø–æ–ª—É—á–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            logger.LogInformation("   ‚ùå TempValue: '{temp}' (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", loaded.properties.TempValue);
            logger.LogInformation("   ‚ùå IsInMemoryOnly: {inMemory} (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", loaded.properties.IsInMemoryOnly);
            
            // üéØ –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê
            bool jsonIgnoreWorking = 
                loaded.properties.TempValue == "–í—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ" &&  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º–æ–µ –ø–æ–ª–µ = –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
                loaded.properties.Name == testObj.properties.Name &&  // –û–±—ã—á–Ω–æ–µ –ø–æ–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
                loaded.properties.Stock == testObj.properties.Stock &&  // –û–±—ã—á–Ω–æ–µ –ø–æ–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
                structures.Count == 6;  // –°–æ–∑–¥–∞–Ω–æ —Ç–æ–ª—å–∫–æ 6 —Å—Ç—Ä—É–∫—Ç—É—Ä (–±–µ–∑ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö)
                
            if (jsonIgnoreWorking)
            {
                logger.LogInformation("‚úÖ –£–°–ü–ï–•: [JsonIgnore] —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
                logger.LogInformation("   ‚úÖ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –ë–î");
                logger.LogInformation("   ‚úÖ –û–±—ã—á–Ω—ã–µ –ø–æ–ª—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                logger.LogInformation("   ‚úÖ –°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π");
            }
            else
            {
                logger.LogError("‚ùå –ü–†–û–ë–õ–ï–ú–ê: [JsonIgnore] —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
            }
            
            // üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.LogInformation("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç...");
            await redb.DeleteAsync(loaded);
            logger.LogInformation("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω");
        }
    }
}
