using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.DBModels;
using redb.Core.Models.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages;

public class Stage18_SortingAndPagination : ITestStage
{
    public int StageNumber => 18;
    public int Order => 18;
    public string Name => "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏";
    public string Description => "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OrderBy(), ThenBy(), Take(), Skip() –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤";

    public async Task ExecuteAsync(ILogger logger, IRedbService redb)
    {
        try
        {
            logger.LogInformation("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...");
            
            // –°–æ–∑–¥–∞–µ–º –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ö–µ–º—É
            var schemeId = await redb.SyncSchemeAsync<ProductTestProps>();
            logger.LogInformation($"‚úÖ –°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {nameof(ProductTestProps)}, ID: {schemeId}");

            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            var testProducts = new[]
            {
                new { Name = "Laptop A", Category = "Electronics", Price = 1500.0, Stock = 10, IsActive = true },
                new { Name = "Laptop B", Category = "Electronics", Price = 800.0, Stock = 25, IsActive = true },
                new { Name = "Mouse", Category = "Electronics", Price = 50.0, Stock = 100, IsActive = true },
                new { Name = "Book A", Category = "Books", Price = 30.0, Stock = 50, IsActive = true },
                new { Name = "Book B", Category = "Books", Price = 25.0, Stock = 75, IsActive = false },
                new { Name = "Tablet", Category = "Electronics", Price = 400.0, Stock = 15, IsActive = true },
                new { Name = "Keyboard", Category = "Electronics", Price = 120.0, Stock = 30, IsActive = true },
                new { Name = "Book C", Category = "Books", Price = 45.0, Stock = 20, IsActive = true },
                new { Name = "Monitor", Category = "Electronics", Price = 300.0, Stock = 8, IsActive = false },
                new { Name = "Headphones", Category = "Electronics", Price = 200.0, Stock = 40, IsActive = true }
            };

            logger.LogInformation("üìã –°–æ–∑–¥–∞–≤–∞–µ–º—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:");
            foreach (var product in testProducts)
            {
                logger.LogInformation($"  - {product.Name}: Category={product.Category}, Price=${product.Price}, Stock={product.Stock}, IsActive={product.IsActive}");
            }
            logger.LogInformation($"üìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–µ–º: {testProducts.Length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏");

            var createdIds = new List<long>();

            foreach (var product in testProducts)
            {
                var obj = new RedbObject<ProductTestProps>
                {
                    scheme_id = schemeId.Id,
                    name = product.Name,
                    owner_id = 0,
                    who_change_id = 0,
                    date_create = DateTime.Now,
                    date_modify = DateTime.Now,
                    properties = new ProductTestProps 
                    { 
                        Category = product.Category, 
                        Price = product.Price, 
                        Stock = product.Stock, 
                        IsActive = product.IsActive,
                        TestDate = DateTime.Now,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TestDate
                        TestValue = 2
                    }
                };

                var savedId = await redb.SaveAsync(obj);
                createdIds.Add(savedId);
                logger.LogInformation($"  üì¶ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {product.Name} (ID: {savedId})");
            }

            logger.LogInformation("");
            logger.LogInformation("üîç === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–†–¢–ò–†–û–í–ö–ò ===");

            // –¢–µ—Å—Ç 1: OrderBy - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
            logger.LogInformation("üìã –¢–µ—Å—Ç 1: OrderBy() - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é");
            var sortedByPrice = await (await redb.QueryAsync<ProductTestProps>())
                .OrderBy(p => p.Price)
                .ToListAsync();
            
            logger.LogInformation($"üìä –ü—Ä–æ–¥—É–∫—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ü–µ–Ω–µ (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ) - {sortedByPrice.Count} —à—Ç:");
            foreach (var product in sortedByPrice.Take(5)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            {
                logger.LogInformation($"  - {product.name}: ${product.properties.Price}");
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
            var prices = sortedByPrice.Select(p => p.properties.Price).ToList();
            var isSorted = prices.SequenceEqual(prices.OrderBy(p => p));
            logger.LogInformation($"‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ä–∞–±–æ—Ç–∞–µ—Ç: {isSorted}");

            // –¢–µ—Å—Ç 2: OrderByDescending - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
            logger.LogInformation("");
            logger.LogInformation("üìã –¢–µ—Å—Ç 2: OrderByDescending() - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é");
            var sortedByPriceDesc = await (await redb.QueryAsync<ProductTestProps>())
                .OrderByDescending(p => p.Price)
                .ToListAsync();
            
            logger.LogInformation($"üìä –ü—Ä–æ–¥—É–∫—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ü–µ–Ω–µ (—É–±—ã–≤–∞–Ω–∏–µ) - {sortedByPriceDesc.Count} —à—Ç:");
            foreach (var product in sortedByPriceDesc.Take(5)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            {
                logger.LogInformation($"  - {product.name}: ${product.properties.Price}");
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–∞–±–æ—Ç–∞–µ—Ç
            var pricesDesc = sortedByPriceDesc.Select(p => p.properties.Price).ToList();
            var isSortedDesc = pricesDesc.SequenceEqual(pricesDesc.OrderByDescending(p => p));
            logger.LogInformation($"‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–∞–±–æ—Ç–∞–µ—Ç: {isSortedDesc}");

            // –¢–µ—Å—Ç 3: OrderBy + ThenBy - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∑–∞—Ç–µ–º –ø–æ —Ü–µ–Ω–µ
            logger.LogInformation("");
            logger.LogInformation("üìã –¢–µ—Å—Ç 3: OrderBy() + ThenBy() - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∑–∞—Ç–µ–º –ø–æ —Ü–µ–Ω–µ");
            var sortedByCategoryThenPrice = await (await redb.QueryAsync<ProductTestProps>())
                .OrderBy(p => p.Category)
                .ThenBy(p => p.Price)
                .ToListAsync();
            
            logger.LogInformation($"üìä –ü—Ä–æ–¥—É–∫—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + —Ü–µ–Ω–µ - {sortedByCategoryThenPrice.Count} —à—Ç:");
            foreach (var product in sortedByCategoryThenPrice)
            {
                logger.LogInformation($"  - {product.name}: {product.properties.Category} - ${product.properties.Price}");
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            var categories = sortedByCategoryThenPrice.GroupBy(p => p.properties.Category);
            logger.LogInformation($"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {categories.Count()}");
            foreach (var category in categories)
            {
                var categoryPrices = category.Select(p => p.properties.Price).ToList();
                var isCategorySorted = categoryPrices.SequenceEqual(categoryPrices.OrderBy(p => p));
                logger.LogInformation($"  - {category.Key}: {category.Count()} —Ç–æ–≤–∞—Ä–æ–≤, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–µ: {isCategorySorted}");
            }

            // ‚úÖ –ù–û–í–´–ô –¢–ï–°–¢: BinaryExpression –≤ ThenBy - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ‚Ññ5 –∏–∑ redb3.txt
            logger.LogInformation("");
            logger.LogInformation("üìã –¢–µ—Å—Ç 3.5: ThenBy() —Å BinaryExpression - —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è r.Field != null");
            var binaryExpressionSort = await (await redb.QueryAsync<ProductTestProps>())
                .OrderBy(p => p.Category)
                .ThenBy(p => p.IsActive != false)  // ‚úÖ BinaryExpression: p.IsActive != false
                .ToListAsync();
            
            logger.LogInformation($"üìä –ü—Ä–æ–¥—É–∫—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ Category + BinaryExpression - {binaryExpressionSort.Count} —à—Ç:");
            foreach (var product in binaryExpressionSort.Take(5))
            {
                logger.LogInformation($"  - {product.name}: {product.properties.Category} - Active:{product.properties.IsActive}");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ BinaryExpression –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
            var binaryCategories = binaryExpressionSort.GroupBy(p => p.properties.Category);
            foreach (var category in binaryCategories)
            {
                var categoryActiveFirst = category.Select(p => p.properties.IsActive).ToList();
                // –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ (true != false = true –∏–¥–µ—Ç –ø–µ—Ä–≤—ã–º)
                logger.LogInformation($"  - {category.Key}: {category.Count()} —Ç–æ–≤–∞—Ä–æ–≤, –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞: {categoryActiveFirst.Take(3).Count(a => a == true) >= categoryActiveFirst.Skip(3).Count(a => a == true)}");
            }
            logger.LogInformation("‚úÖ BinaryExpression –≤ ThenBy() —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫!");

            logger.LogInformation("");
            logger.LogInformation("üîç === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–ì–ò–ù–ê–¶–ò–ò ===");

            // –¢–µ—Å—Ç 4: Take() - –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ N –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            logger.LogInformation("üìã –¢–µ—Å—Ç 4: Take() - –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–¥—É–∫—Ç–∞");
            var firstThree = await (await redb.QueryAsync<ProductTestProps>())
                .OrderBy(p => p.Price)
                .Take(3)
                .ToListAsync();
            
            logger.LogInformation($"üìä –ü–µ—Ä–≤—ã–µ 3 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞:");
            foreach (var product in firstThree)
            {
                logger.LogInformation($"  - {product.name}: ${product.properties.Price}");
            }
            logger.LogInformation($"‚úÖ Take(3) –≤–µ—Ä–Ω—É–ª {firstThree.Count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å: 3)");

            // –¢–µ—Å—Ç 5: Skip() - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–µ N –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            logger.LogInformation("");
            logger.LogInformation("üìã –¢–µ—Å—Ç 5: Skip() - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤");
            var afterSkip = await (await redb.QueryAsync<ProductTestProps>())
                .OrderBy(p => p.Price)
                .Skip(5)
                .ToListAsync();
            
            logger.LogInformation($"üìä –ü—Ä–æ–¥—É–∫—Ç—ã –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–µ—Ä–≤—ã—Ö 5:");
            foreach (var product in afterSkip.Take(3)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
            {
                logger.LogInformation($"  - {product.name}: ${product.properties.Price}");
            }
            logger.LogInformation($"‚úÖ Skip(5) –≤–µ—Ä–Ω—É–ª {afterSkip.Count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å: 5)");

            // –¢–µ—Å—Ç 6: Skip() + Take() - –ø–∞–≥–∏–Ω–∞—Ü–∏—è
            logger.LogInformation("");
            logger.LogInformation("üìã –¢–µ—Å—Ç 6: Skip() + Take() - –ø–∞–≥–∏–Ω–∞—Ü–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 2, –ø–æ 3 —ç–ª–µ–º–µ–Ω—Ç–∞)");
            var page2 = await (await redb.QueryAsync<ProductTestProps>())
                .OrderBy(p => p.Price)
                .Skip(3)
                .Take(3)
                .ToListAsync();
            
            logger.LogInformation($"üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 (—ç–ª–µ–º–µ–Ω—Ç—ã 4-6):");
            foreach (var product in page2)
            {
                logger.LogInformation($"  - {product.name}: ${product.properties.Price}");
            }
            logger.LogInformation($"‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è Skip(3).Take(3) –≤–µ—Ä–Ω—É–ª–∞ {page2.Count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤");

            // –¢–µ—Å—Ç 7: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            logger.LogInformation("");
            logger.LogInformation("üìã –¢–µ—Å—Ç 7: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π - Where() + OrderBy() + ThenBy() + Skip() + Take()");
            var complexQuery = await (await redb.QueryAsync<ProductTestProps>())
                .Where(p => p.IsActive == true)
                .OrderBy(p => p.Category)
                .ThenBy(p => p.Price)
                .Skip(1)
                .Take(4)
                .ToListAsync();
            
            logger.LogInformation($"üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 2:");
            foreach (var product in complexQuery)
            {
                logger.LogInformation($"  - {product.name}: {product.properties.Category} - ${product.properties.Price} (Active: {product.properties.IsActive})");
            }
            logger.LogInformation($"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª {complexQuery.Count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤");

            // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.LogInformation("");
            logger.LogInformation("üéØ === –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• ===");
            
            // ‚úÖ –ö–û–ú–ú–ï–ù–¢–ò–†–£–ï–ú –£–î–ê–õ–ï–ù–ò–ï - –û–°–¢–ê–í–õ–Ø–ï–ú –û–ë–™–ï–ö–¢–´ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê SQL
            /*
            foreach (var id in createdIds)
            {
                var obj = await redb.LoadAsync<ProductTestProps>(id);
                await redb.DeleteAsync(obj);
                logger.LogInformation($"üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç ID: {id}");
            }
            */
            logger.LogInformation("üîç –£–î–ê–õ–ï–ù–ò–ï –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û - –æ–±—ä–µ–∫—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ SQL");

            logger.LogInformation("‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ");
        }
        catch (Exception ex)
        {
            logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —ç—Ç–∞–ø–µ {StageNumber}: {Name}");
            logger.LogError($"‚ùå {ex.Message}");
            throw;
        }
    }
}