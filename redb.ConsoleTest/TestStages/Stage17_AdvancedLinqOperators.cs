using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.DBModels;
using redb.Core.Models.Entities;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –≠—Ç–∞–ø 17: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö LINQ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ (All, Select, Distinct)
    /// </summary>
    public class Stage17_AdvancedLinqOperators : BaseTestStage
    {
        public override string Name => "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö LINQ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤";
        public override string Description => "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ All(), Select(), Distinct() –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤";
        public override int Order => 17;

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö LINQ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤...");

            // –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            var schemeId = await redb.SyncSchemeAsync<ProductTestProps>();
            logger.LogInformation($"‚úÖ –°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞: {nameof(ProductTestProps)}, ID: {schemeId}");

            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            var testProducts = new[]
            {
                new { Name = "Expensive Laptop", Category = "Electronics", Price = 2000.0, Stock = 5, IsActive = true },
                new { Name = "Cheap Laptop", Category = "Electronics", Price = 500.0, Stock = 15, IsActive = true },
                new { Name = "Gaming Mouse", Category = "Electronics", Price = 80.0, Stock = 50, IsActive = true },
                new { Name = "Programming Book", Category = "Books", Price = 45.0, Stock = 100, IsActive = true },
                new { Name = "Old Book", Category = "Books", Price = 10.0, Stock = 2, IsActive = false },
                new { Name = "Tablet", Category = "Electronics", Price = 300.0, Stock = 20, IsActive = true },
                // –î–æ–±–∞–≤–ª—è–µ–º –ù–ê–°–¢–û–Ø–©–ò–ô –¥—É–±–ª–∏–∫–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Distinct() - —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ Cheap Laptop
                new { Name = "Cheap Laptop", Category = "Electronics", Price = 500.0, Stock = 15, IsActive = true }
            };

            logger.LogInformation("üìã –°–æ–∑–¥–∞–≤–∞–µ–º—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:");
            foreach (var product in testProducts)
            {
                logger.LogInformation($"  - {product.Name}: Category={product.Category}, Price=${product.Price}, Stock={product.Stock}, IsActive={product.IsActive}");
            }
            logger.LogInformation($"üìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–µ–º: {testProducts.Length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è 1 –ø–æ–ª–Ω—ã–π –¥—É–±–ª–∏–∫–∞—Ç 'Cheap Laptop' –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Distinct)");

            var createdIds = new List<long>();

            foreach (var product in testProducts)
            {
                var obj = new RedbObject<ProductTestProps>
                {
                    scheme_id = schemeId.Id,
                    owner_id = 0,
                    who_change_id = 0,
                    name = product.Name,
                    note = "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö LINQ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤",
                    properties = new ProductTestProps
                    {
                        Category = product.Category,
                        Price = product.Price,
                        Stock = product.Stock,
                        IsActive = product.IsActive,
                        TestDate = DateTime.Now,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TestDate
                        TestValue = 2
                    }
                };

                await redb.SaveAsync(obj);
                createdIds.Add(obj.id);
                logger.LogInformation($"  üì¶ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {product.Name} (ID: {obj.id})");
            }

            logger.LogInformation("");
            logger.LogInformation("üîç === –ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ù–´–• –î–ê–ù–ù–´–• ===");
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞
            var allSavedProducts = await (await redb.QueryAsync<ProductTestProps>()).ToListAsync();
            logger.LogInformation($"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –ë–î: {allSavedProducts.Count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤");
            
            foreach (var product in allSavedProducts)
            {
                logger.LogInformation($"  - {product.name}: Category={product.properties.Category}, Price=${product.properties.Price}, Stock={product.properties.Stock}, IsActive={product.properties.IsActive}");
                logger.LogInformation($"    üîë Hash: {product.hash}, ID: {product.id}");
            }

            logger.LogInformation("");
            logger.LogInformation("üîç === –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–´ WHERE() ===");
            
            // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Where() - –¥–æ–ª–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            var activeProducts = await (await redb.QueryAsync<ProductTestProps>())
                .Where(p => p.IsActive == true)
                .ToListAsync();
            logger.LogInformation($"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (Where IsActive=true): {activeProducts.Count}");
            foreach (var product in activeProducts)
            {
                logger.LogInformation($"  - {product.name}: IsActive={product.properties.IsActive}");
            }
            
            // –¢–µ—Å—Ç Where() –ø–æ —Ü–µ–Ω–µ - –¥–æ–ª–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–æ–ª—å–∫–æ –¥–æ—Ä–æ–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã  
            var expensiveProducts = await (await redb.QueryAsync<ProductTestProps>())
                .Where(p => p.Price > 1000)
                .ToListAsync();
            logger.LogInformation($"üìä –î–æ—Ä–æ–≥–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (Where Price > 1000): {expensiveProducts.Count}");
            foreach (var product in expensiveProducts)
            {
                logger.LogInformation($"  - {product.name}: Price=${product.properties.Price}");
            }

            logger.LogInformation("");
            logger.LogInformation("üîç === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• LINQ –û–ü–ï–†–ê–¢–û–†–û–í ===");

            // –¢–µ—Å—Ç 1: AllAsync() - –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ –∑–∞–ø–∏—Å–∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç —É—Å–ª–æ–≤–∏—é
            logger.LogInformation("üìã –¢–µ—Å—Ç 1: AllAsync() - –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ –∑–∞–ø–∏—Å–∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç —É—Å–ª–æ–≤–∏—é");
            
            try
            {
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–∫–æ–ª—å–∫–æ —É –Ω–∞—Å –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                var totalCount = await (await redb.QueryAsync<ProductTestProps>()).CountAsync();
                var activeCount = await (await redb.QueryAsync<ProductTestProps>())
                    .Where(p => p.IsActive == true).CountAsync();
                logger.LogInformation($"üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {totalCount}, –∞–∫—Ç–∏–≤–Ω—ã—Ö: {activeCount}");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–º–µ—é—Ç —Ü–µ–Ω—É > 0
                logger.LogInformation("üîç –¢–ï–°–¢: –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–º–µ—é—Ç —Ü–µ–Ω—É > 0");
                var activeQuery = (await redb.QueryAsync<ProductTestProps>())
                    .Where(p => p.IsActive == true);
                var allActiveHavePrice = await activeQuery.AllAsync(p => p.Price > 0);
                logger.LogInformation($"‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–º–µ—é—Ç —Ü–µ–Ω—É > 0: {allActiveHavePrice}");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ—Ä–æ–≥–∏–µ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å false)
                var allExpensive = await (await redb.QueryAsync<ProductTestProps>())
                    .AllAsync(p => p.Price > 1000);
                logger.LogInformation($"‚úÖ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ—Ä–æ–≥–∏–µ (>$1000): {allExpensive}");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true - –≤—Å–µ Electronics –∞–∫—Ç–∏–≤–Ω—ã)
                var electronicsCount = await (await redb.QueryAsync<ProductTestProps>())
                    .Where(p => p.Category == "Electronics").CountAsync();
                var allElectronicsActive = await (await redb.QueryAsync<ProductTestProps>())
                    .Where(p => p.Category == "Electronics")
                    .AllAsync(p => p.IsActive == true);
                logger.LogInformation($"‚úÖ –í—Å—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ({electronicsCount} —Ç–æ–≤–∞—Ä–æ–≤): {allElectronicsActive}");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–Ω–∏–≥–∏ –∏–º–µ—é—Ç –Ω–∏–∑–∫—É—é —Ü–µ–Ω—É (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true)
                var booksCount = await (await redb.QueryAsync<ProductTestProps>())
                    .Where(p => p.Category == "Books").CountAsync();
                var allBooksCheap = await (await redb.QueryAsync<ProductTestProps>())
                    .Where(p => p.Category == "Books")
                    .AllAsync(p => p.Price < 100);
                logger.LogInformation($"‚úÖ –í—Å–µ –∫–Ω–∏–≥–∏ –¥–µ—à–µ–≤—ã–µ (<$100) ({booksCount} –∫–Ω–∏–≥): {allBooksCheap}");

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–º–µ—é—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω—É (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true)
                logger.LogInformation("üîç –¢–ï–°–¢: –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–º–µ—é—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω—É (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å TRUE)");
                var allQuery = await redb.QueryAsync<ProductTestProps>();
                var allHavePositivePrice = await allQuery.AllAsync(p => p.Price > 0);
                logger.LogInformation($"‚úÖ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–º–µ—é—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω—É: {allHavePositivePrice}");
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ AllAsync(): {ex.Message}");
            }

            // –¢–µ—Å—Ç 2: Select() - –ø—Ä–æ–µ–∫—Ü–∏—è –ø–æ–ª–µ–π
            logger.LogInformation("");
            logger.LogInformation("üìã –¢–µ—Å—Ç 2: Select() - –ø—Ä–æ–µ–∫—Ü–∏—è –ø–æ–ª–µ–π");
            
            try
            {
                // –¢–µ—Å—Ç 1: –í—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                var productNames = await (await redb.QueryAsync<ProductTestProps>())
                    .Select(p => p.name)
                    .ToListAsync();
                logger.LogInformation($"üìä –ò–º–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ({productNames.Count}): {string.Join(", ", productNames)}");
                
                // –¢–µ—Å—Ç 2: –í—ã–±–æ—Ä –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                var productSummary = await (await redb.QueryAsync<ProductTestProps>())
                    .Where(p => p.IsActive == true)
                    .Select(p => new { Name = p.name, Price = p.properties.Price })
                    .ToListAsync();
                logger.LogInformation($"üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã - –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ({productSummary.Count}):");
                foreach (var item in productSummary)
                {
                    logger.LogInformation($"  - {item.Name}: ${item.Price}");
                }
                
                // –¢–µ—Å—Ç 3: –í—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ —Ü–µ–Ω
                var prices = await (await redb.QueryAsync<ProductTestProps>())
                    .Select(p => p.properties.Price)
                    .ToListAsync();
                logger.LogInformation($"üìä –í—Å–µ —Ü–µ–Ω—ã: {string.Join(", ", prices.Select(p => $"${p}"))}");
                
                logger.LogInformation("‚úÖ Select() –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Select(): {ex.Message}");
            }

            // –¢–µ—Å—Ç 3: Distinct() - —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            logger.LogInformation("");
            logger.LogInformation("üìã –¢–µ—Å—Ç 3: Distinct() - —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è");
            
            try
            {
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º Distinct() - –¥–æ–ª–∂–Ω–æ —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
                var allProducts = await (await redb.QueryAsync<ProductTestProps>())
                    .ToListAsync();
                logger.LogInformation($"üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –±–µ–∑ Distinct(): {allProducts.Count}");
                
                var distinctProducts = await (await redb.QueryAsync<ProductTestProps>())
                    .Distinct()
                    .ToListAsync();
                logger.LogInformation($"üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å Distinct(): {distinctProducts.Count}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Distinct() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                if (distinctProducts.Count < allProducts.Count)
                {
                    logger.LogInformation($"‚úÖ Distinct() —É–±—Ä–∞–ª –¥—É–±–ª–∏–∫–∞—Ç—ã: {allProducts.Count} ‚Üí {distinctProducts.Count} (—É–±—Ä–∞–Ω–æ {allProducts.Count - distinctProducts.Count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)");
                }
                else if (distinctProducts.Count == allProducts.Count)
                {
                    logger.LogInformation("‚ÑπÔ∏è Distinct() –Ω–µ –∏–∑–º–µ–Ω–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –±—ã–ª–æ");
                }
                else
                {
                    logger.LogWarning("‚ö†Ô∏è Distinct() –≤–µ—Ä–Ω—É–ª –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π —á–µ–º –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å - –≤–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞");
                }
                
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º Distinct() —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
                var distinctActiveProducts = await (await redb.QueryAsync<ProductTestProps>())
                    .Where(p => p.IsActive == true)
                    .Distinct()
                    .ToListAsync();
                logger.LogInformation($"üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {distinctActiveProducts.Count}");
                
                logger.LogInformation("‚úÖ Distinct() –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ Distinct(): {ex.Message}");
            }

            // ‚úÖ –ö–†–ò–¢–ò–ß–ù–´–ô –¢–ï–°–¢: OrderBy –õ–û–ú–ê–ï–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–Æ - –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ‚Ññ4 –∏–∑ redb3.txt
            logger.LogInformation("");
            logger.LogInformation("üìã –¢–µ—Å—Ç 4: üö® –ö–†–ò–¢–ò–ß–ù–´–ô - OrderBy –ª–æ–º–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é (—Ç–æ—á–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –∏–∑ redb3.txt)");
            
            try
            {
                // –®–ê–ì 0: –ü—Ä–æ–≤–µ—Ä—è–µ–º –°–ö–û–õ–¨–ö–û –í–°–ï–ì–û –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å—Ö–µ–º–µ (–¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞)
                var allQuery = await redb.QueryAsync<ProductTestProps>();
                var allObjects = await allQuery.ToListAsync();
                logger.LogInformation($"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –≤—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å—Ö–µ–º–µ {allObjects.Count}");
                
                var categoryStats = allObjects.GroupBy(o => o.properties.Category).ToList();
                foreach (var category in categoryStats.Take(5))
                {
                    logger.LogInformation($"   üìÇ Category '{category.Key}': {category.Count()} –æ–±—ä–µ–∫—Ç–æ–≤");
                }
                
                // –®–ê–ì 1: –°–æ–∑–¥–∞–µ–º –†–ê–ë–û–¢–ê–Æ–©–ò–ô —Ñ–∏–ª—å—Ç—Ä (–∏—Å–ø–æ–ª—å–∑—É–µ–º >= –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç!)
                var limitedQuery = (await redb.QueryAsync<ProductTestProps>())
                    .Where(p => p.Price >= 1999);  // ‚úÖ –†–ê–ë–û–¢–ê–Æ–©–ò–ô –§–ò–õ–¨–¢–†: Price >= 1999 (–¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç—ã)
                
                logger.LogInformation("üîç –°–æ–∑–¥–∞–Ω –†–ê–ë–û–¢–ê–Æ–©–ò–ô –∑–∞–ø—Ä–æ—Å Price >= 1999 (–¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –¥–æ—Ä–æ–≥–∏–µ –æ–±—ä–µ–∫—Ç—ã)");
                
                // –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –†–ê–ë–û–¢–ê–Æ–©–ò–ô —Ñ–∏–ª—å—Ç—Ä –Ω–∞—Ö–æ–¥–∏—Ç –¥–æ—Ä–æ–≥–∏–µ –æ–±—ä–µ–∫—Ç—ã (Price >= 1999)
                var test1 = await limitedQuery.ToListAsync();
                logger.LogInformation($"üìä –¢–ï–°–¢ 1 (–¥–æ OrderBy): –Ω–∞–π–¥–µ–Ω–æ {test1.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                if (test1.Count > 0)
                {
                    logger.LogInformation($"   üîç –ü–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π: {test1[0].name} - Price=${test1[0].properties.Price}");
                    logger.LogInformation($"   üîç –í—Å–µ–≥–æ –¥–æ—Ä–æ–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (Price >= 1999): {test1.Count}");
                }
                
                // –®–ê–ì 3: üö® –ö–†–ò–¢–ò–ß–ù–´–ô –ú–û–ú–ï–ù–¢ - –¥–æ–±–∞–≤–ª—è–µ–º OrderBy (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –∏–∑ redb3.txt)
                logger.LogInformation("");
                logger.LogInformation("üö® –ü–†–ò–ú–ï–ù–Ø–ï–ú OrderBy - –ü–†–û–í–ï–†–Ø–ï–ú –ù–ï –°–¢–ê–ù–ï–¢ –õ–ò –û–ë–™–ï–ö–¢–û–í –ë–û–õ–¨–®–ï...");
                logger.LogInformation("   üìù –ü–æ –ø—Ä–∏–º–µ—Ä—É: recordsQuery = recordsQuery.OrderBy(r => r.Price);");
                var recordsQuery = limitedQuery.OrderBy(r => r.Price);  // ‚Üê –¢–û–ß–ù–û –ü–û –ü–†–ò–ú–ï–†–£ –ò–ó redb3.txt!
                
                // –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞–ª–æ –ø–æ—Å–ª–µ OrderBy
                var test2 = await recordsQuery.ToListAsync();
                logger.LogInformation($"üìä –¢–ï–°–¢ 2 (–ø–æ—Å–ª–µ OrderBy): –Ω–∞–π–¥–µ–Ω–æ {test2.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                
                // –®–ê–ì 5: üî• –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó
                if (test2.Count == test1.Count && test1.Count >= 1)
                {
                    logger.LogInformation($"‚úÖ –ü–†–û–ë–õ–ï–ú–ê ‚Ññ4 –ò–°–ü–†–ê–í–õ–ï–ù–ê: OrderBy —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é ({test2.Count} –æ–±—ä–µ–∫—Ç–æ–≤)!");
                    foreach (var obj in test2)
                    {
                        logger.LogInformation($"   ‚úÖ –ü–æ—Å–ª–µ OrderBy: {obj.name} - Category={obj.properties.Category}, Price=${obj.properties.Price}");
                    }
                }
                else if (test2.Count > test1.Count)
                {
                    logger.LogError($"‚ùå –ü–†–û–ë–õ–ï–ú–ê ‚Ññ4 –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ê: OrderBy –°–õ–û–ú–ê–õ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é!");
                    logger.LogError($"   üìä –î–æ OrderBy: {test1.Count} –æ–±—ä–µ–∫—Ç–æ–≤ (—Ñ–∏–ª—å—Ç—Ä Price>=1999 —Ä–∞–±–æ—Ç–∞–ª)");
                    logger.LogError($"   üìä –ü–æ—Å–ª–µ OrderBy: {test2.Count} –æ–±—ä–µ–∫—Ç–æ–≤ (–ü–û–Ø–í–ò–õ–ò–°–¨ –õ–ò–®–ù–ò–ï!)");
                    logger.LogError($"   üö® –¢–û–ß–ù–û –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ: '–±—ã–ª–æ {test1.Count} —Å—Ç–∞–ª–æ {test2.Count} –∏–∑-–∑–∞ OrderBy'");
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã (–∫–æ—Ç–æ—Ä—ã–µ –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–∏–ª—å—Ç—Ä—É Price >= 1999)
                    var invalidObjects = test2.Where(o => o.properties.Price < 1999).ToList();
                    logger.LogError($"   üîç –õ–∏—à–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (Price < 1999): {invalidObjects.Count}");
                    foreach (var obj in invalidObjects.Take(5))
                    {
                        logger.LogError($"     - {obj.name}: Price=${obj.properties.Price} (–ù–ï >= 1999!)");
                    }
                    
                    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º –ø–æ—Å–ª–µ OrderBy
                    var validObjects = test2.Where(o => o.properties.Price >= 1999).Count();
                    logger.LogError($"   üìä –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (Price >= 1999): {validObjects} –∏–∑ {test2.Count}");
                }
                else if (test1.Count == 0 && test2.Count == 0)
                {
                    logger.LogWarning("‚ö†Ô∏è –§–∏–ª—å—Ç—Ä Price>=1999 –Ω–µ –Ω–∞—à–µ–ª –¥–æ—Ä–æ–≥–∏–µ –æ–±—ä–µ–∫—Ç—ã - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π");
                }
                else
                {
                    logger.LogWarning($"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –±—ã–ª–æ {test1.Count}, —Å—Ç–∞–ª–æ {test2.Count}");
                }
                
                logger.LogInformation("‚úÖ –ö—Ä–∏—Ç–∏—á–Ω—ã–π —Ç–µ—Å—Ç OrderBy –∑–∞–≤–µ—Ä—à–µ–Ω");
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ –∫—Ä–∏—Ç–∏—á–Ω–æ–º —Ç–µ—Å—Ç–µ OrderBy: {ex.Message}");
            }

            logger.LogInformation("");
                            logger.LogInformation("üéØ === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PRICE –§–ò–õ–¨–¢–†–ê–¶–ò–ò ===");
            
            try 
            {
                logger.LogInformation("üîç –¢–ï–°–¢–ò–†–£–ï–ú –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï PostgresFacetFilterBuilder —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π –∑–Ω–∞—á–µ–Ω–∏–π...");
                
                // üîç –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –§–∏–ª—å—Ç—Ä Price == 2000 —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤
                logger.LogInformation("üß™ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–°–¢: Price == 2000 (—Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π –∑–Ω–∞—á–µ–Ω–∏–π)");
                var fixedEqualityTest = await (await redb.QueryAsync<ProductTestProps>())
                    .Where(p => p.Price == 2000)  // –î–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è!
                    .ToListAsync();
                logger.LogInformation($"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º: {fixedEqualityTest.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                
                // üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° PRICE - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
                var diagnosticProducts = await (await redb.QueryAsync<ProductTestProps>()).ToListAsync();
                var expensiveLaptop = diagnosticProducts.FirstOrDefault(p => p.name == "Expensive Laptop");
                if (expensiveLaptop != null)
                {
                    logger.LogInformation($"üîç Expensive Laptop –Ω–∞–π–¥–µ–Ω:");
                    logger.LogInformation($"   üí∞ Price: {expensiveLaptop.properties.Price} ({expensiveLaptop.properties.Price.GetType().Name})");
                    logger.LogInformation($"   üÜî ID: {expensiveLaptop.Id}");
                    
                    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    var directFilter = await (await redb.QueryAsync<ProductTestProps>())
                        .Where(p => p.Price == expensiveLaptop.properties.Price)  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞
                        .ToListAsync();
                    logger.LogInformation($"üß™ –§–∏–ª—å—Ç—Ä Price == {expensiveLaptop.properties.Price} (—Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ): {directFilter.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                    
                    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–°–¢: integer —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ  
                    var integerFilter = await (await redb.QueryAsync<ProductTestProps>())
                        .Where(p => p.Price == 2000)  // integer 2000 –≤–º–µ—Å—Ç–æ double
                        .ToListAsync();
                    logger.LogInformation($"üß™ –§–∏–ª—å—Ç—Ä Price == 2000 (integer): {integerFilter.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω (–ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å)
                    var rangeFilter = await (await redb.QueryAsync<ProductTestProps>())
                        .Where(p => p.Price >= 1999 && p.Price <= 2001)  // —Ç–æ–∂–µ integer
                        .ToListAsync();
                    logger.LogInformation($"üß™ –§–∏–ª—å—Ç—Ä Price BETWEEN 1999-2001: {rangeFilter.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                }
                else
                {
                    logger.LogError("‚ùå Expensive Laptop –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ diagnosticProducts!");
                    logger.LogInformation($"üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diagnosticProducts.Count}");
                    foreach (var prod in diagnosticProducts.Take(3))
                    {
                        logger.LogInformation($"   - {prod.name}: Price=${prod.properties.Price}");
                    }
                }
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ Price: {ex.Message}");
            }
            
            logger.LogInformation("");
            logger.LogInformation("üéØ === –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• ===");
            
            // ‚úÖ –ö–û–ú–ú–ï–ù–¢–ò–†–£–ï–ú –£–î–ê–õ–ï–ù–ò–ï - –û–°–¢–ê–í–õ–Ø–ï–ú –û–ë–™–ï–ö–¢–´ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê SQL
            /*
            // –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            foreach (var id in createdIds)
            {
                var obj = await redb.LoadAsync<ProductTestProps>(id);
                await redb.DeleteAsync(obj);
                logger.LogInformation($"üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç ID: {id}");
            }
            */
            logger.LogInformation("üîç –£–î–ê–õ–ï–ù–ò–ï –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û - –æ–±—ä–µ–∫—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ SQL");
        }
    }
}
