using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.Models.Entities;
using redb.Core.Models.Contracts;  // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è IRedbObject
using redb.ConsoleTest.Models;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// üå≥ –≠—Ç–∞–ø 33: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö LINQ-–∑–∞–ø—Ä–æ—Å–æ–≤
    /// –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–µ–π
    /// </summary>
    public class Stage33_TreeLinqQueries : BaseTestStage
    {
        public override string Name => "üå≥ –î—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–µ LINQ-–∑–∞–ø—Ä–æ—Å—ã: –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è";
        public override string Description => "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ—â–∏ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-—Å—Ü–µ–Ω–∞—Ä–∏—è—Ö";
        public override int Order => 33;

        // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        private readonly Dictionary<string, long> _organizationUnits = new();
        private readonly Dictionary<string, long> _employees = new();

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üå≥ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–†–ï–í–û–í–ò–î–ù–´–• LINQ-–ó–ê–ü–†–û–°–û–í ===");
            logger.LogInformation("üè¢ –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –±–∏–∑–Ω–µ—Å-—Å—Ü–µ–Ω–∞—Ä–∏–∏");

            // ===== –≠–¢–ê–ü 1: –°–û–ó–î–ê–ù–ò–ï –ö–û–†–ü–û–†–ê–¢–ò–í–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ =====
            await CreateCorporateStructure(logger, redb);

            // ===== –≠–¢–ê–ü 2: –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –î–†–ï–í–û–í–ò–î–ù–´–• –ó–ê–ü–†–û–°–û–í =====
            await DemonstrateTreeQueries(logger, redb);

            // ===== –≠–¢–ê–ü 3: –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò =====
            await PerformanceComparison(logger, redb);
            
            // ===== –≠–¢–ê–ü 4: –¢–ï–°–¢ –ü–†–û–ë–õ–ï–ú–´ ‚Ññ4 –î–õ–Ø TREE QUERY =====
            await TestTreeOrderByProblem(logger, redb);

            // ===== –û–ß–ò–°–¢–ö–ê =====
            await CleanupTestData(logger, redb);

            logger.LogInformation("‚úÖ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û ===");
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        /// </summary>
        private async Task CreateCorporateStructure(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üèóÔ∏è === –°–û–ó–î–ê–ù–ò–ï –ö–û–†–ü–û–†–ê–¢–ò–í–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ ===");
            
            // –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—ã
            var orgSchemeId = await redb.SyncSchemeAsync<CategoryTestProps>();
            var empSchemeId = await redb.SyncSchemeAsync<ProductTestProps>();
            
            logger.LogInformation($"üìã –°—Ö–µ–º—ã —Å–æ–∑–¥–∞–Ω—ã: –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è ({orgSchemeId}), –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ ({empSchemeId})");

            // ===== –°–û–ó–î–ê–ù–ò–ï –û–†–ì–ê–ù–ò–ó–ê–¶–ò–û–ù–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ =====
            
            // –£–†–û–í–ï–ù–¨ 0: –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è
            var corpId = await CreateOrgUnit("TechCorp", "–¢–µ—Ö–ö–æ—Ä–ø - –ì–æ–ª–æ–≤–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è", null, logger, redb);
            
            // –£–†–û–í–ï–ù–¨ 1: –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ñ–∏—Å—ã
            var moscowId = await CreateOrgUnit("Moscow Office", "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –æ—Ñ–∏—Å", corpId, logger, redb);
            var spbId = await CreateOrgUnit("SPB Office", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏–π –æ—Ñ–∏—Å", corpId, logger, redb);
            var nnyId = await CreateOrgUnit("NNY Office", "–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∏–π –æ—Ñ–∏—Å", corpId, logger, redb);

            // –£–†–û–í–ï–ù–¨ 2: –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –≤ –ú–æ—Å–∫–≤–µ
            var itMoscowId = await CreateOrgUnit("IT Department MSK", "IT-–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ú–æ—Å–∫–≤–∞", moscowId, logger, redb);
            var salesMoscowId = await CreateOrgUnit("Sales Department MSK", "–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂ –ú–æ—Å–∫–≤–∞", moscowId, logger, redb);
            var hrMoscowId = await CreateOrgUnit("HR Department MSK", "HR-–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ú–æ—Å–∫–≤–∞", moscowId, logger, redb);

            // –£–†–û–í–ï–ù–¨ 2: –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã –≤ –°–ü–ë
            var itSpbId = await CreateOrgUnit("IT Department SPB", "IT-–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –°–ü–ë", spbId, logger, redb);
            var salesSpbId = await CreateOrgUnit("Sales Department SPB", "–û—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂ –°–ü–ë", spbId, logger, redb);

            // –£–†–û–í–ï–ù–¨ 3: –ö–æ–º–∞–Ω–¥—ã –≤ IT –ú–æ—Å–∫–≤–∞
            var devTeam1Id = await CreateOrgUnit("Development Team Alpha", "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Alpha", itMoscowId, logger, redb);
            var devTeam2Id = await CreateOrgUnit("Development Team Beta", "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Beta", itMoscowId, logger, redb);
            var qateamId = await CreateOrgUnit("QA Team", "–ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", itMoscowId, logger, redb);
            var devopsTeamId = await CreateOrgUnit("DevOps Team", "–ö–æ–º–∞–Ω–¥–∞ DevOps", itMoscowId, logger, redb);

            // –£–†–û–í–ï–ù–¨ 3: –ö–æ–º–∞–Ω–¥—ã –≤ Sales –ú–æ—Å–∫–≤–∞
            var salesTeam1Id = await CreateOrgUnit("Enterprise Sales", "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏", salesMoscowId, logger, redb);
            var salesTeam2Id = await CreateOrgUnit("SMB Sales", "–ü—Ä–æ–¥–∞–∂–∏ –º–∞–ª–æ–º—É –±–∏–∑–Ω–µ—Å—É", salesMoscowId, logger, redb);

            // ===== –°–û–ó–î–ê–ù–ò–ï –°–û–¢–†–£–î–ù–ò–ö–û–í =====
            logger.LogInformation("üë• –°–æ–∑–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:");

            // –¢–æ–ø-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
            await CreateEmployee("–ò–≤–∞–Ω–æ–≤ –ò.–ò.", "CEO", 300000, true, corpId, logger, redb);
            await CreateEmployee("–ü–µ—Ç—Ä–æ–≤ –ü.–ü.", "CTO", 250000, true, corpId, logger, redb);

            // –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –æ—Ñ–∏—Å–æ–≤
            await CreateEmployee("–°–∏–¥–æ—Ä–æ–≤ –°.–°.", "–î–∏—Ä–µ–∫—Ç–æ—Ä –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –æ—Ñ–∏—Å–∞", 200000, true, moscowId, logger, redb);
            await CreateEmployee("–ö–æ–∑–ª–æ–≤ –ö.–ö.", "–î–∏—Ä–µ–∫—Ç–æ—Ä –°–ü–ë –æ—Ñ–∏—Å–∞", 180000, true, spbId, logger, redb);

            // IT-–∫–æ–º–∞–Ω–¥—ã
            await CreateEmployee("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ê.–ê.", "Senior Developer", 150000, true, devTeam1Id, logger, redb);
            await CreateEmployee("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ë.–ë.", "Middle Developer", 120000, true, devTeam1Id, logger, redb);
            await CreateEmployee("–î–∂—É–Ω–∏–æ—Ä –í.–í.", "Junior Developer", 80000, true, devTeam1Id, logger, redb);
            
            await CreateEmployee("–õ–∏–¥–µ—Ä –ì.–ì.", "Team Lead", 180000, true, devTeam2Id, logger, redb);
            await CreateEmployee("–ö–æ–¥–µ—Ä –î.–î.", "Senior Developer", 140000, true, devTeam2Id, logger, redb);
            
            await CreateEmployee("–¢–µ—Å—Ç–µ—Ä –ï.–ï.", "QA Engineer", 100000, true, qateamId, logger, redb);
            await CreateEmployee("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä –ñ.–ñ.", "QA Automation", 130000, true, qateamId, logger, redb);
            
            await CreateEmployee("–ê–¥–º–∏–Ω –ó.–ó.", "DevOps Engineer", 160000, true, devopsTeamId, logger, redb);

            // –ü—Ä–æ–¥–∞–∂–∏
            await CreateEmployee("–ü—Ä–æ–¥–∞–≤–µ—Ü –ò.–ò.", "Sales Manager", 90000, true, salesTeam1Id, logger, redb);
            await CreateEmployee("–ú–µ–Ω–µ–¥–∂–µ—Ä –ö.–ö.", "Account Manager", 110000, true, salesTeam1Id, logger, redb);
            await CreateEmployee("–ê–≥–µ–Ω—Ç –õ.–õ.", "Sales Rep", 70000, true, salesTeam2Id, logger, redb);

            // HR
            await CreateEmployee("–≠–π—á–∞—Ä –ú.–ú.", "HR Manager", 95000, true, hrMoscowId, logger, redb);
            await CreateEmployee("–†–µ–∫—Ä—É—Ç–µ—Ä –ù.–ù.", "Recruiter", 75000, false, hrMoscowId, logger, redb); // –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π

            // IT –°–ü–ë
            await CreateEmployee("–°–ü–ë –†–∞–∑—Ä–∞–± –û.–û.", "Full Stack Developer", 125000, true, itSpbId, logger, redb);
            await CreateEmployee("–°–ü–ë –¢–µ—Å—Ç–µ—Ä –ü.–ü.", "QA Engineer", 95000, true, itSpbId, logger, redb);

            // –ü—Ä–æ–¥–∞–∂–∏ –°–ü–ë
            await CreateEmployee("–°–ü–ë –ü—Ä–æ–¥–∞–∂–∏ –†.–†.", "Sales Manager", 85000, true, salesSpbId, logger, redb);

            logger.LogInformation("‚úÖ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:");
            logger.LogInformation($"   üìä –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π: {_organizationUnits.Count}");
            logger.LogInformation($"   üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {_employees.Count}");
            logger.LogInformation($"   üèóÔ∏è –£—Ä–æ–≤–Ω–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏: 4");

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            await ShowOrganizationStructure(logger, redb);
        }

        /// <summary>
        /// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        /// </summary>
        private async Task DemonstrateTreeQueries(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üß™ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ë–ò–ó–ù–ï–°-–°–¶–ï–ù–ê–†–ò–ï–í ===");

            var stopwatch = Stopwatch.StartNew();

            // ===== –°–¶–ï–ù–ê–†–ò–ô 1: "–ù–∞–π—Ç–∏ –≤—Å–µ IT-–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏" =====
            logger.LogInformation("üíº –°—Ü–µ–Ω–∞—Ä–∏–π 1: '–ù–∞–π—Ç–∏ –≤—Å–µ IT-–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö –æ—Ñ–∏—Å–∞—Ö'");
            var itDepartments = await (await redb.TreeQueryAsync<CategoryTestProps>())
                .Where(org => org.Name.Contains("IT"))
                .OrderBy(org => org.Name)
                .ToListAsync();
                
            ShowResults("IT –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è", itDepartments.Select(d => $"{d.name}: {d.properties.Name}"), logger);

            // ===== –°–¶–ï–ù–ê–†–ò–ô 2: "–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –æ—Ñ–∏—Å–∞" =====
            logger.LogInformation("üèôÔ∏è –°—Ü–µ–Ω–∞—Ä–∏–π 2: '–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –æ—Ñ–∏—Å–∞'");
            var moscowId = _organizationUnits["Moscow Office"];
            var moscowPeople = await (await redb.TreeQueryAsync<ProductTestProps>(moscowId, maxDepth: 10))
                .Where(emp => emp.IsActive == true)
                .OrderByDescending(emp => emp.Price) // –ó–∞—Ä–ø–ª–∞—Ç–∞
                .ToListAsync();
                
            ShowEmployeeResults("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –æ—Ñ–∏—Å–∞", moscowPeople, logger);

            // ===== –°–¶–ï–ù–ê–†–ò–ô 3: "–ù–∞–π—Ç–∏ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏" =====
            logger.LogInformation("üíª –°—Ü–µ–Ω–∞—Ä–∏–π 3: '–ù–∞–π—Ç–∏ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (Development Team)'");
            var devTeams = await (await redb.TreeQueryAsync<CategoryTestProps>())
                .Where(org => org.Name.Contains("Development Team"))
                .ToListAsync();
                
            ShowResults("–ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏", devTeams.Select(d => $"{d.name}: {d.properties.Name}"), logger);

            // ===== –°–¶–ï–ù–ê–†–ò–ô 4: "–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å –≤—ã—Å–æ–∫–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π" =====
            logger.LogInformation("üéØ –°—Ü–µ–Ω–∞—Ä–∏–π 4: '–í—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ (–∑–∞—Ä–ø–ª–∞—Ç–∞ > 120–∫)'");
            var highPaidEmployees = await (await redb.TreeQueryAsync<ProductTestProps>())
                .Where(emp => emp.Price > 120000)
                .Where(emp => emp.IsActive == true)
                .OrderByDescending(emp => emp.Price)
                .ToListAsync();
                
            ShowEmployeeResults("–í—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", highPaidEmployees, logger);

            // ===== –°–¶–ï–ù–ê–†–ò–ô 5: "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏" =====
            logger.LogInformation("üëë –°—Ü–µ–Ω–∞—Ä–∏–π 5: '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç/–∫–æ–º–∞–Ω–¥–∞ —Ç–∏–ø–∞'");
            var managersWithTeams = await (await redb.TreeQueryAsync<CategoryTestProps>())
                .Where(org => org.Description.Contains("–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç") || org.Description.Contains("–ö–æ–º–∞–Ω–¥–∞"))
                .Where(org => org.IsActive == true)
                .OrderBy(org => org.Name)
                .ToListAsync();
                
            ShowResults("–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏", managersWithTeams.Select(m => $"{m.name}: {m.properties.Name}"), logger);

            // ===== –°–¶–ï–ù–ê–†–ò–ô 6: "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º –∏–µ—Ä–∞—Ä—Ö–∏–∏" =====
            logger.LogInformation("üìä –°—Ü–µ–Ω–∞—Ä–∏–π 6: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º'");
            
            for (int level = 0; level <= 3; level++)
            {
                var employeesAtLevel = await (await redb.TreeQueryAsync<ProductTestProps>())
                    .WhereLevel(level)
                    .CountAsync();
                logger.LogInformation($"   –£—Ä–æ–≤–µ–Ω—å {level}: {employeesAtLevel} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤");
            }

            // ===== –°–¶–ï–ù–ê–†–ò–ô 7: "–í—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≥–ª—É–±–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π" =====
            logger.LogInformation("üí∞ –°—Ü–µ–Ω–∞—Ä–∏–π 7: '–í—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ (—É—Ä–æ–≤–µ–Ω—å > 2, –∑–∞—Ä–ø–ª–∞—Ç–∞ > 100–∫)'");
            var highPaidDeepEmployees = await (await redb.TreeQueryAsync<ProductTestProps>())
                .WhereLevel(level => level > 2)
                .Where(emp => emp.Price > 100000)
                .Where(emp => emp.IsActive == true)
                .OrderByDescending(emp => emp.Price)
                .Take(10)
                .ToListAsync();
                
            ShowEmployeeResults("–í—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–µ (–≥–ª—É–±–æ–∫–∏–µ —É—Ä–æ–≤–Ω–∏)", highPaidDeepEmployees, logger);

            // ===== –°–¶–ï–ù–ê–†–ò–ô 8: "–ö–æ—Ä–Ω–µ–≤—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏ –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" =====
            logger.LogInformation("üå± –°—Ü–µ–Ω–∞—Ä–∏–π 8: '–ö–æ—Ä–Ω–µ–≤—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (WhereRoots)'");
            var rootDepartments = await (await redb.TreeQueryAsync<CategoryTestProps>())
                .WhereRoots()
                .ToListAsync();
                
            foreach (var root in rootDepartments)
            {
                var subordinatesCount = await (await redb.TreeQueryAsync<ProductTestProps>(root.id))
                    .CountAsync();
                logger.LogInformation($"   üìã {root.properties.Name}: {subordinatesCount} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏");
            }

            // ===== –°–¶–ï–ù–ê–†–ò–ô 9: "–õ–∏—Å—Ç–æ–≤—ã–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –ø–æ–¥–∫–æ–º–∞–Ω–¥)" =====
            logger.LogInformation("üçÉ –°—Ü–µ–Ω–∞—Ä–∏–π 9: '–ö–æ–Ω–µ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (WhereLeaves)'");
            var leafTeams = await (await redb.TreeQueryAsync<CategoryTestProps>())
                .WhereLeaves()
                .Where(org => org.Description.Contains("–ö–æ–º–∞–Ω–¥–∞"))
                .ToListAsync();
                
            ShowResults("–ö–æ–Ω–µ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", leafTeams.Select(l => $"{l.name}: {l.properties.Name}"), logger);

            // ===== –°–¶–ï–ù–ê–†–ò–ô 10: "–ü–æ–ª–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞" =====
            logger.LogInformation("üå≥ –°—Ü–µ–Ω–∞—Ä–∏–π 10: '–ü–æ–ª–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (ToTreeListAsync)'");
            var fullStructure = await (await redb.TreeQueryAsync<CategoryTestProps>())
                .WhereRoots()
                .ToTreeListAsync(maxDepth: 4);
                
            logger.LogInformation("üìä –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:");
            foreach (var root in fullStructure)
            {
                DrawOrganizationTree(root, 0, logger);
            }

            // ‚úÖ –ù–û–í–´–ô –°–¶–ï–ù–ê–†–ò–ô: TreeQueryAsync —Å –º–∞—Å—Å–∏–≤–æ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ‚Ññ6 –∏–∑ redb3.txt
            logger.LogInformation("");
            logger.LogInformation("üöÄ –°—Ü–µ–Ω–∞—Ä–∏–π 11: 'TreeQueryAsync —Å –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú–ò —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–º—ã ‚Ññ6'");
            
            try
            {
                // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ñ–∏—Å–æ–≤)
                var parentObjects = new List<IRedbObject>();
                
                if (_organizationUnits.TryGetValue("Moscow Office", out var moscowOfficeId))
                {
                    var moscowObj = await redb.LoadAsync<CategoryTestProps>(moscowOfficeId);
                    parentObjects.Add(moscowObj);
                }
                if (_organizationUnits.TryGetValue("SPB Office", out var spbOfficeId))
                {
                    var spbObj = await redb.LoadAsync<CategoryTestProps>(spbOfficeId);
                    parentObjects.Add(spbObj);
                }
                
                if (parentObjects.Count >= 2)
                {
                    logger.LogInformation($"üè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ñ–∏—Å–∞—Ö: Moscow ({parentObjects[0].Id}) + SPB ({parentObjects[1].Id})");
                    
                    // ‚úÖ –¢–ï–°–¢–ò–†–£–ï–ú TreeQueryAsync —Å –º–∞—Å—Å–∏–≤–æ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ ‚Ññ6!
                    var multiParentQuery = await redb.TreeQueryAsync<ProductTestProps>(parentObjects, maxDepth: 3);
                    var multiResults = await multiParentQuery
                        .Where(emp => emp.IsActive == true)
                        .OrderBy(emp => emp.Price)
                        .ToListAsync();
                    
                    logger.LogInformation($"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤–æ –í–°–ï–• –æ—Ñ–∏—Å–∞—Ö: {multiResults.Count}");
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –æ—Ñ–∏—Å–∞–º
                    var resultsByParent = multiResults.GroupBy(r => r.parent_id);
                    foreach (var group in resultsByParent.Take(3))
                    {
                        logger.LogInformation($"  üè¢ –û—Ñ–∏—Å ID {group.Key}: {group.Count()} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤");
                        foreach (var emp in group.Take(2))
                        {
                            logger.LogInformation($"    üë§ {emp.name}: –ó–∞—Ä–ø–ª–∞—Ç–∞ ${emp.properties.Price}");
                        }
                    }
                    
                    if (multiResults.Count > 0)
                    {
                        logger.LogInformation("‚úÖ TreeQueryAsync —Å –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú–ò —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏ –†–ê–ë–û–¢–ê–ï–¢!");
                    }
                    else
                    {
                        logger.LogWarning("‚ö†Ô∏è TreeQueryAsync —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏ –≤–µ—Ä–Ω—É–ª 0 - –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö");
                    }
                }
                else
                {
                    logger.LogWarning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ñ–∏—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π");
                }
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π: {ex.Message}");
            }

            stopwatch.Stop();
            logger.LogInformation($"‚è±Ô∏è –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞: {stopwatch.ElapsedMilliseconds} –º—Å");
        }

        /// <summary>
        /// –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        /// </summary>
        private async Task PerformanceComparison(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("‚ö° === –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===");

            var iterations = 5;
            var stopwatch = new Stopwatch();

            // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            logger.LogInformation("üîπ –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ IT-–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π");
            var times1 = new List<long>();
            
            for (int i = 0; i < iterations; i++)
            {
                stopwatch.Restart();
                var result = await (await redb.TreeQueryAsync<CategoryTestProps>())
                    .Where(org => org.Name.Contains("IT"))
                    .CountAsync();
                stopwatch.Stop();
                times1.Add(stopwatch.ElapsedMilliseconds);
            }
            
            logger.LogInformation($"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {times1.Average():F1} –º—Å (–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø—Ä–æ—Å–µ)");

            // –¢–µ—Å—Ç 2: –°–ª–æ–∂–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            logger.LogInformation("üîπ –¢–µ—Å—Ç 2: –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å –æ–ø—ã—Ç–æ–º");
            var times2 = new List<long>();
            
            for (int i = 0; i < iterations; i++)
            {
                stopwatch.Restart();
                var result = await (await redb.TreeQueryAsync<ProductTestProps>())
                    .Where(emp => emp.IsActive == true)
                    .Where(emp => emp.Stock > 30) // "–æ–ø—ã—Ç" —Ä–∞–±–æ—Ç—ã
                    .CountAsync();
                stopwatch.Stop();
                times2.Add(stopwatch.ElapsedMilliseconds);
            }
            
            logger.LogInformation($"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {times2.Average():F1} –º—Å");

            // –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ–¥–¥–µ—Ä–µ–≤–∞
            logger.LogInformation("üîπ –¢–µ—Å—Ç 3: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –ø–æ–¥–¥–µ—Ä–µ–≤–µ");
            var moscowId = _organizationUnits["Moscow Office"];
            var times3 = new List<long>();
            
            for (int i = 0; i < iterations; i++)
            {
                stopwatch.Restart();
                var result = await (await redb.TreeQueryAsync<ProductTestProps>(moscowId))
                    .Where(emp => emp.IsActive == true)
                    .CountAsync();
                stopwatch.Stop();
                times3.Add(stopwatch.ElapsedMilliseconds);
            }
            
            logger.LogInformation($"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {times3.Average():F1} –º—Å");

            logger.LogInformation("üìà –í—ã–≤–æ–¥—ã:");
            logger.LogInformation("   ‚Ä¢ –î—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ SQL —Ñ—É–Ω–∫—Ü–∏–∏");
            logger.LogInformation("   ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–µ–≤–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä—è–µ—Ç –ø–æ–∏—Å–∫");
            logger.LogInformation("   ‚Ä¢ –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –Ω–∞ –±–æ–ª—å—à–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö");
        }

        // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

        private async Task<long> CreateOrgUnit(string code, string name, long? parentId, ILogger logger, IRedbService redb)
        {
            var unit = new RedbObject<CategoryTestProps>
            {
                name = code,
                parent_id = parentId,
                properties = new CategoryTestProps
                {
                    Name = name,
                    Description = $"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–∞—è –µ–¥–∏–Ω–∏—Ü–∞: {name}",
                    IsActive = true
                }
            };

            var id = await redb.SaveAsync(unit);
            _organizationUnits[code] = id;
            logger.LogInformation($"  üè¢ {code} (ID: {id})");
            return id;
        }

        private async Task<long> CreateEmployee(string name, string position, double salary, bool isActive, long departmentId, ILogger logger, IRedbService redb)
        {
            var employee = new RedbObject<ProductTestProps>
            {
                name = name,
                parent_id = departmentId,
                properties = new ProductTestProps
                {
                    Price = salary,
                    Stock = DateTime.Now.Year - 1990, // –£—Å–ª–æ–≤–Ω—ã–π "–æ–ø—ã—Ç"
                    Category = position,
                    IsActive = isActive
                }
            };

            var id = await redb.SaveAsync(employee);
            _employees[name] = id;
            logger.LogInformation($"  üë§ {name} - {position} ({salary:C})");
            return id;
        }

        private void ShowResults(string title, IEnumerable<string> items, ILogger logger)
        {
            logger.LogInformation($"‚úÖ {title} ({items.Count()}):");
            foreach (var item in items.Take(5))
            {
                logger.LogInformation($"   ‚Ä¢ {item}");
            }
            if (items.Count() > 5)
            {
                logger.LogInformation($"   ... –∏ –µ—â–µ {items.Count() - 5}");
            }
        }

        private void ShowEmployeeResults(string title, IEnumerable<RedbObject<ProductTestProps>> employees, ILogger logger)
        {
            logger.LogInformation($"‚úÖ {title} ({employees.Count()}):");
            foreach (var emp in employees.Take(7))
            {
                var status = emp.properties.IsActive ? "‚úÖ" : "‚ùå";
                logger.LogInformation($"   {status} {emp.name} - {emp.properties.Category} ({emp.properties.Price:C})");
            }
            if (employees.Count() > 7)
            {
                logger.LogInformation($"   ... –∏ –µ—â–µ {employees.Count() - 7} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤");
            }
        }

        private async Task ShowOrganizationStructure(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:");
            
            var rootOrgs = await (await redb.TreeQueryAsync<CategoryTestProps>())
                .WhereRoots()
                .ToListAsync();

            foreach (var root in rootOrgs)
            {
                await ShowOrgBranch(root, 0, logger, redb);
            }
        }

        private async Task ShowOrgBranch(TreeRedbObject<CategoryTestProps> org, int depth, ILogger logger, IRedbService redb)
        {
            var indent = new string(' ', depth * 2);
            var employeeCount = await (await redb.TreeQueryAsync<ProductTestProps>(org.id)).CountAsync();
            
            logger.LogInformation($"{indent}üè¢ {org.properties.Name} ({employeeCount} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤)");
            
            var children = await (await redb.TreeQueryAsync<CategoryTestProps>())
                .WhereChildrenOf(org.id)
                .ToListAsync();
                
            foreach (var child in children.Take(3)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            {
                await ShowOrgBranch(child, depth + 1, logger, redb);
            }
            
            if (children.Count > 3)
            {
                logger.LogInformation($"{indent}  ... –∏ –µ—â–µ {children.Count - 3} –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π");
            }
        }
        
        // ‚úÖ –ù–û–í–´–ô –¢–ï–°–¢: –ü–†–û–ë–õ–ï–ú–ê ‚Ññ4 –î–õ–Ø TREE QUERY - OrderBy —Ç–µ—Ä—è–µ—Ç Tree –∫–æ–Ω—Ç–µ–∫—Å—Ç
        private async Task TestTreeOrderByProblem(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("");
            logger.LogInformation("üå≥ === –¢–ï–°–¢ –ü–†–û–ë–õ–ï–ú–´ ‚Ññ4 –î–õ–Ø TREE QUERY ===");
            logger.LogInformation("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º: TreeQuery.OrderBy() ‚Üí –º–æ–∂–µ—Ç —Ç–µ—Ä—è—Ç—å Tree –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Üí –±–æ–ª—å—à–µ –æ–±—ä–µ–∫—Ç–æ–≤");
            
            try
            {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ç–µ—Å—Ç–∞
                if (_organizationUnits.Count > 0)
                {
                    var rootOrgId = _organizationUnits.Values.First();
                    
                    // –®–ê–ì 1: TreeQuery —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∫–æ—Ä–Ω—é
                    logger.LogInformation($"üîç –®–ê–ì 1: TreeQuery –æ—Ç –∫–æ—Ä–Ω—è ID={rootOrgId}");
                    var treeQuery = await redb.TreeQueryAsync<CategoryTestProps>(rootOrgId, maxDepth: 3);
                    var filteredTreeQuery = treeQuery.Where(c => c.IsActive == true);
                    
                    logger.LogInformation($"üìä TreeQuery —Ç–∏–ø: {filteredTreeQuery.GetType().Name}");
                    
                    // –®–ê–ì 2: –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –î–û OrderBy
                    var test1 = await filteredTreeQuery.ToListAsync();  
                    logger.LogInformation($"üìä –¢–ï–°–¢ 1 (Tree –¥–æ OrderBy): {test1.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                    
                    // –®–ê–ì 3: üö® –ö–†–ò–¢–ò–ß–ù–´–ô –ú–û–ú–ï–ù–¢ - –ø—Ä–∏–º–µ–Ω—è–µ–º OrderBy (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –∏–∑ redb3.txt)
                    logger.LogInformation("");
                    logger.LogInformation("üö® –®–ê–ì 3: –ü—Ä–∏–º–µ–Ω—è–µ–º OrderBy - –ü–†–û–í–ï–†–Ø–ï–ú –¢–ï–†–Ø–ï–¢–°–Ø –õ–ò Tree –∫–æ–Ω—Ç–µ–∫—Å—Ç!");
                    logger.LogInformation("üìù –ü–æ –ø—Ä–∏–º–µ—Ä—É: treeQuery = treeQuery.OrderBy(c => c.Name);");
                    
                    var orderedQuery = filteredTreeQuery.OrderBy(c => c.Name);
                    logger.LogInformation($"üìä –ü–æ—Å–ª–µ OrderBy —Ç–∏–ø: {orderedQuery.GetType().Name}");
                    
                    // –®–ê–ì 4: –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ü–û–°–õ–ï OrderBy  
                    var test2 = await orderedQuery.ToListAsync();
                    logger.LogInformation($"üìä –¢–ï–°–¢ 2 (–ø–æ—Å–ª–µ OrderBy): {test2.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                    
                    // –®–ê–ì 5: üî• –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê
                    logger.LogInformation("");
                    logger.LogInformation("üî• === –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ ‚Ññ4 –î–õ–Ø TREE QUERY ===");
                    
                    if (test2.Count > test1.Count)
                    {
                        logger.LogError($"‚ùå –ü–†–û–ë–õ–ï–ú–ê ‚Ññ4 –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ê –î–õ–Ø TREE!");
                        logger.LogError($"   üìä –î–æ OrderBy: {test1.Count} –æ–±—ä–µ–∫—Ç–æ–≤ (Tree –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–±–æ—Ç–∞–ª)");
                        logger.LogError($"   üìä –ü–æ—Å–ª–µ OrderBy: {test2.Count} –æ–±—ä–µ–∫—Ç–æ–≤ (–ü–û–¢–ï–†–Ø–ù Tree –∫–æ–Ω—Ç–µ–∫—Å—Ç!)");
                        logger.LogError($"   üö® OrderBy –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª TreeQueryable –≤ RedbQueryable!");
                        logger.LogError($"   üîß –†–ï–®–ï–ù–ò–ï: –ù—É–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å OrderBy –≤ PostgresTreeQueryable");
                    }
                    else if (test2.Count == test1.Count)
                    {
                        logger.LogInformation($"‚úÖ Tree –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è: {test1.Count} ‚Üí {test2.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                        logger.LogInformation($"   ‚úÖ OrderBy —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è Tree –∑–∞–ø—Ä–æ—Å–æ–≤");
                    }
                    else
                    {
                        logger.LogWarning($"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç Tree OrderBy: {test1.Count} ‚Üí {test2.Count}");
                    }
                }
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ Tree OrderBy —Ç–µ—Å—Ç–µ: {ex.Message}");
            }
        }

        private void DrawOrganizationTree(TreeRedbObject<CategoryTestProps> node, int depth, ILogger logger)
        {
            var prefix = depth == 0 ? "" : new string('‚îÇ', depth - 1) + " ‚îú‚îÄ";
            logger.LogInformation($"{prefix}üè¢ {node.properties.Name}");
            
            foreach (var child in node.Children.Cast<TreeRedbObject<CategoryTestProps>>().Take(2))
            {
                DrawOrganizationTree(child, depth + 1, logger);
            }
            
            if (node.Children.Count() > 2)
            {
                var childPrefix = new string('‚îÇ', depth) + " ‚îî‚îÄ";
                logger.LogInformation($"{childPrefix}... –∏ –µ—â–µ {node.Children.Count() - 2} –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π");
            }
        }

        private async Task CleanupTestData(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üóëÔ∏è === –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• ===");
            try
            {
                var allEmployees = await redb.QueryAsync<ProductTestProps>().Result.ToListAsync();
                var allOrgs = await redb.QueryAsync<CategoryTestProps>().Result.ToListAsync();

                foreach (var emp in allEmployees)
                    await redb.DeleteAsync(emp);

                foreach (var org in allOrgs)
                    await redb.DeleteAsync(org);

                logger.LogInformation($"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {allEmployees.Count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, {allOrgs.Count} –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π");
            }
            catch (Exception ex)
            {
                logger.LogWarning(ex, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏");
            }
        }
    }
}