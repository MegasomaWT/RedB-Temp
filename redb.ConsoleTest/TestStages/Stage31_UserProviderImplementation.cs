using System;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.Models.Users;
using redb.Core.Models.Security;
using redb.Core.Models.Contracts;
using redb.ConsoleTest.TestStages;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –¢–µ—Å—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ PostgresUserProvider
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É ValidateUserAsync, CreateUserAsync, ChangePasswordAsync
    /// </summary>
    public class Stage31_UserProviderImplementation : BaseTestStage
    {
        public override string Name => "üîê –¢–µ—Å—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ PostgresUserProvider";
        public override string Description => "–ü—Ä–æ–≤–µ—Ä–∫–∞ ValidateUserAsync, CreateUserAsync, ChangePasswordAsync —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π ID —á–µ—Ä–µ–∑ GetNextKeyAsync()";
        public override int Order => 31;

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üîê === –¢–ï–°–¢ –†–ï–ê–õ–ò–ó–û–í–ê–ù–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò POSTGRESUSERPROVIDER ===");
            
            long testUserId = 0;
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            var testLogin = $"testuser_impl_{DateTime.Now:yyyyMMdd_HHmmss}";
            const string testPassword = "TestPassword123!";
            const string newPassword = "NewTestPassword456!";

            try
            {
                // === –¢–ï–°–¢ 1: –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (CreateUserAsync) ===
                logger.LogInformation("üìã –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ CreateUserAsync");
                
                var createRequest = new CreateUserRequest
                {
                    Login = testLogin,
                    Password = testPassword,
                    Name = $"–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {DateTime.Now:HH:mm:ss}", // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
                    Email = "test.impl@example.com",
                    Phone = "+7 (999) 123-45-67"
                };

                logger.LogInformation("   ‚Üí –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π –ª–æ–≥–∏–Ω: {Login}", testLogin);

                IRedbUser createdUser;
                try
                {
                    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    createdUser = await redb.UserProvider.CreateUserAsync(createRequest);
                    testUserId = createdUser.Id;
                    
                    logger.LogInformation("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:");
                    logger.LogInformation("   ‚Üí ID: {Id} (—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ GetNextKeyAsync)", createdUser.Id);
                    logger.LogInformation("   ‚Üí Login: {Login}", createdUser.Login);
                    logger.LogInformation("   ‚Üí Name: {Name}", createdUser.Name);
                    logger.LogInformation("   ‚Üí Email: {Email}", createdUser.Email);
                    logger.LogInformation("   ‚Üí Enabled: {Enabled}", createdUser.Enabled);
                    logger.LogInformation("   ‚Üí DateRegister: {DateRegister}", createdUser.DateRegister.ToString("yyyy-MM-dd HH:mm:ss"));
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ID –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
                    if (createdUser.Id <= 0)
                    {
                        throw new InvalidOperationException("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                    }
                    
                    logger.LogInformation("üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è:");
                    logger.LogInformation("   ‚úÖ ID —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ GetNextKeyAsync: {Id}", createdUser.Id);
                    logger.LogInformation("   ‚úÖ –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω (–Ω–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ)");
                    logger.LogInformation("   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                    logger.LogInformation("   ‚úÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
                }
                catch (Exception ex)
                {
                    logger.LogError("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {Error}", ex.Message);
                    throw;
                }

                // === –¢–ï–°–¢ 2: –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø (ValidateUserAsync) ===
                logger.LogInformation("");
                logger.LogInformation("üìã –¢–µ—Å—Ç 2: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ ValidateUserAsync");
                
                // –¢–µ—Å—Ç 2.1: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                try
                {
                    var authenticatedUser = await redb.UserProvider.ValidateUserAsync(testLogin, testPassword);
                    if (authenticatedUser == null)
                    {
                        throw new InvalidOperationException("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º");
                    }
                    
                    logger.LogInformation("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º: –£–°–ü–ï–®–ù–û");
                    logger.LogInformation("   ‚Üí –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {Name} (ID: {Id})", 
                        authenticatedUser.Name, authenticatedUser.Id);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    if (authenticatedUser.Id != createdUser.Id)
                    {
                        throw new InvalidOperationException("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
                    }
                }
                catch (Exception ex)
                {
                    logger.LogError("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º: {Error}", ex.Message);
                    throw;
                }

                // –¢–µ—Å—Ç 2.2: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                try
                {
                    var failedAuth = await redb.UserProvider.ValidateUserAsync(testLogin, "WrongPassword");
                    if (failedAuth != null)
                    {
                        throw new InvalidOperationException("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º!");
                    }
                    
                    logger.LogInformation("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º: –û–¢–ö–õ–û–ù–ï–ù–ê");
                }
                catch (Exception ex)
                {
                    logger.LogError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è: {Error}", ex.Message);
                    throw;
                }

                // –¢–µ—Å—Ç 2.3: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try
                {
                    var nonExistentAuth = await redb.UserProvider.ValidateUserAsync("nonexistent_user", testPassword);
                    if (nonExistentAuth != null)
                    {
                        throw new InvalidOperationException("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                    }
                    
                    logger.LogInformation("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –û–¢–ö–õ–û–ù–ï–ù–ê");
                }
                catch (Exception ex)
                {
                    logger.LogError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {Error}", ex.Message);
                    throw;
                }

                // === –¢–ï–°–¢ 3: –°–ú–ï–ù–ê –ü–ê–†–û–õ–Ø (ChangePasswordAsync) ===
                logger.LogInformation("");
                logger.LogInformation("üìã –¢–µ—Å—Ç 3: –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ ChangePasswordAsync");
                
                // –¢–µ—Å—Ç 3.1: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
                try
                {
                    var passwordChanged = await redb.UserProvider.ChangePasswordAsync(
                        createdUser, testPassword, newPassword);
                    
                    if (!passwordChanged)
                    {
                        throw new InvalidOperationException("–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
                    }
                    
                    logger.LogInformation("‚úÖ –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—É—â–∏–º –ø–∞—Ä–æ–ª–µ–º: –£–°–ü–ï–®–ù–û");
                }
                catch (Exception ex)
                {
                    logger.LogError("‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è: {Error}", ex.Message);
                    throw;
                }

                // –¢–µ—Å—Ç 3.2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                try
                {
                    var oldPasswordAuth = await redb.UserProvider.ValidateUserAsync(testLogin, testPassword);
                    if (oldPasswordAuth != null)
                    {
                        throw new InvalidOperationException("–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã!");
                    }
                    
                    logger.LogInformation("‚úÖ –°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã: –û–¢–ö–õ–û–ù–Å–ù");
                }
                catch (Exception ex)
                {
                    logger.LogError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –ø–∞—Ä–æ–ª—è: {Error}", ex.Message);
                    throw;
                }

                // –¢–µ—Å—Ç 3.3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç
                try
                {
                    var newPasswordAuth = await redb.UserProvider.ValidateUserAsync(testLogin, newPassword);
                    if (newPasswordAuth == null)
                    {
                        throw new InvalidOperationException("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã!");
                    }
                    
                    logger.LogInformation("‚úÖ –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã: –†–ê–ë–û–¢–ê–ï–¢");
                    logger.LogInformation("   ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {Name} (ID: {Id})", 
                        newPasswordAuth.Name, newPasswordAuth.Id);
                }
                catch (Exception ex)
                {
                    logger.LogError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è: {Error}", ex.Message);
                    throw;
                }

                // –¢–µ—Å—Ç 3.4: –ü–æ–ø—ã—Ç–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—É—â–∏–º
                try
                {
                    await redb.UserProvider.ChangePasswordAsync(createdUser, "WrongCurrentPassword", "SomeNewPassword");
                    throw new InvalidOperationException("–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –ø—Ä–æ—à–ª–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—É—â–∏–º –ø–∞—Ä–æ–ª–µ–º!");
                }
                catch (UnauthorizedAccessException)
                {
                    logger.LogInformation("‚úÖ –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—É—â–∏–º: –û–¢–ö–õ–û–ù–ï–ù–ê");
                }
                catch (Exception ex)
                {
                    logger.LogError("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—É—â–∏–º: {Error}", ex.Message);
                    throw;
                }

                // === –¢–ï–°–¢ 4: –ó–ê–©–ò–¢–ê –°–ò–°–¢–ï–ú–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
                logger.LogInformation("");
                logger.LogInformation("üìã –¢–µ—Å—Ç 4: –ó–∞—â–∏—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
                
                try
                {
                    // –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    var sysUser = await redb.UserProvider.GetUserByIdAsync(0);
                    if (sysUser == null)
                    {
                        logger.LogWarning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID=0) –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∑–∞—â–∏—Ç—ã");
                    }
                    else
                    {
                        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        try
                        {
                            await redb.UserProvider.ChangePasswordAsync(sysUser, "anyPassword", "newPassword");
                            throw new InvalidOperationException("–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—à–ª–∞!");
                        }
                        catch (InvalidOperationException ex) when (ex.Message.Contains("—Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
                        {
                            logger.LogInformation("‚úÖ –ó–∞—â–∏—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID=0): –ê–ö–¢–ò–í–ù–ê");
                        }
                        catch (Exception ex)
                        {
                            logger.LogWarning("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞—â–∏—Ç—ã —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {Error}", ex.Message);
                        }
                    }
                }
                catch (Exception ex)
                {
                    logger.LogWarning("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—â–∏—Ç—ã —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {Error}", ex.Message);
                }

                // === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===
                logger.LogInformation("");
                logger.LogInformation("üéâ === –í–°–ï –¢–ï–°–¢–´ –†–ï–ê–õ–ò–ó–û–í–ê–ù–ù–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´ ===");
                logger.LogInformation("‚úÖ CreateUserAsync:");
                logger.LogInformation("   ‚Üí –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —á–µ—Ä–µ–∑ GetNextKeyAsync() —Ä–∞–±–æ—Ç–∞–µ—Ç");
                logger.LogInformation("   ‚Üí –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç");
                logger.LogInformation("   ‚Üí –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç");
                logger.LogInformation("   ‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç");
                
                logger.LogInformation("‚úÖ ValidateUserAsync:");
                logger.LogInformation("   ‚Üí –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç");
                logger.LogInformation("   ‚Üí –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è");
                logger.LogInformation("   ‚Üí –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è");
                logger.LogInformation("   ‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª–µ–π —á–µ—Ä–µ–∑ SimplePasswordHasher —Ä–∞–±–æ—Ç–∞–µ—Ç");
                
                logger.LogInformation("‚úÖ ChangePasswordAsync:");
                logger.LogInformation("   ‚Üí –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—É—â–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç");
                logger.LogInformation("   ‚Üí –°–º–µ–Ω–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–µ–∫—É—â–∏–º –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è");
                logger.LogInformation("   ‚Üí –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–µ–Ω");
                logger.LogInformation("   ‚Üí –°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å —Å—Ä–∞–∑—É –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è");
                logger.LogInformation("   ‚Üí –ó–∞—â–∏—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç");
                
                logger.LogInformation("");
                logger.LogInformation("üöÄ PostgresUserProvider –≥–æ—Ç–æ–≤ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!");
            }
            finally
            {
                // === –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• ===
                if (testUserId > 0)
                {
                    logger.LogInformation("üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –≤ –ë–î:");
                    logger.LogInformation("   ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {Id}, Login: {Login}", testUserId, testLogin);
                    logger.LogInformation("   ‚Üí –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DeleteUserAsync –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∏–∑ –ë–î –Ω–∞–ø—Ä—è–º—É—é");
                    logger.LogInformation("   ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤");
                }
            }
        }
    }
}
