using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.Models;
using redb.Core.Models.Collections;
using redb.Core.Models.Configuration; // üÜï –î–ª—è MissingObjectStrategy
using redb.Core.Models.Contracts;
using redb.Core.Models.Entities;
using redb.Core.Utils;
using redb.Core.Extensions; // üÜï –î–æ–±–∞–≤–ª—è–µ–º extension –º–µ—Ç–æ–¥—ã
using System;
using System.Linq;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –≠–¢–ê–ü 12: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
    /// </summary>
    public class Stage12_TreeFunctionality : BaseTestStage
    {
        public override int Order => 12;
        public override string Name => "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä";
        public override string Description => "–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä: —Å–æ–∑–¥–∞–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–π, –æ–±—Ö–æ–¥, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —É–∑–ª–æ–≤, –Ω–æ–≤—ã–µ extension –º–µ—Ç–æ–¥—ã, –∑–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–æ–≤";

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üå≥ === –≠–¢–ê–ü 12: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–†–ï–í–û–í–ò–î–ù–´–• –°–¢–†–£–ö–¢–£–† ===");
            
            // üîß –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–¢–ï–ì–ò–ò: TreeProvider –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ID –∑–∞—Ä–∞–Ω–µ–µ, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–∞ AutoSwitchToInsert
            redb.Configuration.MissingObjectStrategy = MissingObjectStrategy.AutoSwitchToInsert;
            logger.LogInformation("‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: AutoSwitchToInsert –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ TreeProvider");
                
                // –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                var schemeId = await redb.SyncSchemeAsync<AnalyticsRecordProps>();

                logger.LogInformation("–°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤...");

                // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                var rootCategory = new TreeRedbObject<AnalyticsRecordProps>
                {
                    scheme_id = schemeId.Id,
                    owner_id = 0,
                    who_change_id = 0,
                    name = "–í—Å–µ —Ç–æ–≤–∞—Ä—ã",
                    note = "–ö–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
                    properties = new AnalyticsRecordProps
                    {
                        Article = "ROOT",
                        Date = DateTime.Now,
                        Stock = 0,
                        TestName = "Root Category"
                    }
                };

                var rootId = await redb.SaveAsync(rootCategory);
                logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ID={rootId}");
                
                // –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ –æ–±—ä–µ–∫—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ CreateChildAsync
                rootCategory.id = rootId;

                // –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                var electronics = new TreeRedbObject<AnalyticsRecordProps>
                {
                    scheme_id = schemeId.Id,
                    owner_id = 0,
                    who_change_id = 0,
                    name = "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
                    note = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏",
                    properties = new AnalyticsRecordProps
                    {
                        Article = "ELEC",
                        Date = DateTime.Now,
                        Stock = 50,
                        TestName = "Electronics Category"
                    }
                };

                var electronicsId = await redb.CreateChildAsync(electronics, rootCategory);
                logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': ID={electronicsId}");
                
                // –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ –æ–±—ä–µ–∫—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                electronics.id = electronicsId;

                var clothing = new TreeRedbObject<AnalyticsRecordProps>
                {
                    scheme_id = schemeId.Id,
                    owner_id = 0,
                    who_change_id = 0,
                    name = "–û–¥–µ–∂–¥–∞",
                    note = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–¥–µ–∂–¥—ã",
                    properties = new AnalyticsRecordProps
                    {
                        Article = "CLOTH",
                        Date = DateTime.Now,
                        Stock = 30,
                        TestName = "Clothing Category"
                    }
                };

                var clothingId = await redb.CreateChildAsync(clothing, rootCategory);
                logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è '–û–¥–µ–∂–¥–∞': ID={clothingId}");
                
                // –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ –æ–±—ä–µ–∫—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è  
                clothing.id = clothingId;

                // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
                var smartphones = new TreeRedbObject<AnalyticsRecordProps>
                {
                    scheme_id = schemeId.Id,
                    owner_id = 0,
                    who_change_id = 0,
                    name = "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã",
                    note = "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤",
                    properties = new AnalyticsRecordProps
                    {
                        Article = "PHONE",
                        Date = DateTime.Now,
                        Stock = 15,
                        TestName = "Smartphones Subcategory"
                    }
                };

                var smartphonesId = await redb.CreateChildAsync(smartphones, electronics);
                logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã': ID={smartphonesId}");
                
                // –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ –æ–±—ä–µ–∫—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                smartphones.id = smartphonesId;

                logger.LogInformation("");
                logger.LogInformation("üîç === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–¢–û–î–û–í –î–ï–†–ï–í–ê ===");

                // –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ä–µ–≤–∞
                logger.LogInformation("–¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...");
                var tree = await redb.LoadTreeAsync<AnalyticsRecordProps>(rootCategory, maxDepth: 5);
                logger.LogInformation($"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–µ—Ä–µ–≤–æ: –∫–æ—Ä–µ–Ω—å='{tree.name}', –¥–µ—Ç–µ–π={tree.Children.Count}");

                // –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞
                logger.LogInformation("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–µ—Ä–µ–≤–∞:");
                PrintTreeStructure(logger, tree, 0);

                // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–µ–π
                logger.LogInformation("");
                logger.LogInformation("–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—ã—Ö –¥–µ—Ç–µ–π –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...");
                var children = await redb.GetChildrenAsync<AnalyticsRecordProps>(rootCategory);
                logger.LogInformation($"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ—Ç–µ–π: {children.Count()}");
                foreach (var child in children)
                {
                    logger.LogInformation($"   ‚Üí {child.Name} (ID: {child.Id})");
                }

                // –¢–µ—Å—Ç 3: –ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é
                logger.LogInformation("");
                logger.LogInformation("–¢–µ—Å—Ç 3: –°—Ç—Ä–æ–∏–º –ø—É—Ç—å –æ—Ç —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ –∫ –∫–æ—Ä–Ω—é...");
                var pathToRoot = await redb.GetPathToRootAsync<AnalyticsRecordProps>(smartphones);
                var breadcrumbs = string.Join(" > ", pathToRoot.Select(node => node.Name));
                logger.LogInformation($"‚úÖ –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏: {breadcrumbs}");

                // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤
                logger.LogInformation("");
                logger.LogInformation("–¢–µ—Å—Ç 4: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...");
                var descendants = await redb.GetDescendantsAsync<AnalyticsRecordProps>(rootCategory);
                logger.LogInformation($"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–æ–º–∫–æ–≤: {descendants.Count()}");
                foreach (var descendant in descendants)
                {
                    var level = descendant.Level;
                    var indent = new string(' ', level * 2);
                    logger.LogInformation($"   {indent}‚Üí {descendant.Name} (—É—Ä–æ–≤–µ–Ω—å {level})");
                }

                // –¢–µ—Å—Ç 5: TreeCollection
                logger.LogInformation("");
                logger.LogInformation("–¢–µ—Å—Ç 5: –†–∞–±–æ—Ç–∞ —Å TreeCollection...");
                var collection = new TreeCollection<AnalyticsRecordProps>();

                // –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
                collection.Add(tree);
                foreach (var child in tree.Children)
                {
                    collection.Add(child);
                    foreach (var grandchild in child.Children)
                    {
                        collection.Add(grandchild);
                    }
                }

                var stats = collection.GetStats();
                logger.LogInformation($"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TreeCollection: {stats}");

                // –¢–µ—Å—Ç 6: –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ä–µ–≤–∞
                logger.LogInformation("");
                logger.LogInformation("–¢–µ—Å—Ç 6: –û–±—Ö–æ–¥ –¥–µ—Ä–µ–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏...");

                logger.LogInformation("–û–±—Ö–æ–¥ –≤ –≥–ª—É–±–∏–Ω—É (DFS):");
                foreach (var node in tree.DepthFirstTraversal())
                {
                    var level = node.Level;
                    var indent = new string(' ', level * 2);
                    logger.LogInformation($"   {indent}‚Üí {node.Name}");
                }

                logger.LogInformation("–û–±—Ö–æ–¥ –≤ —à–∏—Ä–∏–Ω—É (BFS):");
                foreach (var node in tree.BreadthFirstTraversal())
                {
                    var level = node.Level;
                    logger.LogInformation($"   [–£—Ä–æ–≤–µ–Ω—å {level}] {node.Name}");
                }

                // –¢–µ—Å—Ç 7: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —É–∑–ª–∞
                logger.LogInformation("");
                logger.LogInformation("–¢–µ—Å—Ç 7: –ü–µ—Ä–µ–º–µ—â–∞–µ–º '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã' –∏–∑ '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏' –≤ '–û–¥–µ–∂–¥—É'...");
                await redb.MoveObjectAsync(smartphones, clothing);
                logger.LogInformation("‚úÖ –£–∑–µ–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                var updatedTree = await redb.LoadTreeAsync<AnalyticsRecordProps>(rootCategory, maxDepth: 5);
                logger.LogInformation("–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–µ—Ä–µ–≤–∞:");
                PrintTreeStructure(logger, updatedTree, 0);

                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
                logger.LogInformation("–í–æ–∑–≤—Ä–∞—â–∞–µ–º '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã' –æ–±—Ä–∞—Ç–Ω–æ –≤ '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É'...");
                await redb.MoveObjectAsync(smartphones, electronics);
                logger.LogInformation("‚úÖ –£–∑–µ–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ –º–µ—Å—Ç–æ");

                // üÜï –¢–ï–°–¢ 8: –ù–æ–≤—ã–µ Extension –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ä–µ–≤—å—è–º–∏
                logger.LogInformation("");
                logger.LogInformation("üåü –¢–µ—Å—Ç 8: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ù–û–í–´–ï extension –º–µ—Ç–æ–¥—ã IRedbObject...");
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                var rootObj = await redb.LoadAsync<AnalyticsRecordProps>(rootId, 1);
                var electronicsObj = await redb.LoadAsync<AnalyticsRecordProps>(electronicsId, 1);
                var smartphonesObj = await redb.LoadAsync<AnalyticsRecordProps>(smartphonesId, 1);
                
                // –¢–µ—Å—Ç IsDescendantOfAsync (üöÄ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
                var isDescendant = await smartphonesObj.IsDescendantOfAsync<AnalyticsRecordProps>(rootObj, redb);
                logger.LogInformation($"‚úÖ IsDescendantOfAsync: –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –ø–æ—Ç–æ–º–æ–∫ –ö–æ—Ä–Ω—è = {isDescendant}");
                
                var isNotDescendant = await rootObj.IsDescendantOfAsync<AnalyticsRecordProps>(smartphonesObj, redb);
                logger.LogInformation($"‚úÖ IsDescendantOfAsync: –ö–æ—Ä–µ–Ω—å –ù–ï –ø–æ—Ç–æ–º–æ–∫ –°–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ = {!isNotDescendant}");
                
                // –¢–µ—Å—Ç IsAncestorOfAsync
                var isAncestor = await rootObj.IsAncestorOfAsync<AnalyticsRecordProps>(smartphonesObj, redb);
                logger.LogInformation($"‚úÖ IsAncestorOfAsync: –ö–æ—Ä–µ–Ω—å –ø—Ä–µ–¥–æ–∫ –°–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ = {isAncestor}");
                
                // –¢–µ—Å—Ç GetTreeLevelAsync (üöÄ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ü–∏–∫–ª–æ–≤)
                var rootLevel = await rootObj.GetTreeLevelAsync<AnalyticsRecordProps>(redb);
                var phoneLevel = await smartphonesObj.GetTreeLevelAsync<AnalyticsRecordProps>(redb);
                logger.LogInformation($"‚úÖ GetTreeLevelAsync: –ö–æ—Ä–µ–Ω—å —É—Ä–æ–≤–µ–Ω—å={rootLevel}, –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã —É—Ä–æ–≤–µ–Ω—å={phoneLevel}");
                
                // –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –æ–±—ä–µ–∫—Ç–∞
                logger.LogInformation($"‚úÖ IsRoot: –ö–æ—Ä–µ–Ω—å={rootObj.IsRoot}, –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã={smartphonesObj.IsRoot}");
                logger.LogInformation($"‚úÖ HasParent: –ö–æ—Ä–µ–Ω—å={rootObj.HasParent}, –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã={smartphonesObj.HasParent}");
                
                // üÜï –¢–ï–°–¢ 9: –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
                logger.LogInformation("");
                logger.LogInformation("üõ°Ô∏è –¢–µ—Å—Ç 9: –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫...");
                logger.LogInformation("‚ÑπÔ∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —á—Ç–æ GetPathToRootAsync —Ç–µ–ø–µ—Ä—å —É—Å—Ç–æ–π—á–∏–≤ –∫ —Ü–∏–∫–ª–∞–º");
                
                // –°–∏–º—É–ª–∏—Ä—É–µ–º "–≥–ª—É–±–æ–∫–æ–µ" –¥–µ—Ä–µ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—Ç—ã
                var deepPath = await redb.GetPathToRootAsync<AnalyticsRecordProps>(smartphones);
                var pathLength = deepPath.Count();
                logger.LogInformation($"‚úÖ –ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø–æ—Å—Ç—Ä–æ–µ–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ: {pathLength} —É—Ä–æ–≤–Ω–µ–π");
                logger.LogInformation($"   üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–æ–≤: –∞–∫—Ç–∏–≤–Ω–∞ (HashSet<long> visited)");
                logger.LogInformation($"   üöÄ SQL injection: –∑–∞—â–∏—â–µ–Ω (–ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)");
                
                // üÜï –¢–ï–°–¢ 10: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                logger.LogInformation("");
                logger.LogInformation("üìä –¢–µ—Å—Ç 10: –†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...");
                
                logger.LogInformation($"‚úÖ DateCreate: {rootObj.DateCreate:yyyy-MM-dd HH:mm}");
                logger.LogInformation($"‚úÖ DateModify: {rootObj.DateModify:yyyy-MM-dd HH:mm}");
                logger.LogInformation($"‚úÖ GetAge: {rootObj.GetAge().TotalMinutes:F1} –º–∏–Ω—É—Ç —Å —Å–æ–∑–¥–∞–Ω–∏—è");
                logger.LogInformation($"‚úÖ GetTimeSinceLastModification: {rootObj.GetTimeSinceLastModification().TotalSeconds:F0} —Å–µ–∫—É–Ω–¥ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è");
                
                // –¢–µ—Å—Ç GetDisplayName –∏ GetDebugInfo
                var displayName = rootObj.GetDisplayName();
                var debugInfo = rootObj.GetDebugInfo();
                logger.LogInformation($"‚úÖ GetDisplayName: '{displayName}'");
                logger.LogInformation($"‚úÖ GetDebugInfo: {debugInfo}");

                logger.LogInformation("");
                logger.LogInformation("üéØ === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –î–†–ï–í–û–í–ò–î–ù–´–• –°–¢–†–£–ö–¢–£–† ===");
                logger.LogInformation("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç");
                logger.LogInformation("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ —Å –≥–ª—É–±–∏–Ω–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç");
                logger.LogInformation("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º—ã—Ö –¥–µ—Ç–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç");
                logger.LogInformation("‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∫–æ—Ä–Ω—é —Ä–∞–±–æ—Ç–∞–µ—Ç");
                logger.LogInformation("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç");
                logger.LogInformation("‚úÖ TreeCollection –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞—é—Ç");
                logger.LogInformation("‚úÖ –û–±—Ö–æ–¥—ã –¥–µ—Ä–µ–≤–∞ (DFS/BFS) —Ä–∞–±–æ—Ç–∞—é—Ç");
                logger.LogInformation("‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —É–∑–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç");
                logger.LogInformation("üåü ‚úÖ Extension –º–µ—Ç–æ–¥—ã IRedbObject —Ä–∞–±–æ—Ç–∞—é—Ç (–ù–û–í–û–ï!)");
                logger.LogInformation("üõ°Ô∏è ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –∞–∫—Ç–∏–≤–Ω–∞ (–ù–û–í–û–ï!)");
                logger.LogInformation("üöÄ ‚úÖ SQL injection –∑–∞—â–∏—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞ (–ù–û–í–û–ï!)");
                logger.LogInformation("üìä ‚úÖ –†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ (–ù–û–í–û–ï!)");
        }

        private static void PrintTreeStructure(ILogger logger, ITreeRedbObject<AnalyticsRecordProps> node, int level)
        {
            var indent = new string(' ', level * 2);
            logger.LogInformation($"{indent}‚îú‚îÄ {node.Name} (ID: {node.Id})");

            foreach (var child in node.Children)
            {
                PrintTreeStructure(logger, child, level + 1);
            }
        }
    }
}
