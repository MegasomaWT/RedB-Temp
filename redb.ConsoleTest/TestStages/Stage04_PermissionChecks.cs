using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.Postgres;
using System;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –≠–¢–ê–ü 4: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–∞–≤
    /// </summary>
    public class Stage04_PermissionChecks : BaseTestStage
    {
        public override int Order => 4;
        public override string Name => "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–∞–≤";
        public override string Description => "–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –ø—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö";

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üîê === –≠–¢–ê–ü 4: –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–• –ü–†–û–í–ï–†–û–ö –ü–†–ê–í ===");
                
                const long testObjectId = 1021;

                // ‚úÖ –ù–û–í–´–ô –ö–†–ê–°–ò–í–´–ô API - —Ä–∞–±–æ—Ç–∞–µ–º —Å –æ–±—ä–µ–∫—Ç–∞–º–∏, –∞ –Ω–µ —Å ID
                logger.LogInformation("–ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç {objectId} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤...", testObjectId);
                var testObj = await redb.LoadAsync<AnalyticsRecordProps>(testObjectId);
                
                logger.LogInformation("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞...");
                var canEdit = await redb.CanUserEditObject(testObj);
                logger.LogInformation("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API: {canEdit}", canEdit ? "–†–ê–ó–†–ï–®–ï–ù–û" : "–ó–ê–ü–†–ï–©–ï–ù–û");

                logger.LogInformation("");
                logger.LogInformation("üìã –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –ø—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö:");

                // –ó–∞–≥—Ä—É–∑–∫–∞ –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                logger.LogInformation("  ‚Üí LoadAsync –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é checkPermissions=false)");
                var objWithoutCheck = await redb.LoadAsync<AnalyticsRecordProps>(testObjectId);
                logger.LogInformation($"    ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {objWithoutCheck.name}");

                // –ó–∞–≥—Ä—É–∑–∫–∞ –° –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤
                logger.LogInformation("  ‚Üí LoadAsync –° –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ (checkPermissions=true)");
                try
                {
                    var objWithCheck = await redb.LoadAsync<AnalyticsRecordProps>(testObjectId);
                    logger.LogInformation($"    ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤: {objWithCheck.name}");
                }
            catch (UnauthorizedAccessException ex)
            {
                logger.LogInformation($"    ‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: {ex.Message}");
            }
        }
    }
}
