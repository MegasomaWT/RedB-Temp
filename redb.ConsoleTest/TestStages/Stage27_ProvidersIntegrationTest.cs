using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.DBModels;
using System;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å RedbService
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ IRedbService
    /// </summary>
    public class Stage27_ProvidersIntegrationTest : ITestStage
    {
        public string Name => "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤";
        public string Description => "–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Å RedbService";
        public int Order => 27;

        public async Task ExecuteAsync(ILogger logger, IRedbService service)
        {
            logger.LogInformation("üß™ Stage 27: –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å RedbService");

            try
            {
                // === –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –ü–†–û–í–ê–ô–î–ï–†–û–í ===
                
                logger.LogInformation("üîå –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å UserProvider...");
                if (service.UserProvider == null)
                    throw new InvalidOperationException("UserProvider –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ IRedbService");
                
                logger.LogInformation("üîå –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RoleProvider...");
                if (service.RoleProvider == null)
                    throw new InvalidOperationException("RoleProvider –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ IRedbService");
                
                logger.LogInformation("üîå –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å PermissionProvider...");
                // PermissionProvider –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ IPermissionProvider –≤ IRedbService

                // === –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–û–í –ü–†–û–í–ê–ô–î–ï–†–û–í ===
                
                logger.LogInformation("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø UserProvider: {Type}", service.UserProvider.GetType().Name);
                logger.LogInformation("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø RoleProvider: {Type}", service.RoleProvider.GetType().Name);
                logger.LogInformation("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø PermissionProvider: {Type}", service.GetType().Name + " (—á–µ—Ä–µ–∑ IPermissionProvider)");

                // === –ü–†–û–í–ï–†–ö–ê SECURITY CONTEXT ===
                
                logger.LogInformation("üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º SecurityContext...");
                if (service.SecurityContext == null)
                    throw new InvalidOperationException("SecurityContext –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ IRedbService");
                
                logger.LogInformation("üîç –¢–∏–ø SecurityContext: {Type}", service.SecurityContext.GetType().Name);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å SecurityContext
                var currentUser = service.SecurityContext.CurrentUser;
                logger.LogInformation("üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {User}", currentUser?.Name ?? "null");

                // === –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–û–í–´–• –ú–ï–¢–û–î–û–í ===
                
                logger.LogInformation("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...");
                
                // –¢–µ—Å—Ç UserProvider - –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥
                try
                {
                    var sysUser = await service.UserProvider.GetUserByIdAsync(0); // sys user
                    logger.LogInformation("‚úÖ UserProvider.GetUserByIdAsync —Ä–∞–±–æ—Ç–∞–µ—Ç: {User}", sysUser?.Name ?? "null");
                }
                catch (Exception ex)
                {
                    logger.LogWarning("‚ö†Ô∏è UserProvider.GetUserByIdAsync: {Error}", ex.Message);
                }

                // –¢–µ—Å—Ç RoleProvider - –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥  
                try
                {
                    var roles = await service.RoleProvider.GetRolesAsync();
                    logger.LogInformation("‚úÖ RoleProvider.GetRolesAsync —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ {Count} —Ä–æ–ª–µ–π", roles.Count);
                }
                catch (Exception ex)
                {
                    logger.LogWarning("‚ö†Ô∏è RoleProvider.GetRolesAsync: {Error}", ex.Message);
                }

                // –¢–µ—Å—Ç PermissionProvider - —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ (—á–µ—Ä–µ–∑ IRedbService)
                try
                {
                    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
                    var testObj = await service.LoadAsync<AnalyticsRecordProps>(1021); // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç
                    var canEdit = await service.CanUserEditObject(testObj); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    logger.LogInformation("‚úÖ PermissionProvider.CanUserEditObject —Ä–∞–±–æ—Ç–∞–µ—Ç: {CanEdit}", canEdit);
                }
                catch (Exception ex)
                {
                    logger.LogWarning("‚ö†Ô∏è PermissionProvider.CanUserEditObject: {Error}", ex.Message);
                }

                // === –ü–†–û–í–ï–†–ö–ê –î–ï–õ–ï–ì–ò–†–û–í–ê–ù–ò–Ø –ù–û–í–´–• –ú–ï–¢–û–î–û–í ===
                
                logger.LogInformation("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤...");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã (–Ω–æ –º–æ–≥—É—Ç –±—Ä–æ—Å–∞—Ç—å NotImplementedException)
                try
                {
                    await service.GetPermissionCountAsync();
                    logger.LogInformation("‚úÖ –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ GetPermissionCountAsync –¥–æ—Å—Ç—É–ø–µ–Ω");
                }
                catch (NotImplementedException)
                {
                    logger.LogInformation("‚úÖ –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ GetPermissionCountAsync –¥–æ—Å—Ç—É–ø–µ–Ω (–∑–∞–≥–ª—É—à–∫–∞)");
                }
                catch (Exception ex)
                {
                    logger.LogError("‚ùå –û—à–∏–±–∫–∞ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è GetPermissionCountAsync: {Error}", ex.Message);
                    throw;
                }

                logger.LogInformation("‚úÖ Stage 27 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
                logger.LogInformation("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                logger.LogInformation("   - UserProvider: –¥–æ—Å—Ç—É–ø–µ–Ω");
                logger.LogInformation("   - RoleProvider: –¥–æ—Å—Ç—É–ø–µ–Ω");
                logger.LogInformation("   - PermissionProvider: –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω");
                logger.LogInformation("   - SecurityContext: —Ä–∞–±–æ—Ç–∞–µ—Ç");
                logger.LogInformation("   - –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: —Ä–∞–±–æ—Ç–∞–µ—Ç");
            }
            catch (Exception ex)
            {
                logger.LogError("‚ùå Stage 27 –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {Error}", ex.Message);
                logger.LogError("üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {Details}", ex.ToString());
                throw;
            }
        }
    }
}