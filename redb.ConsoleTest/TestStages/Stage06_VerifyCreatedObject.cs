using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.Postgres;
using redb.Core.Providers;
using System;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –≠–¢–ê–ü 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    /// </summary>
    public class Stage06_VerifyCreatedObject : BaseTestStage
    {
        public override int Order => 6;
        public override string Name => "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞";
        public override string Description => "–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è";

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üîç === –≠–¢–ê–ü 6: –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–û–ì–û –û–ë–™–ï–ö–¢–ê ===");

                // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
                var stage5 = GetPreviousStage<Stage05_CreateObject>();
                if (stage5?.CreatedObjectId == 0)
                {
                    logger.LogError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ —ç—Ç–∞–ø–∞ 5");
                    throw new InvalidOperationException("–ù–µ –Ω–∞–π–¥–µ–Ω ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ —ç—Ç–∞–ø–∞ 5");
                }

                var createdObjectId = stage5.CreatedObjectId;
                logger.LogInformation("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç {newId} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...", createdObjectId);
                
                var createdObj = await ((IObjectStorageProvider)redb).LoadAsync<AnalyticsRecordProps>(createdObjectId);
                logger.LogInformation("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: name='{name}', TestName='{testName}'", 
                    createdObj.name, createdObj.properties.TestName);

                // üî¨ –ê–ù–ê–õ–ò–ó NULL ‚Üí DEFAULT –ü–û–°–õ–ï –ß–¢–ï–ù–ò–Ø –ò–ó –ë–î
                logger.LogInformation("üî¨ === –ê–ù–ê–õ–ò–ó NULL ‚Üí DEFAULT –ü–û–°–õ–ï –ß–¢–ï–ù–ò–Ø ===");
                logger.LogInformation($"   üìä Stock (non-nullable): {createdObj.properties.Stock}");
                logger.LogInformation($"   üìä Tag (nullable): {createdObj.properties.Tag ?? "NULL"}");
                logger.LogInformation($"   üìä TestName (nullable): {createdObj.properties.TestName ?? "NULL"}");
                logger.LogInformation($"   üìä Orders (nullable): {createdObj.properties.Orders?.ToString() ?? "NULL"}");
                logger.LogInformation($"   üìä TotalCart (nullable): {createdObj.properties.TotalCart?.ToString() ?? "NULL"}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏–µ –º–µ–∂–¥—É null –∏ 0/default
                logger.LogInformation("üß™ –ê–ù–ê–õ–ò–ó –†–ê–ó–õ–ò–ß–ò–Ø null vs default:");
                logger.LogInformation($"   üìä Orders == null: {createdObj.properties.Orders == null}");
                logger.LogInformation($"   üìä Stock == 0: {createdObj.properties.Stock == 0}");
                logger.LogInformation($"   üìä Tag == null: {createdObj.properties.Tag == null}");
                logger.LogInformation($"   üìä TotalCart == null: {createdObj.properties.TotalCart == null}");
                
                // üî¨ –ê–ù–ê–õ–ò–ó –ë–ò–ó–ù–ï–°-–ö–õ–ê–°–°–û–í –ü–û–°–õ–ï –ß–¢–ï–ù–ò–Ø
                var mixedObj = await ((IObjectStorageProvider)redb).LoadAsync<MixedTestProps>(createdObjectId);
                logger.LogInformation("üî¨ –ê–ù–ê–õ–ò–ó –ë–ò–ó–ù–ï–°-–ö–õ–ê–°–°–û–í –ü–û–°–õ–ï –ß–¢–ï–ù–ò–Ø:");
                logger.LogInformation($"   üìä Address1 (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω): {(mixedObj.properties.Address1 == null ? "NULL" : $"OK: {mixedObj.properties.Address1.City}")}");
                logger.LogInformation($"   üìä Address2 (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω): {(mixedObj.properties.Address2 == null ? "NULL" : $"OK: {mixedObj.properties.Address2.City}")}"); 
                logger.LogInformation($"   üìä Address3 (–¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è null): {(mixedObj.properties.Address3 == null ? "NULL" : $"–ü–†–û–ë–õ–ï–ú–ê: {mixedObj.properties.Address3.City}")}");

                // üî¨ –¢–ï–°–¢ NULL TEST –û–ë–™–ï–ö–¢–ê  
                logger.LogInformation("üß™ === –ê–ù–ê–õ–ò–ó NULL TEST –û–ë–™–ï–ö–¢–ê –ò–ó –ë–î ===");
                var nullTestId = GetStageData<long>("NullTestObjectId");
                if (nullTestId > 0)
                {
                    var nullTestObj = await ((IObjectStorageProvider)redb).LoadAsync<AnalyticsRecordProps>(nullTestId);
                    logger.LogInformation("üìñ –ü–û–°–õ–ï –ß–¢–ï–ù–ò–Ø –ò–ó –ë–î:");
                    logger.LogInformation($"   üìä Orders (–±—ã–ª–æ null): {nullTestObj.properties.Orders?.ToString() ?? "NULL"}");
                    logger.LogInformation($"   üìä TotalCart (–±—ã–ª–æ null): {nullTestObj.properties.TotalCart?.ToString() ?? "NULL"}");
                    logger.LogInformation($"   üìä Tag (–±—ã–ª–æ null): {nullTestObj.properties.Tag ?? "NULL"}");
                    logger.LogInformation($"   üìä TestName (–±—ã–ª–æ Filled Name): {nullTestObj.properties.TestName ?? "NULL"}");
                    logger.LogInformation($"   üìä Stock (–±—ã–ª–æ 100): {nullTestObj.properties.Stock}");
                    logger.LogInformation($"   üìä AuctionMetrics (RedbObject –±—ã–ª–æ null): {(nullTestObj.properties.AuctionMetrics == null ? "NULL" : "NOT NULL")}");
                    
                    // üö® –ü–†–û–í–ï–†–ö–ê NULL ‚Üí DEFAULT –ü–†–û–ë–õ–ï–ú–´
                    bool hasNullToDefaultIssue = false;
                    if (nullTestObj.properties.Orders != null) 
                    {
                        logger.LogWarning("‚ùå NULL ‚Üí DEFAULT –ü–†–û–ë–õ–ï–ú–ê: Orders –±—ã–ª–æ null, —Å—Ç–∞–ª–æ {value}", nullTestObj.properties.Orders);
                        hasNullToDefaultIssue = true;
                    }
                    if (nullTestObj.properties.TotalCart != null)
                    {
                        logger.LogWarning("‚ùå NULL ‚Üí DEFAULT –ü–†–û–ë–õ–ï–ú–ê: TotalCart –±—ã–ª–æ null, —Å—Ç–∞–ª–æ {value}", nullTestObj.properties.TotalCart);
                        hasNullToDefaultIssue = true;
                    }
                    if (nullTestObj.properties.Tag != null)
                    {
                        logger.LogWarning("‚ùå NULL ‚Üí DEFAULT –ü–†–û–ë–õ–ï–ú–ê: Tag –±—ã–ª–æ null, —Å—Ç–∞–ª–æ '{value}'", nullTestObj.properties.Tag);
                        hasNullToDefaultIssue = true;
                    }
                    if (nullTestObj.properties.AuctionMetrics != null)
                    {
                        logger.LogWarning("‚ùå NULL ‚Üí DEFAULT –ü–†–û–ë–õ–ï–ú–ê: AuctionMetrics –±—ã–ª–æ null, —Å—Ç–∞–ª–æ NOT NULL (ID: {id})", nullTestObj.properties.AuctionMetrics.id);
                        hasNullToDefaultIssue = true;
                    }
                    
                    // üî¨ –ü–†–û–í–ï–†–ö–ê NULL –ë–ò–ó–ù–ï–°-–ö–õ–ê–°–°–ê –í –û–°–ù–û–í–ù–û–ú –û–ë–™–ï–ö–¢–ï
                    if (mixedObj.properties.Address3 != null)
                    {
                        logger.LogWarning("‚ùå NULL ‚Üí DEFAULT –ü–†–û–ë–õ–ï–ú–ê: Address3 –±—ã–ª–æ null, —Å—Ç–∞–ª–æ NOT NULL (City: {city})", mixedObj.properties.Address3.City);
                        hasNullToDefaultIssue = true;
                    }
                    
                    if (!hasNullToDefaultIssue)
                    {
                        logger.LogInformation("‚úÖ NULL –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
                    }
                    else
                    {
                        logger.LogWarning("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê NULL ‚Üí DEFAULT –ü–†–û–ë–õ–ï–ú–ê –í –°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–ò!");
                    }
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è
                logger.LogInformation("–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π:");
                logger.LogInformation("  ID: {id}", createdObj.id);
                logger.LogInformation("  Name: '{name}'", createdObj.name);
                logger.LogInformation("  Note: '{note}'", createdObj.note);
                logger.LogInformation("  Article: '{article}'", createdObj.properties.Article);
                logger.LogInformation("  Date: {date}", createdObj.properties.Date);
                logger.LogInformation("  Stock: {stock}", createdObj.properties.Stock);
                logger.LogInformation("  Orders: {orders}", createdObj.properties.Orders);
                logger.LogInformation("  TotalCart: {totalCart}", createdObj.properties.TotalCart);
                logger.LogInformation("  Tag: '{tag}'", createdObj.properties.Tag);
                logger.LogInformation("  TestName: '{testName}'", createdObj.properties.TestName);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–æ–≤
            SetStageData("CreatedObject", createdObj);
        }
    }
}
