using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.Postgres;
using redb.Core.Providers;
using System;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –≠–¢–ê–ü 8: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    /// </summary>
    public class Stage08_FinalVerification : BaseTestStage
    {
        public override int Order => 8;
        public override string Name => "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞";
        public override string Description => "–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è";

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üéØ === –≠–¢–ê–ü 8: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ===");

                // –ü–æ–ª—É—á–∞–µ–º ID –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                var updatedObjectId = GetStageData<long>("UpdatedObjectId");
                if (updatedObjectId == 0)
                {
                    logger.LogError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ID –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç—Ç–∞–ø–æ–≤");
                    throw new InvalidOperationException("–ù–µ –Ω–∞–π–¥–µ–Ω ID –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç—Ç–∞–ø–æ–≤");
                }

                logger.LogInformation("–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ {updatedId}...", updatedObjectId);
                var updatedObj = await ((IObjectStorageProvider)redb).LoadAsync<AnalyticsRecordProps>(updatedObjectId);
                logger.LogInformation("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç: name='{name}', TestName='{testName}', Stock={stock}",
                    updatedObj.name, updatedObj.properties.TestName, updatedObj.properties.Stock);

                logger.LogInformation("–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:");
                logger.LogInformation("   –í _objects: –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—è _name, _date_modify, _hash");
                logger.LogInformation("   –í _values: –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è Stock –∏ TestName");
                logger.LogInformation("   MD5 —Ö–µ—à –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö properties");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if (updatedObj.name != "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å")
                {
                    logger.LogError("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ name: –æ–∂–∏–¥–∞–ª–æ—Å—å '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å', –ø–æ–ª—É—á–µ–Ω–æ '{actual}'", updatedObj.name);
                    throw new InvalidOperationException($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ name: –æ–∂–∏–¥–∞–ª–æ—Å—å '–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å', –ø–æ–ª—É—á–µ–Ω–æ '{updatedObj.name}'");
                }

                if (updatedObj.properties.TestName != "Console Test Update")
                {
                    logger.LogError("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ TestName: –æ–∂–∏–¥–∞–ª–æ—Å—å 'Console Test Update', –ø–æ–ª—É—á–µ–Ω–æ '{actual}'", updatedObj.properties.TestName);
                    throw new InvalidOperationException($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ TestName: –æ–∂–∏–¥–∞–ª–æ—Å—å 'Console Test Update', –ø–æ–ª—É—á–µ–Ω–æ '{updatedObj.properties.TestName}'");
                }

                if (updatedObj.properties.Stock != 150)
                {
                    logger.LogError("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Stock: –æ–∂–∏–¥–∞–ª–æ—Å—å 150, –ø–æ–ª—É—á–µ–Ω–æ {actual}", updatedObj.properties.Stock);
                    throw new InvalidOperationException($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Stock: –æ–∂–∏–¥–∞–ª–æ—Å—å 150, –ø–æ–ª—É—á–µ–Ω–æ {updatedObj.properties.Stock}");
                }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–æ–≤
            SetStageData("FinalObject", updatedObj);
        }
    }
}
