using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.DBModels;
using redb.Core.Models.Entities;
using redb.ConsoleTest.Utils;
using System;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –≠–¢–ê–ü 11: –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
    /// </summary>
    public class Stage11_ObjectDeletion : BaseTestStage
    {
        public override int Order => 11;
        public override string Name => "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤";
        public override string Description => "–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ–º";

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üóëÔ∏è === –≠–¢–ê–ü 11: –£–î–ê–õ–ï–ù–ò–ï –û–ë–™–ï–ö–¢–û–í ===");

                // –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                var schemeName = "TrueSight.DBModels.AnalyticsRecord";
                var schemeId = await redb.SyncSchemeAsync<AnalyticsRecordProps>();

                // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
                logger.LogInformation("–°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è...");
                var objectToDelete = new RedbObject<AnalyticsRecordProps>
                {
                    name = "–û–±—ä–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                    note = "–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –≤ —Ç–µ—Å—Ç–µ",
                    scheme_id = schemeId.Id,
                    owner_id = 0,
                    who_change_id = 0,
                    properties = new AnalyticsRecordProps
                    {
                        Article = "TEST_DELETE",
                        Date = DateTime.Now,
                        Stock = 999,
                        TestName = "ToBeDeleted"
                    }
                };

                var deleteObjectId = await redb.SaveAsync(objectToDelete);
                logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ID={deleteObjectId}");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
                var beforeDelete = await DatabaseAnalysisUtils.CheckObjectExists(redb, deleteObjectId);
                logger.LogInformation($"–î–æ —É–¥–∞–ª–µ–Ω–∏—è: –æ–±—ä–µ–∫—Ç {deleteObjectId} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç = {beforeDelete}");

                // ‚úÖ –ù–û–í–´–ô –ö–†–ê–°–ò–í–´–ô API - –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º
                logger.LogInformation("–ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ API —É–¥–∞–ª–µ–Ω–∏—è...");
                var objToDelete = await redb.LoadAsync<AnalyticsRecordProps>(deleteObjectId);
                logger.LogInformation($"–û–±—ä–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {objToDelete.name} (ID: {objToDelete.id})");

                // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API
                logger.LogInformation("–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API...");
                var canDelete = await redb.CanUserDeleteObject(objToDelete);
                logger.LogInformation($"‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ: {(canDelete ? "–†–ê–ó–†–ï–®–ï–ù–û" : "–ó–ê–ü–†–ï–©–ï–ù–û")}");

                // –¢–µ—Å—Ç 2: –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –∫—Ä–∞—Å–∏–≤—ã–π API —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                logger.LogInformation($"–¢–µ—Å—Ç 2: –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ...");
                try
                {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                    using (redb.CreateSystemContext())
                    {
                        var deleted = await redb.DeleteAsync(objToDelete);
                        logger.LogInformation($"‚úÖ –û–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {deleted}");
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω
                    var afterDelete = await DatabaseAnalysisUtils.CheckObjectExists(redb, deleteObjectId);
                    logger.LogInformation($"–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: –æ–±—ä–µ–∫—Ç {deleteObjectId} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç = {afterDelete}");

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä–µ–∫—Ç –ø–æ–ø–∞–ª –≤ –∞—Ä—Ö–∏–≤
                    var inArchive = await DatabaseAnalysisUtils.CheckObjectInArchive(redb, deleteObjectId);
                    logger.LogInformation($"–í –∞—Ä—Ö–∏–≤–µ _deleted_objects: –æ–±—ä–µ–∫—Ç {deleteObjectId} –Ω–∞–π–¥–µ–Ω = {inArchive}");

                    if (inArchive)
                    {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏
                        await DatabaseAnalysisUtils.ShowArchivedObjectDetails(redb, deleteObjectId, logger);
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
                    if (afterDelete)
                    {
                        logger.LogError("‚ùå –û–®–ò–ë–ö–ê: –æ–±—ä–µ–∫—Ç –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã");
                        throw new InvalidOperationException("–û–±—ä–µ–∫—Ç –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã");
                    }

                    if (!inArchive)
                    {
                        logger.LogError("‚ùå –û–®–ò–ë–ö–ê: –æ–±—ä–µ–∫—Ç –Ω–µ –ø–æ–ø–∞–ª –≤ –∞—Ä—Ö–∏–≤ _deleted_objects");
                        throw new InvalidOperationException("–û–±—ä–µ–∫—Ç –Ω–µ –ø–æ–ø–∞–ª –≤ –∞—Ä—Ö–∏–≤ _deleted_objects");
                    }

                    logger.LogInformation("");
                    logger.LogInformation("üìã === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø ===");
                    logger.LogInformation("‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç");
                    logger.LogInformation("‚úÖ –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (checkPermissions=false) –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
                    logger.LogInformation("‚úÖ –û–±—ä–µ–∫—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ _objects");
                    logger.LogInformation("‚úÖ –û–±—ä–µ–∫—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ _deleted_objects");
                    logger.LogInformation("‚úÖ –ê—Ä—Ö–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞ –≤ JSON");
                    logger.LogInformation("‚úÖ –¢—Ä–∏–≥–≥–µ—Ä –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
                }
                catch (Exception deleteEx)
                {
                    logger.LogError(deleteEx, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ {deleteObjectId}: {deleteEx.Message}");
                    if (deleteEx.InnerException != null)
                    {
                        logger.LogError($"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {deleteEx.InnerException.Message}");
                    }
                    logger.LogError($"StackTrace: {deleteEx.StackTrace}");
                throw;
            }
        }
    }
}
