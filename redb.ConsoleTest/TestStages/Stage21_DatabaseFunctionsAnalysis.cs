using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using redb.Core;
using System;
using System.Linq;
using System.Threading.Tasks;
using redb.Core.Models.Permissions;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –≠—Ç–∞–ø 21: –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –ë–î –∏ –ª–æ–≥–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ get_user_permissions_for_object, v_user_permissions –∏ –ª–æ–≥–∏–∫—É fallback
    /// </summary>
    public class Stage21_DatabaseFunctionsAnalysis : BaseTestStage
    {
        public override int Order => 21;
        public override string Name => "–ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π –ë–î";
        public override string Description => "–ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π, VIEW –∏ –ª–æ–≥–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é";

        protected override async Task<bool> ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üîç === –ê–ù–ê–õ–ò–ó –§–£–ù–ö–¶–ò–ô –ë–î ===");
            logger.LogInformation("");

            // 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_user_permissions_for_object
            logger.LogInformation("üîß 1. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï get_user_permissions_for_object:");
            logger.LogInformation("");

            try
            {
                // –¢–µ—Å—Ç —Å sys –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                var sysId = 0L; // –ù–æ–≤—ã–π sys –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                var testObjectId = 1021L; // –ò–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤

                logger.LogInformation($"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∞ sys (ID: {sysId}) –Ω–∞ –æ–±—ä–µ–∫—Ç {testObjectId}:");

                var adminPermissions = await redb.RedbContext.Database
                    .SqlQueryRaw<UserPermissionResult>(
                        "SELECT * FROM get_user_permissions_for_object({0},{1})",
                        testObjectId, sysId)
                    .FirstOrDefaultAsync();

                if (adminPermissions != null)
                {
                    logger.LogInformation($"‚úÖ sys –ø—Ä–∞–≤–∞ –Ω–∞–π–¥–µ–Ω—ã:");
                    logger.LogInformation($"  - –¢–∏–ø: {adminPermissions.PermissionType}");
                    logger.LogInformation($"  - –ò—Å—Ç–æ—á–Ω–∏–∫: {adminPermissions.PermissionSourceId}");
                    logger.LogInformation($"  - –ü—Ä–∞–≤–∞: {(adminPermissions.CanSelect ? "R" : "-")}{(adminPermissions.CanInsert ? "I" : "-")}{(adminPermissions.CanUpdate ? "U" : "-")}{(adminPermissions.CanDelete ? "D" : "-")}");
                }
                else
                {
                    logger.LogWarning("‚ö†Ô∏è sys –ø—Ä–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
                }

                // –¢–µ—Å—Ç —Å NULL user_id (–¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤)
                logger.LogInformation("");
                logger.LogInformation("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å user_id = NULL (—Ä–µ–∂–∏–º —Ç—Ä–∏–≥–≥–µ—Ä–∞):");

                var nullUserPermissions = await redb.RedbContext.Database
                    .SqlQueryRaw<UserPermissionResult>(
                        "SELECT * FROM get_user_permissions_for_object({0}, NULL)",
                        testObjectId)
                    .FirstOrDefaultAsync();

                if (nullUserPermissions != null)
                {
                    logger.LogInformation($"‚úÖ –ü—Ä–∞–≤–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–π–¥–µ–Ω—ã:");
                    logger.LogInformation($"  - –¢–∏–ø: {nullUserPermissions.PermissionType}");
                    logger.LogInformation($"  - –ò—Å—Ç–æ—á–Ω–∏–∫: {nullUserPermissions.PermissionSourceId}");
                    logger.LogInformation($"  - –ü—Ä–∞–≤–∞: {(nullUserPermissions.CanSelect ? "R" : "-")}{(nullUserPermissions.CanInsert ? "I" : "-")}{(nullUserPermissions.CanUpdate ? "U" : "-")}{(nullUserPermissions.CanDelete ? "D" : "-")}");
                }
                else
                {
                    logger.LogWarning("‚ö†Ô∏è –ü—Ä–∞–≤–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
                }

            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ get_user_permissions_for_object: {ex.Message}");
            }

            // 2. –ê–Ω–∞–ª–∏–∑ VIEW v_user_permissions
            logger.LogInformation("");
            logger.LogInformation("üëÅÔ∏è 2. –ê–ù–ê–õ–ò–ó VIEW v_user_permissions:");
            logger.LogInformation("");

            try
            {
                var viewCount = await redb.RedbContext.Database
                    .SqlQueryRaw<int>("SELECT COUNT(*) as \"Value\" FROM v_user_permissions")
                    .FirstOrDefaultAsync();

                logger.LogInformation($"‚úÖ VIEW v_user_permissions —Å–æ–¥–µ—Ä–∂–∏—Ç {viewCount} –∑–∞–ø–∏—Å–µ–π");

                // –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–µ–π –∏–∑ VIEW
                var samplePermissions = await redb.RedbContext.Database
                    .SqlQueryRaw<string>(
                        "SELECT CONCAT('Object: ', object_id, ', User: ', user_id, ', Type: ', permission_type, ', Rights: ', " +
                        "CASE WHEN can_select THEN 'R' ELSE '-' END || " +
                        "CASE WHEN can_insert THEN 'I' ELSE '-' END || " +
                        "CASE WHEN can_update THEN 'U' ELSE '-' END || " +
                        "CASE WHEN can_delete THEN 'D' ELSE '-' END) as \"Value\" " +
                        "FROM v_user_permissions LIMIT 3")
                    .ToListAsync();

                logger.LogInformation("üìÑ –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –∏–∑ VIEW:");
                foreach (var sample in samplePermissions)
                {
                    logger.LogInformation($"  - {sample}");
                }

            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ VIEW: {ex.Message}");
            }

            // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            logger.LogInformation("");
            logger.LogInformation("üå≥ 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ï–†–ê–†–•–ò–ß–ï–°–ö–û–ì–û –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–Ø:");
            logger.LogInformation("");

            try
            {
                // –ò—â–µ–º –æ–±—ä–µ–∫—Ç—ã —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏
                var hierarchyTest = await redb.RedbContext.Database
                    .SqlQueryRaw<string>(
                        "SELECT CONCAT('Child: ', _id, ' (', _name, ') -> Parent: ', _id_parent) as \"Value\" " +
                        "FROM _objects WHERE _id_parent IS NOT NULL LIMIT 3")
                    .ToListAsync();

                if (hierarchyTest.Any())
                {
                    logger.LogInformation("‚úÖ –ù–∞–π–¥–µ–Ω—ã –æ–±—ä–µ–∫—Ç—ã —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π:");
                    foreach (var hierarchy in hierarchyTest)
                    {
                        logger.LogInformation($"  - {hierarchy}");
                    }

                    logger.LogInformation("üìã –õ–æ–≥–∏–∫–∞ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:");
                    logger.LogInformation("  1. –ò—â–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–∞–º –æ–±—ä–µ–∫—Ç");
                    logger.LogInformation("  2. –ï—Å–ª–∏ –Ω–µ—Ç - –∏–¥–µ–º –∫ —Ä–æ–¥–∏—Ç–µ–ª—é (_id_parent)");
                    logger.LogInformation("  3. –ï—Å–ª–∏ –Ω–µ—Ç - –∫ —Ä–æ–¥–∏—Ç–µ–ª—é —Ä–æ–¥–∏—Ç–µ–ª—è");
                    logger.LogInformation("  4. –í –∫–æ–Ω—Ü–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ (_id_ref = 0)");
                }
                else
                {
                    logger.LogInformation("‚ÑπÔ∏è –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                }

            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏: {ex.Message}");
            }

            // 4. –ê–Ω–∞–ª–∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤
            logger.LogInformation("");
            logger.LogInformation("üåç 4. –ê–ù–ê–õ–ò–ó –ì–õ–û–ë–ê–õ–¨–ù–´–• –ü–†–ê–í (_id_ref = 0):");
            logger.LogInformation("");

            try
            {
                var globalPermissions = await redb.RedbContext.Database
                    .SqlQueryRaw<string>(
                        "SELECT CONCAT('User: ', COALESCE(_id_user::text, 'NULL'), ', Role: ', COALESCE(_id_role::text, 'NULL'), ', Rights: ', " +
                        "CASE WHEN _select THEN 'R' ELSE '-' END || " +
                        "CASE WHEN _insert THEN 'I' ELSE '-' END || " +
                        "CASE WHEN _update THEN 'U' ELSE '-' END || " +
                        "CASE WHEN _delete THEN 'D' ELSE '-' END) as \"Value\" " +
                        "FROM _permissions WHERE _id_ref = 0")
                    .ToListAsync();

                logger.LogInformation($"‚úÖ –ù–∞–π–¥–µ–Ω–æ {globalPermissions.Count} –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:");
                foreach (var permission in globalPermissions)
                {
                    logger.LogInformation($"  - {permission}");
                }

                logger.LogInformation("");
                logger.LogInformation("üìã –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:");
                logger.LogInformation("  1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)");
                logger.LogInformation("  2. –†–æ–ª–µ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è");
                logger.LogInformation("  3. –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è > –ì–ª–æ–±–∞–ª—å–Ω—ã–µ (level)");

            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤: {ex.Message}");
            }

            // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ auto_create_node_permissions
            logger.LogInformation("");
            logger.LogInformation("üîß 5. –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–†–ò–ì–ì–ï–†–ï auto_create_node_permissions:");
            logger.LogInformation("");

            logger.LogInformation("‚úÖ –¢—Ä–∏–≥–≥–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç permissions –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–∑–ª–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤");
            logger.LogInformation("üìã –õ–æ–≥–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞:");
            logger.LogInformation("  1. –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ INSERT –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º");
            logger.LogInformation("  2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —É–∂–µ permission —É —Ä–æ–¥–∏—Ç–µ–ª—è");
            logger.LogInformation("  3. –ï—Å–ª–∏ –Ω–µ—Ç - –∏—â–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ permission –≤–≤–µ—Ä—Ö –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏");
            logger.LogInformation("  4. –°–æ–∑–¥–∞–µ—Ç permission –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ");
            logger.LogInformation("  5. –£—Å–∫–æ—Ä—è–µ—Ç –ø–æ–∏—Å–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∑–∞ —Å—á–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≥–ª—É–±–∏–Ω—ã —Ä–µ–∫—É—Ä—Å–∏–∏");

            // 6. –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            logger.LogInformation("");
            logger.LogInformation("üí° 6. –í–´–í–û–î–´ –î–õ–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–´:");
            logger.LogInformation("");

            logger.LogInformation("‚úÖ –ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ:");
            logger.LogInformation("  - –§—É–Ω–∫—Ü–∏—è get_user_permissions_for_object() –Ω–∞–¥–µ–∂–Ω–∞—è");
            logger.LogInformation("  - VIEW v_user_permissions —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π");
            logger.LogInformation("  - –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç");
            logger.LogInformation("  - –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ sys –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç fallback");
            logger.LogInformation("  - –¢—Ä–∏–≥–≥–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å");
            logger.LogInformation("");

            logger.LogInformation("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:");
            logger.LogInformation("  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å get_user_permissions_for_object() –≤ PermissionProvider");
            logger.LogInformation("  - –ö–µ—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã VIEW v_user_permissions");
            logger.LogInformation("  - Fallback –∫ sys (0) –±–µ–∑–æ–ø–∞—Å–µ–Ω");
            logger.LogInformation("  - –£—á–µ—Å—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä –ø—Ä–∏ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–µ—à–∞");
            logger.LogInformation("  - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å NULL user_id –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π");

            logger.LogInformation("");
            logger.LogInformation("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω!");
            logger.LogInformation("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ SecurityContext");

            return true;
        }
    }
}
