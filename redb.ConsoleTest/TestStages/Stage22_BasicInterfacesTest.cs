using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.DBModels;
using redb.Core.Models.Contracts;
using redb.Core.Models.Entities;
using redb.Core.Models.Security;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –≠—Ç–∞–ø 22: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    /// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É IRedbObject, IRedbUser, IRedbSecurityContext
    /// </summary>
    public class Stage22_BasicInterfacesTest : BaseTestStage
    {
        public override int Order => 22;
        public override string Name => "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–´–• –ò–ù–¢–ï–†–§–ï–ô–°–û–í";
        public override string Description => "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã IRedbObject, IRedbUser, IRedbSecurityContext";

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üîç === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–´–• –ò–ù–¢–ï–†–§–ï–ô–°–û–í ===");

            // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º IRedbObject —Å RedbObject<T>
            logger.LogInformation("\nüéØ 1. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï IRedbObject:");
            
            var testObject = new RedbObject<dynamic>
            {
                id = 1021,
                scheme_id = 100,
                name = "Test Project"
            };

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ RedbObject —Ä–µ–∞–ª–∏–∑—É–µ—Ç IRedbObject
            IRedbObject redbObj = testObject;
            logger.LogInformation($"‚úÖ RedbObject —Ä–µ–∞–ª–∏–∑—É–µ—Ç IRedbObject:");
            logger.LogInformation($"  - ID: {redbObj.Id}");
            logger.LogInformation($"  - SchemeId: {redbObj.SchemeId}");
            logger.LogInformation($"  - Name: {redbObj.Name}");

            // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º IRedbUser
            logger.LogInformation("\nüë§ 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï IRedbUser:");
            
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ _RUser
            var testUser = new RedbUser(new _RUser
            {
                Id = 12345,
                Login = "testuser",
                Name = "Test User",
                Email = "test@example.com",
                Enabled = true,
                Password = "",
                DateRegister = DateTime.Now
            });

            IRedbUser user = testUser;
            logger.LogInformation($"‚úÖ RedbUser —Ä–µ–∞–ª–∏–∑—É–µ—Ç IRedbUser:");
            logger.LogInformation($"  - ID: {user.Id}");
            logger.LogInformation($"  - Login: {user.Login}");
            logger.LogInformation($"  - Name: {user.Name}");
            logger.LogInformation($"  - Email: {user.Email}");
            logger.LogInformation($"  - Enabled: {user.Enabled}");

            // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º SystemAdmin
            logger.LogInformation("\nüîß 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–ù–û–ì–û sys:");
            
            var sys = RedbUser.SystemUser;
            logger.LogInformation($"‚úÖ SystemAdmin —Å–æ–∑–¥–∞–Ω:");
            logger.LogInformation($"  - ID: {sys.Id}");
            logger.LogInformation($"  - Login: {sys.Login}");
            logger.LogInformation($"  - Name: {sys.Name}");
            logger.LogInformation($"  - Enabled: {sys.Enabled}");

            // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º IRedbSecurityContext
            logger.LogInformation("\nüõ°Ô∏è 4. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SECURITY CONTEXT:");
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            var contextWithUser = RedbSecurityContext.WithUser(testUser);
            logger.LogInformation($"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:");
            logger.LogInformation($"  - IsAuthenticated: {contextWithUser.IsAuthenticated}");
            logger.LogInformation($"  - IsSystemContext: {contextWithUser.IsSystemContext}");
            logger.LogInformation($"  - EffectiveUserId: {contextWithUser.GetEffectiveUserId()}");
            logger.LogInformation($"  - CurrentUser: {contextWithUser.CurrentUser?.Name}");

            // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            var systemContext = RedbSecurityContext.System();
            logger.LogInformation($"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:");
            logger.LogInformation($"  - IsAuthenticated: {systemContext.IsAuthenticated}");
            logger.LogInformation($"  - IsSystemContext: {systemContext.IsSystemContext}");
            logger.LogInformation($"  - EffectiveUserId: {systemContext.GetEffectiveUserId()}");
            logger.LogInformation($"  - CurrentUser: {systemContext.CurrentUser?.Name ?? "NULL"}");

            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å sys
            var adminContext = RedbSecurityContext.WithAdmin();
            logger.LogInformation($"‚úÖ sys –∫–æ–Ω—Ç–µ–∫—Å—Ç:");
            logger.LogInformation($"  - IsAuthenticated: {adminContext.IsAuthenticated}");
            logger.LogInformation($"  - IsSystemContext: {adminContext.IsSystemContext}");
            logger.LogInformation($"  - EffectiveUserId: {adminContext.GetEffectiveUserId()}");
            logger.LogInformation($"  - CurrentUser: {adminContext.CurrentUser?.Name}");

            // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            logger.LogInformation("\n‚è±Ô∏è 5. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–†–ï–ú–ï–ù–ù–û–ì–û –°–ò–°–¢–ï–ú–ù–û–ì–û –ö–û–ù–¢–ï–ö–°–¢–ê:");
            
            logger.LogInformation($"üìã –î–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:");
            logger.LogInformation($"  - IsSystemContext: {contextWithUser.IsSystemContext}");
            logger.LogInformation($"  - CurrentUser: {contextWithUser.CurrentUser?.Name}");

            using (contextWithUser.CreateSystemContext())
            {
                logger.LogInformation($"üìã –í —Å–∏—Å—Ç–µ–º–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:");
                logger.LogInformation($"  - IsSystemContext: {contextWithUser.IsSystemContext}");
                logger.LogInformation($"  - EffectiveUserId: {contextWithUser.GetEffectiveUserId()}");
            }

            logger.LogInformation($"üìã –ü–æ—Å–ª–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:");
            logger.LogInformation($"  - IsSystemContext: {contextWithUser.IsSystemContext}");
            logger.LogInformation($"  - CurrentUser: {contextWithUser.CurrentUser?.Name}");

            // 6. –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –≤–º–µ—Å—Ç–æ ID
            logger.LogInformation("\nüéØ 6. –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ –° –û–ë–™–ï–ö–¢–ê–ú–ò:");
            
            logger.LogInformation("‚ùå –°–¢–ê–†–´–ô –ü–û–î–•–û–î - —Ä–∞–±–æ—Ç–∞ —Å ID:");
            logger.LogInformation("  DeleteAsync(objectId: 1021, userId: 12345, checkPermissions: true)");
            
            logger.LogInformation("‚úÖ –ù–û–í–´–ô –ü–û–î–•–û–î - —Ä–∞–±–æ—Ç–∞ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏:");
            logger.LogInformation($"  var project = LoadAsync<Project>({testObject.Id});");
            logger.LogInformation($"  DeleteAsync(project); // ID –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!");
            logger.LogInformation($"  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ SecurityContext –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");

            logger.LogInformation("\nüí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ù–û–í–û–ì–û –ü–û–î–•–û–î–ê:");
            logger.LogInformation("  ‚úÖ –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - —Ä–∞–±–æ—Ç–∞–µ–º —Å –∫–ª–∞—Å—Å–∞–º–∏, –∞ –Ω–µ —á–∏—Å–ª–∞–º–∏");
            logger.LogInformation("  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤");
            logger.LogInformation("  ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
            logger.LogInformation("  ‚úÖ –ö—Ä–∞—Å–∏–≤—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–¥");
            logger.LogInformation("  ‚úÖ –ú–µ–Ω—å—à–µ –æ—à–∏–±–æ–∫ - –Ω–µ—Ç –ø—É—Ç–∞–Ω–∏—Ü—ã —Å ID");

            logger.LogInformation("‚úÖ === –ë–ê–ó–û–í–´–ï –ò–ù–¢–ï–†–§–ï–ô–°–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û ===");
        }
    }
}
