using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.Models.Entities;
using redb.Core.Providers;
using redb.Core.Utils;
using redb.Core.Models.Contracts;
using System.Collections.Generic;
using System.Threading.Tasks;
using System;
using redb.Core.Models.Attributes;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –≠—Ç–∞–ø 36: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω–æ–≥–æ API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
    /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    /// </summary>
    public class Stage36_AdvancedPolymorphicAPI : BaseTestStage
    {
        public override string Name => "üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π API —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π";
        public override string Description => "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã—Ö";
        public override int Order => 36;

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üéØ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–û–õ–ò–ú–û–†–§–ù–û–ì–û API ===");
            logger.LogInformation("");

            // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ï–ï–°–¢–†–ê –¢–ò–ü–û–í ===
            await InitializeTypeRegistryAsync(logger, redb);

            // === –°–û–ó–î–ê–ù–ò–ï –ë–ò–ó–ù–ï–°-–û–ë–™–ï–ö–¢–û–í –†–ê–ó–ù–´–• –¢–ò–ü–û–í ===
            var createdObjects = await CreateBusinessObjectsAsync(logger, redb);

            // === –ü–û–°–¢–†–û–ï–ù–ò–ï –î–ï–†–ï–í–ê –ò–ó –û–ë–™–ï–ö–¢–û–í –†–ê–ó–ù–´–• –¢–ò–ü–û–í ===
            await BuildMixedTypeTreeAsync(logger, redb, createdObjects);

            // === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–õ–ò–ú–û–†–§–ù–û–ô –ó–ê–ì–†–£–ó–ö–ò –° –¢–ò–ü–ò–ó–ê–¶–ò–ï–ô ===
            await DemonstratePolymorphicLoadingAsync(logger, redb, createdObjects);

            // === –ê–ù–ê–õ–ò–ó –î–ï–†–ï–í–ê –° –ò–ó–í–õ–ï–ß–ï–ù–ò–ï–ú –ë–ò–ó–ù–ï–°-–î–ê–ù–ù–´–• ===
            await AnalyzeTreeWithBusinessDataAsync(logger, redb, createdObjects);

            logger.LogInformation("");
            logger.LogInformation("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω–æ–≥–æ API –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
        }

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AutomaticTypeRegistry –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤
        /// </summary>
        private async Task InitializeTypeRegistryAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üîß === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ï–ï–°–¢–†–ê –¢–ò–ü–û–í ===");

            try
            {
                // –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é AutomaticTypeRegistry
                // –≠—Ç–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö
                logger.LogInformation("‚ÑπÔ∏è –ò–º–∏—Ç–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AutomaticTypeRegistry");
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ —Ç–∏–ø—ã –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã
                logger.LogInformation("üìã –¢–∏–ø—ã —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ [RedbScheme] (–∏–º–∏—Ç–∞—Ü–∏—è):");
                logger.LogInformation("  ‚Ä¢ CompanyInfo (—Å—Ö–µ–º–∞: CompanyInfo)");
                logger.LogInformation("  ‚Ä¢ EmployeeInfo (—Å—Ö–µ–º–∞: EmployeeInfo)");
                logger.LogInformation("  ‚Ä¢ ProjectInfo (—Å—Ö–µ–º–∞: ProjectInfo)");
                logger.LogInformation("  ‚Ä¢ AnalyticsRecordProps (—Å—Ö–µ–º–∞: –ó–∞–ø–∏—Å–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)");
                logger.LogInformation("");
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        /// </summary>
        private async Task<CreatedObjectsInfo> CreateBusinessObjectsAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üè≠ === –°–û–ó–î–ê–ù–ò–ï –ë–ò–ó–ù–ï–°-–û–ë–™–ï–ö–¢–û–í –†–ê–ó–ù–´–• –¢–ò–ü–û–í ===");

            var objects = new CreatedObjectsInfo();

            using (redb.CreateSystemContext())
            {
                // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é
                var company = new RedbObject<CompanyInfo>
                {
                    name = "–û–û–û \"–¢–µ—Ö–Ω–æ–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏\"",
                    note = "–ì–æ–ª–æ–≤–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Ö–æ–ª–¥–∏–Ω–≥–∞",
                    properties = new CompanyInfo
                    {
                        CompanyName = "–û–û–û \"–¢–µ—Ö–Ω–æ–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏\"",
                        Inn = "7707083893",
                        Industry = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
                        FoundedYear = 2015,
                        EmployeeCount = 150
                    }
                };

                objects.CompanyId = await redb.SaveAsync(company);
                logger.LogInformation($"üè¢ –ö–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID={objects.CompanyId}");
                logger.LogInformation($"   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {company.properties.CompanyName}");
                logger.LogInformation($"   ‚Ä¢ –ò–ù–ù: {company.properties.Inn}");
                logger.LogInformation($"   ‚Ä¢ –û—Ç—Ä–∞—Å–ª—å: {company.properties.Industry}");

                // –°–æ–∑–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                var employee = new RedbObject<EmployeeInfo>
                {
                    name = "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
                    note = "–í–µ–¥—É—â–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
                    parent_id = objects.CompanyId,
                    properties = new EmployeeInfo
                    {
                        FullName = "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",
                        Position = "Senior Developer",
                        Department = "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
                        HireDate = new DateTime(2020, 3, 15),
                        Salary = 120000,
                        Email = "i.ivanov@technoinnovations.ru"
                    }
                };

                objects.EmployeeId = await redb.SaveAsync(employee);
                logger.LogInformation($"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω: ID={objects.EmployeeId}");
                logger.LogInformation($"   ‚Ä¢ –§–ò–û: {employee.properties.FullName}");
                logger.LogInformation($"   ‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {employee.properties.Position}");
                logger.LogInformation($"   ‚Ä¢ –ó–∞—Ä–ø–ª–∞—Ç–∞: {employee.properties.Salary:C0}");

                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
                var project = new RedbObject<ProjectInfo>
                {
                    name = "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏",
                    note = "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ–µ–∫—Ç –∫–æ–º–ø–∞–Ω–∏–∏",
                    parent_id = objects.EmployeeId,
                    properties = new ProjectInfo
                    {
                        ProjectName = "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏",
                        Description = "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤",
                        StartDate = new DateTime(2024, 1, 10),
                        Status = "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                        Budget = 2500000,
                        Progress = 65
                    }
                };

                objects.ProjectId = await redb.SaveAsync(project);
                logger.LogInformation($"üìã –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: ID={objects.ProjectId}");
                logger.LogInformation($"   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {project.properties.ProjectName}");
                logger.LogInformation($"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {project.properties.Status}");
                logger.LogInformation($"   ‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: {project.properties.Progress}%");
                logger.LogInformation($"   ‚Ä¢ –ë—é–¥–∂–µ—Ç: {project.properties.Budget:C0}");

                // –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
                var analytics = new RedbObject<AnalyticsRecordProps>
                {
                    name = "–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç Q1 2024",
                    note = "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É",
                    parent_id = objects.ProjectId,
                    properties = new AnalyticsRecordProps
                    {
                        Date = DateTime.Now,
                        Article = "REPORT_Q1_2024",
                        Stock = 100,
                        Orders = 45,
                        TestName = "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã",
                        Tag = "quarterly-report",
                        stringArr = new[] { "performance", "scalability", "user-experience" },
                        longArr = new long[] { 1000, 2500, 1800 }
                    }
                };

                objects.AnalyticsId = await redb.SaveAsync(analytics);
                logger.LogInformation($"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID={objects.AnalyticsId}");
                logger.LogInformation($"   ‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª: {analytics.properties.Article}");
                logger.LogInformation($"   ‚Ä¢ –î–∞—Ç–∞: {analytics.properties.Date:dd.MM.yyyy}");
                logger.LogInformation($"   ‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {analytics.properties.Orders}");
            }

            logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω–æ {4} –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏");
            logger.LogInformation("");

            return objects;
        }

        /// <summary>
        /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        /// </summary>
        private async Task BuildMixedTypeTreeAsync(ILogger logger, IRedbService redb, CreatedObjectsInfo objects)
        {
            logger.LogInformation("üå≥ === –ü–û–°–¢–†–û–ï–ù–ò–ï –°–ú–ï–®–ê–ù–ù–û–ì–û –î–ï–†–ï–í–ê –¢–ò–ü–û–í ===");
            logger.LogInformation("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–µ—Ä–µ–≤–∞:");
            logger.LogInformation("üè¢ –ö–æ–º–ø–∞–Ω–∏—è (CompanyInfo)");
            logger.LogInformation("  ‚îî‚îÄ‚îÄ üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ (EmployeeInfo)");
            logger.LogInformation("      ‚îî‚îÄ‚îÄ üìã –ü—Ä–æ–µ–∫—Ç (ProjectInfo)");
            logger.LogInformation("          ‚îî‚îÄ‚îÄ üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (AnalyticsRecordProps)");
            logger.LogInformation("");
            logger.LogInformation("–ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–º–µ–µ—Ç —Ä–∞–∑–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ö–µ–º—É!");
            logger.LogInformation("");
        }

        /// <summary>
        /// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
        /// </summary>
        private async Task DemonstratePolymorphicLoadingAsync(ILogger logger, IRedbService redb, CreatedObjectsInfo objects)
        {
            logger.LogInformation("üéØ === –ü–û–õ–ò–ú–û–†–§–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –¢–ò–ü–ò–ó–ê–¶–ò–ï–ô ===");

            try
            {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç
                var rootCompany = await redb.LoadAsync<CompanyInfo>(objects.CompanyId);
                
                logger.LogInformation($"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ã—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –æ—Ç –∫–æ—Ä–Ω—è: {rootCompany.name}");

                // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
                // –í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –∑–¥–µ—Å—å –±—É–¥–µ—Ç LoadPolymorphicTreeAsync
                var companyTree = await redb.LoadTreeAsync<CompanyInfo>(rootCompany, maxDepth: 5);

                logger.LogInformation("‚úÖ –î–µ—Ä–µ–≤–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!");
                logger.LogInformation($"–ö–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç: {companyTree.GetType().Name}");
                logger.LogInformation($"–î–µ—Ç–µ–π –≤ –¥–µ—Ä–µ–≤–µ: {companyTree.Children?.Count ?? 0}");
                logger.LogInformation("");

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ä–µ–≤–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                SetStageData("LoadedTree", companyTree);
                SetStageData("RootCompany", rootCompany);
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–∫–∂–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                var employee = await redb.LoadAsync<EmployeeInfo>(objects.EmployeeId);
                var project = await redb.LoadAsync<ProjectInfo>(objects.ProjectId);
                var analytics = await redb.LoadAsync<AnalyticsRecordProps>(objects.AnalyticsId);
                
                SetStageData("Employee", employee);
                SetStageData("Project", project);
                SetStageData("Analytics", analytics);
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –ê–Ω–∞–ª–∏–∑ –¥–µ—Ä–µ–≤–∞ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        private async Task AnalyzeTreeWithBusinessDataAsync(ILogger logger, IRedbService redb, CreatedObjectsInfo objects)
        {
            logger.LogInformation("üíé === –ê–ù–ê–õ–ò–ó –û–ë–™–ï–ö–¢–û–í –° –ò–ó–í–õ–ï–ß–ï–ù–ò–ï–ú –ë–ò–ó–ù–ï–°-–î–ê–ù–ù–´–• ===");

            // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            var company = GetStageData<RedbObject<CompanyInfo>>("RootCompany");
            var employee = GetStageData<RedbObject<EmployeeInfo>>("Employee");
            var project = GetStageData<RedbObject<ProjectInfo>>("Project");
            var analytics = GetStageData<RedbObject<AnalyticsRecordProps>>("Analytics");

            if (company == null || employee == null || project == null || analytics == null)
            {
                logger.LogError("‚ùå –ù–µ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–µ—à–µ");
                return;
            }

            logger.LogInformation("üîç –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã—Ö:");
            logger.LogInformation("");

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
            await AnalyzeBusinessObject(logger, company, 0);
            await AnalyzeBusinessObject(logger, employee, 1);  
            await AnalyzeBusinessObject(logger, project, 2);
            await AnalyzeBusinessObject(logger, analytics, 3);

            logger.LogInformation("");
            logger.LogInformation("üí° === –ö–õ–Æ–ß–ï–í–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –¢–ò–ü–ò–ó–ê–¶–ò–ò ===");
            logger.LogInformation("‚úÖ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–∏–∑–Ω–µ—Å-—Å–≤–æ–π—Å—Ç–≤–∞–º –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞");
            logger.LogInformation("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π");
            logger.LogInformation("‚úÖ Intellisense –∏ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ IDE");
            logger.LogInformation("‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤");
            logger.LogInformation("‚úÖ –£–¥–æ–±–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
        }

        /// <summary>
        /// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-–æ–±—ä–µ–∫—Ç–∞ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        private async Task AnalyzeBusinessObject(ILogger logger, IRedbObject businessObject, int level)
        {
            var indent = new string(' ', level * 2);

            // üéØ –ö–õ–Æ–ß–ï–í–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –†–∞–±–æ—Ç–∞ —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            
            switch (businessObject)
            {
                case RedbObject<CompanyInfo> company:
                    logger.LogInformation($"{indent}üè¢ –ö–û–ú–ü–ê–ù–ò–Ø: {company.name}");
                    logger.LogInformation($"{indent}   üìã –ò–ù–ù: {company.properties.Inn}");
                    logger.LogInformation($"{indent}   üè≠ –û—Ç—Ä–∞—Å–ª—å: {company.properties.Industry}");
                    logger.LogInformation($"{indent}   üìÖ –ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è: {company.properties.FoundedYear}");
                    logger.LogInformation($"{indent}   üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {company.properties.EmployeeCount}");
                    logger.LogInformation($"{indent}   üí∞ ID —Å—Ö–µ–º—ã: {company.scheme_id}");
                    logger.LogInformation($"{indent}   üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {company.note}");
                    break;

                case RedbObject<EmployeeInfo> employee:
                    logger.LogInformation($"{indent}üë§ –°–û–¢–†–£–î–ù–ò–ö: {employee.name}");
                    logger.LogInformation($"{indent}   üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {employee.properties.Position}");
                    logger.LogInformation($"{indent}   üè¢ –û—Ç–¥–µ–ª: {employee.properties.Department}");
                    logger.LogInformation($"{indent}   üìÖ –î–∞—Ç–∞ –Ω–∞–π–º–∞: {employee.properties.HireDate:dd.MM.yyyy}");
                    logger.LogInformation($"{indent}   üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {employee.properties.Salary:C0}");
                    logger.LogInformation($"{indent}   üìß Email: {employee.properties.Email}");
                    logger.LogInformation($"{indent}   üí∞ ID —Å—Ö–µ–º—ã: {employee.scheme_id}");
                    logger.LogInformation($"{indent}   üîó –†–æ–¥–∏—Ç–µ–ª—å: ID {employee.parent_id}");
                    break;

                case RedbObject<ProjectInfo> project:
                    logger.LogInformation($"{indent}üìã –ü–†–û–ï–ö–¢: {project.name}");
                    logger.LogInformation($"{indent}   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {project.properties.Description}");
                    logger.LogInformation($"{indent}   üìÖ –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞: {project.properties.StartDate:dd.MM.yyyy}");
                    logger.LogInformation($"{indent}   üéØ –°—Ç–∞—Ç—É—Å: {project.properties.Status}");
                    logger.LogInformation($"{indent}   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {project.properties.Progress}%");
                    logger.LogInformation($"{indent}   üí∞ –ë—é–¥–∂–µ—Ç: {project.properties.Budget:C0}");
                    logger.LogInformation($"{indent}   üí∞ ID —Å—Ö–µ–º—ã: {project.scheme_id}");
                    logger.LogInformation($"{indent}   üîó –†–æ–¥–∏—Ç–µ–ª—å: ID {project.parent_id}");
                    break;

                case RedbObject<AnalyticsRecordProps> analytics:
                    logger.LogInformation($"{indent}üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê: {analytics.name}");
                    logger.LogInformation($"{indent}   üìÑ –ê—Ä—Ç–∏–∫—É–ª: {analytics.properties.Article}");
                    logger.LogInformation($"{indent}   üìÖ –î–∞—Ç–∞: {analytics.properties.Date:dd.MM.yyyy HH:mm}");
                    logger.LogInformation($"{indent}   üì¶ –û—Å—Ç–∞—Ç–æ–∫: {analytics.properties.Stock}");
                    logger.LogInformation($"{indent}   üõí –ó–∞–∫–∞–∑–æ–≤: {analytics.properties.Orders}");
                    logger.LogInformation($"{indent}   üè∑Ô∏è –¢–µ–≥: {analytics.properties.Tag}");
                    logger.LogInformation($"{indent}   üîç –¢–µ—Å—Ç: {analytics.properties.TestName}");
                    if (analytics.properties.stringArr?.Length > 0)
                    {
                        logger.LogInformation($"{indent}   üìã –°—Ç—Ä–æ–∫–∏: [{string.Join(", ", analytics.properties.stringArr)}]");
                    }
                    if (analytics.properties.longArr?.Length > 0)
                    {
                        logger.LogInformation($"{indent}   üìä –ß–∏—Å–ª–∞: [{string.Join(", ", analytics.properties.longArr)}]");
                    }
                    logger.LogInformation($"{indent}   üí∞ ID —Å—Ö–µ–º—ã: {analytics.scheme_id}");
                    logger.LogInformation($"{indent}   üîó –†–æ–¥–∏—Ç–µ–ª—å: ID {analytics.parent_id}");
                    break;

                default:
                    logger.LogInformation($"{indent}‚ùì –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ò–ü: {businessObject.GetType().Name}");
                    logger.LogInformation($"{indent}   üÜî ID: {businessObject.Id}");
                    logger.LogInformation($"{indent}   üìù –ò–º—è: {businessObject.Name}");
                    break;
            }

            logger.LogInformation("");
        }
    }

    /// <summary>
    /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
    /// </summary>
    public class CreatedObjectsInfo
    {
        public long CompanyId { get; set; }
        public long EmployeeId { get; set; }
        public long ProjectId { get; set; }
        public long AnalyticsId { get; set; }
    }

    /// <summary>
    /// –ú–æ–¥–µ–ª—å –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã—Ö: –ö–æ–º–ø–∞–Ω–∏—è
    /// </summary>
    [RedbScheme]
    public class CompanyInfo
    {
        public string CompanyName { get; set; } = string.Empty;
        public string Inn { get; set; } = string.Empty;
        public string Industry { get; set; } = string.Empty;
        public int FoundedYear { get; set; }
        public int EmployeeCount { get; set; }
    }

    /// <summary>
    /// –ú–æ–¥–µ–ª—å –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã—Ö: –°–æ—Ç—Ä—É–¥–Ω–∏–∫
    /// </summary>
    [RedbScheme]
    public class EmployeeInfo
    {
        public string FullName { get; set; } = string.Empty;
        public string Position { get; set; } = string.Empty;
        public string Department { get; set; } = string.Empty;
        public DateTime HireDate { get; set; }
        public decimal Salary { get; set; }
        public string Email { get; set; } = string.Empty;
    }

    /// <summary>
    /// –ú–æ–¥–µ–ª—å –±–∏–∑–Ω–µ—Å-–¥–∞–Ω–Ω—ã—Ö: –ü—Ä–æ–µ–∫—Ç
    /// </summary>
    [RedbScheme]
    public class ProjectInfo
    {
        public string ProjectName { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public DateTime StartDate { get; set; }
        public string Status { get; set; } = string.Empty;
        public decimal Budget { get; set; }
        public int Progress { get; set; }
    }
}
