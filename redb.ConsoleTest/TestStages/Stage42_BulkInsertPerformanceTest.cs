using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.Models.Entities;
using redb.Core.Models.Contracts;
using redb.ConsoleTest.Models;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –≠–¢–ê–ü 42: –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏ AddNewObjectsAsync
    /// </summary>
    public class Stage42_BulkInsertPerformanceTest : BaseTestStage
    {
        public override int Order => 42;
        public override string Name => "üöÄ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏";
        public override string Description => "–¢–µ—Å—Ç–∏—Ä—É–µ–º AddNewObjectsAsync –Ω–∞ 1000 –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è";

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üöÄ === –≠–¢–ê–ü 42: –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ú–ê–°–°–û–í–û–ô –í–°–¢–ê–í–ö–ò ===");

            // –®–ê–ì 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ö–µ–º –∑–∞—Ä–∞–Ω–µ–µ (–∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
            logger.LogInformation("üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ö–µ–º –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏...");
            
            var testScheme = await redb.SyncSchemeAsync<BulkTestProps>();
            logger.LogInformation($"‚úÖ –°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞: {testScheme.Name} (ID: {testScheme.Id})");

            // –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ 1000 —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            var objectsCount = 1000;
            logger.LogInformation($"üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ {objectsCount} —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤...");
            
            var testObjects = new List<RedbObject<BulkTestProps>>();
            var stopwatchPrep = Stopwatch.StartNew();
            
            for (int i = 0; i < objectsCount; i++)
            {
                var obj = new RedbObject<BulkTestProps>
                {
                    name = $"Bulk Test Object #{i + 1}",
                    note = $"Created for bulk insert performance test - iteration {i + 1}",
                    owner_id = 0,
                    who_change_id = 0,
                    date_create = DateTime.Now,
                    date_modify = DateTime.Now,
                    scheme_id = testScheme.Id, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É –∑–∞—Ä–∞–Ω–µ–µ
                    properties = new BulkTestProps
                    {
                        Name = $"Test Object {i + 1}",
                        Value = i * 10,
                        IsActive = i % 2 == 0,
                        CreatedAt = DateTime.Now.AddMinutes(-i),
                        Category = $"Category {i % 10}",
                        Tags = new[] { $"tag{i}", $"bulk", $"test{i % 5}" },
                        Metadata = new BulkMetadata
                        {
                            Source = "BulkInsertTest",
                            Priority = i % 3,
                            Description = $"Metadata for object {i + 1}"
                        }
                    }
                };
                
                testObjects.Add(obj);
            }
            
            stopwatchPrep.Stop();
            logger.LogInformation($"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ {objectsCount} –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {stopwatchPrep.ElapsedMilliseconds} –º—Å");

            // –®–ê–ì 3: –¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è) - —Ç–æ–ª—å–∫–æ 100 –æ–±—ä–µ–∫—Ç–æ–≤
            var comparisonCount = 100;
            logger.LogInformation($"‚è±Ô∏è –¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ SaveAsync –Ω–∞ {comparisonCount} –æ–±—ä–µ–∫—Ç–æ–≤...");
            
            var comparisonObjects = testObjects.GetRange(0, comparisonCount);
            var stopwatchNormal = Stopwatch.StartNew();
            
            for (int i = 0; i < comparisonCount; i++)
            {
                var obj = comparisonObjects[i];
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
                obj.Id = 0; 
                await redb.SaveAsync(obj);
            }
            
            stopwatchNormal.Stop();
            logger.LogInformation($"‚è±Ô∏è –û–±—ã—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {comparisonCount} –æ–±—ä–µ–∫—Ç–æ–≤: {stopwatchNormal.ElapsedMilliseconds} –º—Å");
            logger.LogInformation($"üìä –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—ã—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {(double)comparisonCount / stopwatchNormal.ElapsedMilliseconds * 1000:F2} –æ–±—ä–µ–∫—Ç–æ–≤/—Å–µ–∫");

            // –®–ê–ì 4: –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏ AddNewObjectsAsync
            logger.LogInformation($"üöÄ –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏ AddNewObjectsAsync –Ω–∞ {objectsCount} –æ–±—ä–µ–∫—Ç–æ–≤...");
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID —É –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö
            foreach (var obj in testObjects)
            {
                obj.Id = 0;
            }
            
            var stopwatchBulk = Stopwatch.StartNew();
            
            try
            {
                var insertedIds = await redb.AddNewObjectsAsync<BulkTestProps>(testObjects.Cast<IRedbObject<BulkTestProps>>().ToList());
                
                stopwatchBulk.Stop();
                
                logger.LogInformation($"üéâ –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ {objectsCount} –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {stopwatchBulk.ElapsedMilliseconds} –º—Å!");
                logger.LogInformation($"üìä –°–∫–æ—Ä–æ—Å—Ç—å –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏: {(double)objectsCount / stopwatchBulk.ElapsedMilliseconds * 1000:F2} –æ–±—ä–µ–∫—Ç–æ–≤/—Å–µ–∫");
                logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {insertedIds.Count}");
                
                // –®–ê–ì 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if (stopwatchNormal.ElapsedMilliseconds > 0)
                {
                    var normalSpeedPerObject = (double)stopwatchNormal.ElapsedMilliseconds / comparisonCount;
                    var bulkSpeedPerObject = (double)stopwatchBulk.ElapsedMilliseconds / objectsCount;
                    var speedupFactor = normalSpeedPerObject / bulkSpeedPerObject;
                    
                    logger.LogInformation($"üìà === –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===");
                    logger.LogInformation($"üêå –û–±—ã—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {normalSpeedPerObject:F2} –º—Å/–æ–±—ä–µ–∫—Ç");
                    logger.LogInformation($"üöÄ –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞: {bulkSpeedPerObject:F2} –º—Å/–æ–±—ä–µ–∫—Ç");
                    logger.LogInformation($"‚ö° –£–°–ö–û–†–ï–ù–ò–ï: –≤ {speedupFactor:F1}x —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ!");
                    
                    if (speedupFactor > 5)
                    {
                        logger.LogInformation("üèÜ –û–¢–õ–ò–ß–ù–û! –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–µ–µ!");
                    }
                    else if (speedupFactor > 2)
                    {
                        logger.LogInformation("üëç –•–û–†–û–®–û! –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–º–µ—Ç–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ!");
                    }
                    else
                    {
                        logger.LogWarning("‚ö†Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏ –Ω–∏–∂–µ –æ–∂–∏–¥–∞–µ–º–æ–π");
                    }
                }

                // –®–ê–ì 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
                logger.LogInformation("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
                
                int verifiedCount = 0;
                foreach (var createdId in insertedIds.Take(5)) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ–±—ä–µ–∫—Ç–æ–≤
                {
                    var loadedObj = await redb.LoadAsync<BulkTestProps>(createdId);
                    if (loadedObj?.properties != null && !string.IsNullOrEmpty(loadedObj.properties.Name))
                    {
                        verifiedCount++;
                    }
                }
                
                logger.LogInformation($"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {verifiedCount}/5 - –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
                
                // ‚úÖ –¢–ï–°–¢ –°–õ–£–ñ–ï–ë–ù–´–• –ü–û–õ–ï–ô (DateBegin –∏ –¥—Ä—É–≥–∏–µ)
                logger.LogInformation("üß™ === –¢–ï–°–¢ –°–õ–£–ñ–ï–ë–ù–´–• –ü–û–õ–ï–ô (DateBegin, DateComplete, –∏ —Ç.–¥.) ===");
                await TestServiceFieldsPreservation(logger, redb, insertedIds, testScheme);
                
            }
            catch (Exception ex)
            {
                stopwatchBulk.Stop();
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–µ: {ex.Message}");
                
                // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –æ —Ç–æ–º —á—Ç–æ —Å—Ö–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è –Ω–∞—à–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
                if (ex.Message.Contains("–Ω–µ –Ω–∞–π–¥–µ–Ω–∞"))
                {
                    logger.LogInformation("üí° –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å—Ö–µ–º—ã –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ");
                    logger.LogInformation("‚úÖ –¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ö–µ–º –≤ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö");
                }
                else
                {
                    throw;
                }
            }
            
            logger.LogInformation("üéØ === –¢–ï–°–¢ –ú–ê–°–°–û–í–û–ô –í–°–¢–ê–í–ö–ò –ó–ê–í–ï–†–®–ï–ù ===");
        }

        /// <summary>
        /// üß™ –¢–ï–°–¢ –°–õ–£–ñ–ï–ë–ù–´–• –ü–û–õ–ï–ô: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ DateBegin, DateComplete –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        /// </summary>
        private async Task TestServiceFieldsPreservation(ILogger logger, IRedbService redb, List<long> existingIds, IRedbScheme scheme)
        {
            logger.LogInformation("üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å–æ —Å–ª—É–∂–µ–±–Ω—ã–º–∏ –ø–æ–ª—è–º–∏...");
            
            // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            var testDateBegin = new DateTime(2025, 1, 1, 10, 30, 0);
            var testDateComplete = new DateTime(2025, 12, 31, 18, 45, 0);
            var testDateCreate = new DateTime(2025, 6, 15, 12, 0, 0);
            var testDateModify = new DateTime(2025, 6, 16, 14, 30, 0);
            
            var testObjects = new List<RedbObject<BulkTestProps>>
            {
                new RedbObject<BulkTestProps>
                {
                    name = "Test ServiceFields Object #1",
                    note = "–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –ø–æ–ª–µ–π —á–µ—Ä–µ–∑ AddNewObjectsAsync",
                    scheme_id = scheme.Id,
                    
                    // ‚úÖ –°–õ–£–ñ–ï–ë–ù–´–ï –ü–û–õ–Ø - –ö–õ–Æ–ß–ï–í–´–ï –î–õ–Ø –¢–ï–°–¢–ê!
                    date_begin = testDateBegin,           // ‚ùó –ö–†–ò–¢–ò–ß–ù–û: –≠—Ç–æ –ø–æ–ª–µ –ø—Ä–æ–ø–∞–¥–∞–ª–æ!
                    date_complete = testDateComplete,
                    date_create = testDateCreate,
                    date_modify = testDateModify,
                    key = 12345,
                    code_int = 99999,
                    code_string = "TEST-SERVICE-001",
                    code_guid = Guid.NewGuid(),
                    @bool = true,
                    
                    properties = new BulkTestProps
                    {
                        Name = "ServiceFields Test Object 1",
                        Value = 777,
                        IsActive = true,
                        CreatedAt = DateTime.Now,
                        Category = "ServiceFieldsTest",
                        Tags = new[] { "service-fields", "test", "preservation" },
                        Metadata = new BulkMetadata
                        {
                            Source = "ServiceFieldsTest",
                            Priority = 1,
                            Description = "Test object for service fields preservation"
                        }
                    }
                },
                new RedbObject<BulkTestProps>
                {
                    name = "Test ServiceFields Object #2",
                    note = "–¢–µ—Å—Ç —Å NULL –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤ —Å–ª—É–∂–µ–±–Ω—ã—Ö –ø–æ–ª—è—Ö",
                    scheme_id = scheme.Id,
                    
                    // ‚úÖ –¢–ï–°–¢ NULL –ó–ù–ê–ß–ï–ù–ò–ô
                    date_begin = null,                    // NULL –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∫–∞–∫ NULL
                    date_complete = null,
                    date_create = testDateCreate.AddDays(1),
                    date_modify = testDateModify.AddDays(1),
                    key = null,
                    code_int = null,
                    code_string = null,
                    code_guid = null,
                    @bool = null,
                    
                    properties = new BulkTestProps
                    {
                        Name = "ServiceFields Test Object 2",
                        Value = 888,
                        IsActive = false,
                        CreatedAt = DateTime.Now,
                        Category = "ServiceFieldsTest",
                        Tags = new[] { "null-test", "service-fields" },
                        Metadata = new BulkMetadata
                        {
                            Source = "ServiceFieldsNullTest",
                            Priority = 2,
                            Description = "Test object for null service fields"
                        }
                    }
                }
            };
            
            logger.LogInformation("üöÄ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç—ã —á–µ—Ä–µ–∑ AddNewObjectsAsync...");
            
            var serviceFieldsIds = await redb.AddNewObjectsAsync<BulkTestProps>(testObjects.Cast<IRedbObject<BulkTestProps>>().ToList());
            
            logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω–æ {serviceFieldsIds.Count} –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª—É–∂–µ–±–Ω—ã—Ö –ø–æ–ª–µ–π");
            
            // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢–´
            logger.LogInformation("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω—ã—Ö –ø–æ–ª–µ–π...");
            
            var obj1Id = serviceFieldsIds[0];
            var obj2Id = serviceFieldsIds[1];
            
            var loadedObj1 = await redb.LoadAsync<BulkTestProps>(obj1Id);
            var loadedObj2 = await redb.LoadAsync<BulkTestProps>(obj2Id);
            
            if (loadedObj1 != null)
            {
                logger.LogInformation($"üìã –û–ë–™–ï–ö–¢ 1 (ID {obj1Id}) - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É–∂–µ–±–Ω—ã—Ö –ø–æ–ª–µ–π:");
                logger.LogInformation($"   üéØ DateBegin: {loadedObj1.date_begin?.ToString("yyyy-MM-dd HH:mm:ss") ?? "NULL"} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {testDateBegin:yyyy-MM-dd HH:mm:ss})");
                logger.LogInformation($"   üéØ DateComplete: {loadedObj1.date_complete?.ToString("yyyy-MM-dd HH:mm:ss") ?? "NULL"} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {testDateComplete:yyyy-MM-dd HH:mm:ss})");
                logger.LogInformation($"   üìù Key: {loadedObj1.key} (–æ–∂–∏–¥–∞–ª–æ—Å—å: 12345)");
                logger.LogInformation($"   üî¢ CodeInt: {loadedObj1.code_int} (–æ–∂–∏–¥–∞–ª–æ—Å—å: 99999)");
                logger.LogInformation($"   üî§ CodeString: '{loadedObj1.code_string}' (–æ–∂–∏–¥–∞–ª–æ—Å—å: 'TEST-SERVICE-001')");
                logger.LogInformation($"   üÜî CodeGuid: {loadedObj1.code_guid} (–æ–∂–∏–¥–∞–ª–æ—Å—å: –Ω–µ NULL)");
                logger.LogInformation($"   ‚úÖ Bool: {loadedObj1.@bool} (–æ–∂–∏–¥–∞–ª–æ—Å—å: True)");
                logger.LogInformation($"   üìÑ Note: '{loadedObj1.note}' (–æ–∂–∏–¥–∞–ª–æ—Å—å: —Å–æ–¥–µ—Ä–∂–∏—Ç '—Å–ª—É–∂–µ–±–Ω—ã—Ö –ø–æ–ª–µ–π')");
                
                // ‚úÖ –ö–õ–Æ–ß–ï–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: DateBegin (–ø–æ–ª–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –∂–∞–ª–æ–≤–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
                bool dateBeginCorrect = loadedObj1.date_begin.HasValue && 
                                       Math.Abs((loadedObj1.date_begin.Value - testDateBegin).TotalSeconds) < 1;
                
                if (dateBeginCorrect)
                {
                    logger.LogInformation($"üéâ –£–°–ü–ï–•: DateBegin —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
                }
                else
                {
                    logger.LogError($"‚ùå –û–®–ò–ë–ö–ê: DateBegin –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è! –ë—ã–ª–æ: {loadedObj1.date_begin}, –æ–∂–∏–¥–∞–ª–æ—Å—å: {testDateBegin}");
                }
            }
            
            if (loadedObj2 != null)
            {
                logger.LogInformation($"üìã –û–ë–™–ï–ö–¢ 2 (ID {obj2Id}) - –ü—Ä–æ–≤–µ—Ä–∫–∞ NULL –∑–Ω–∞—á–µ–Ω–∏–π:");
                logger.LogInformation($"   üéØ DateBegin: {(loadedObj2.date_begin?.ToString("yyyy-MM-dd HH:mm:ss") ?? "NULL")} (–æ–∂–∏–¥–∞–ª–æ—Å—å: NULL)");
                logger.LogInformation($"   üéØ DateComplete: {(loadedObj2.date_complete?.ToString("yyyy-MM-dd HH:mm:ss") ?? "NULL")} (–æ–∂–∏–¥–∞–ª–æ—Å—å: NULL)");
                logger.LogInformation($"   üìù Key: {(loadedObj2.key?.ToString() ?? "NULL")} (–æ–∂–∏–¥–∞–ª–æ—Å—å: NULL)");
                logger.LogInformation($"   üî¢ CodeInt: {(loadedObj2.code_int?.ToString() ?? "NULL")} (–æ–∂–∏–¥–∞–ª–æ—Å—å: NULL)");
                logger.LogInformation($"   üî§ CodeString: '{loadedObj2.code_string ?? "NULL"}' (–æ–∂–∏–¥–∞–ª–æ—Å—å: NULL)");
                logger.LogInformation($"   üÜî CodeGuid: {(loadedObj2.code_guid?.ToString() ?? "NULL")} (–æ–∂–∏–¥–∞–ª–æ—Å—å: NULL)");
                logger.LogInformation($"   ‚úÖ Bool: {(loadedObj2.@bool?.ToString() ?? "NULL")} (–æ–∂–∏–¥–∞–ª–æ—Å—å: NULL)");
                
                // ‚úÖ –ö–õ–Æ–ß–ï–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: NULL –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è NULL
                bool nullValuesCorrect = !loadedObj2.date_begin.HasValue && 
                                        !loadedObj2.date_complete.HasValue &&
                                        !loadedObj2.key.HasValue &&
                                        !loadedObj2.code_int.HasValue &&
                                        string.IsNullOrEmpty(loadedObj2.code_string) &&
                                        !loadedObj2.code_guid.HasValue &&
                                        !loadedObj2.@bool.HasValue;
                
                if (nullValuesCorrect)
                {
                    logger.LogInformation($"üéâ –£–°–ü–ï–•: NULL –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
                }
                else
                {
                    logger.LogError($"‚ùå –û–®–ò–ë–ö–ê: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ NULL –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª–∏—Å—å!");
                }
            }
            
            logger.LogInformation("üèÜ === –¢–ï–°–¢ –°–õ–£–ñ–ï–ë–ù–´–• –ü–û–õ–ï–ô –ó–ê–í–ï–†–®–ï–ù ===");
        }
    }

    /// <summary>
    /// –ú–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏
    /// </summary>
    public class BulkTestProps
    {
        public string Name { get; set; } = string.Empty;
        public int Value { get; set; }
        public bool IsActive { get; set; }
        public DateTime CreatedAt { get; set; }
        public string Category { get; set; } = string.Empty;
        public string[] Tags { get; set; } = Array.Empty<string>();
        public BulkMetadata Metadata { get; set; } = new();
    }

    /// <summary>
    /// –í–ª–æ–∂–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Class –ø–æ–ª–µ–π –≤ –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–µ
    /// </summary>
    public class BulkMetadata
    {
        public string Source { get; set; } = string.Empty;
        public int Priority { get; set; }
        public string Description { get; set; } = string.Empty;
    }
}
