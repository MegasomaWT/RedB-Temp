using Microsoft.Extensions.Logging;
using redb.Core;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∞–ø–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    /// </summary>
    public class TestStageManager
    {
        private readonly List<ITestStage> _stages;

        public TestStageManager()
        {
            _stages = new List<ITestStage>
            {
                new Stage01_DatabaseConnection(),
                new Stage02_LoadExistingObject(),
                new Stage03_SchemaSync(),
                new Stage04_PermissionChecks(),
                new Stage05_CreateObject(),
                new Stage06_VerifyCreatedObject(),
                new Stage07_UpdateObject(),
                new Stage08_FinalVerification(),
                new Stage09_DatabaseAnalysis(),
                new Stage10_ComparativeAnalysis(),
                new Stage11_ObjectDeletion(),
                new Stage12_TreeFunctionality(),
                new Stage13_LinqQueries(),
                new Stage16_AdvancedLinq(),
                new Stage17_AdvancedLinqOperators(),
                new Stage18_SortingAndPagination(),
                new Stage19_DateTimeSorting(),
                
                // === –≠–¢–ê–ü–´ –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===
                new Stage20_CurrentSystemAnalysis(),
                new Stage21_DatabaseFunctionsAnalysis(),
                new Stage22_BasicInterfacesTest(),
                new Stage23_PermissionModelsTest(),
                new Stage24_AdvancedSecurityContext(),
                new Stage25_PolymorphicAPI(),
                
                // === –≠–¢–ê–ü–´ –ü–†–û–í–ê–ô–î–ï–†–û–í ===
                new Stage26_UserProviderInterfacesTest(),
                new Stage27_ProvidersIntegrationTest(),
                
                // === –≠–¢–ê–ü–´ –°–ò–°–¢–ï–ú–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===
                new Stage28_ConfigurationSystemTest(),
                new Stage29_ProvidersConfigurationTest(),
                
                // === –≠–¢–ê–ü–´ –£–õ–£–ß–®–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===
                new Stage30_TreeSecurityTests(),
                
                // === –≠–¢–ê–ü–´ –†–ï–ê–õ–ò–ó–ê–¶–ò–ò –ü–†–û–í–ê–ô–î–ï–†–û–í ===
                new Stage31_UserProviderImplementation(),
                
                // === –≠–¢–ê–ü–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –§–ê–ë–†–ò–ö–ò ===
                new Stage32_RedbObjectFactoryTest(),
                
                // === –≠–¢–ê–ü–´ –î–†–ï–í–û–í–ò–î–ù–´–• LINQ-–ó–ê–ü–†–û–°–û–í ===
                new Stage33_TreeLinqQueries(),
                new Stage34_SimpleTreeLinq(),
                
                // === –≠–¢–ê–ü–´ –ê–¢–†–ò–ë–£–¢–û–í –ò –ê–ù–ù–û–¢–ê–¶–ò–ô ===
                new Stage35_JsonIgnoreTest(),
                
                // === –≠–¢–ê–ü–´ –ü–û–õ–ò–ú–û–†–§–ù–û–ì–û API ===
                new Stage36_AdvancedPolymorphicAPI(),
                
                // === –≠–¢–ê–ü–´ –ù–û–í–´–• –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô ===
                new Stage40_ChangeTrackingTest(),
                
                // === –≠–¢–ê–ü–´ –ù–û–í–û–ô –ü–ê–†–ê–î–ò–ì–ú–´ LINQ ===
                new Stage41_NewParadigmLINQTest(),
                
                // === –≠–¢–ê–ü–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===
                new Stage42_BulkInsertPerformanceTest(),
                new Stage43_BulkInsertComplexObjects(),
                
                // === –≠–¢–ê–ü–´ –ù–û–í–û–ì–û SaveAsync ===
                new Stage44_TestNewSaveAsync(),
                
                // === –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–°–ü–ï–•–ê ===
                new Stage45_FinalSuccess(),
                
                // === –≠–¢–ê–ü–´ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –¢–ï–°–¢–û–í ===
                new Stage46_DateTimeFilteringTest()
                
                // === –≠–¢–ê–ü–´ –£–¢–ò–õ–ò–¢–ê–†–ù–´–• –ú–ï–¢–û–î–û–í (–ü–†–ò–ú–ï–†–´) ===
                // new Stage37_ResetIdsTest()  // –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ResetIds (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
                // –î–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ —ç—Ç–∞–ø—ã –∑–¥–µ—Å—å
            };
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–ø—ã
        /// </summary>
        public IEnumerable<ITestStage> GetAllStages()
        {
            return _stages.OrderBy(s => s.Order);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —ç—Ç–∞–ø –ø–æ –Ω–æ–º–µ—Ä—É
        /// </summary>
        public ITestStage? GetStageByNumber(int stageNumber)
        {
            return _stages.FirstOrDefault(s => s.Order == stageNumber);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —ç—Ç–∞–ø –ø–æ –∏–º–µ–Ω–∏ (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        /// </summary>
        public ITestStage? GetStageByName(string stageName)
        {
            return _stages.FirstOrDefault(s => 
                s.Name.Contains(stageName, StringComparison.OrdinalIgnoreCase));
        }

        /// <summary>
        /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —ç—Ç–∞–ø—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        /// </summary>
        public async Task ExecuteAllStagesAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üöÄ === –ó–ê–ü–£–°–ö –í–°–ï–• –≠–¢–ê–ü–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===");
            logger.LogInformation("–í—Å–µ–≥–æ —ç—Ç–∞–ø–æ–≤: {count}", _stages.Count);
            
            var successCount = 0;
            var failedStages = new List<(ITestStage stage, Exception error)>();

            foreach (var stage in GetAllStages())
            {
                try
                {
                    await stage.ExecuteAsync(logger, redb);
                    successCount++;
                }
                catch (Exception ex)
                {
                    failedStages.Add((stage, ex));
                    logger.LogError("‚ùå –≠—Ç–∞–ø {Order} ({Name}) –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π", stage.Order, stage.Name);
                }
            }

            logger.LogInformation("");
            logger.LogInformation("üìä === –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===");
            logger.LogInformation("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {success}/{total} —ç—Ç–∞–ø–æ–≤", successCount, _stages.Count);
            
            if (failedStages.Any())
            {
                logger.LogInformation("‚ùå –ó–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π: {failed} —ç—Ç–∞–ø–æ–≤", failedStages.Count);
                foreach (var (stage, error) in failedStages)
                {
                    logger.LogError("  - –≠—Ç–∞–ø {Order}: {Name} - {Error}", stage.Order, stage.Name, error.Message);
                }
            }
            else
            {
                logger.LogInformation("üéâ === –í–°–ï –≠–¢–ê–ü–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û ===");
            }
        }

        /// <summary>
        /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç—Ç–∞–ø—ã
        /// </summary>
        public async Task ExecuteStagesAsync(ILogger logger, IRedbService redb, params int[] stageNumbers)
        {
            logger.LogInformation("üéØ === –ó–ê–ü–£–°–ö –í–´–ë–†–ê–ù–ù–´–• –≠–¢–ê–ü–û–í ===");
            logger.LogInformation("–≠—Ç–∞–ø—ã –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é: [{stages}]", string.Join(", ", stageNumbers));

            var successCount = 0;
            var failedStages = new List<(int number, Exception error)>();

            foreach (var stageNumber in stageNumbers)
            {
                var stage = GetStageByNumber(stageNumber);
                if (stage == null)
                {
                    logger.LogWarning("‚ö†Ô∏è –≠—Ç–∞–ø {stageNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω", stageNumber);
                    continue;
                }

                try
                {
                    await stage.ExecuteAsync(logger, redb);
                    successCount++;
                }
                catch (Exception ex)
                {
                    failedStages.Add((stageNumber, ex));
                    logger.LogError("‚ùå –≠—Ç–∞–ø {stageNumber} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π", stageNumber);
                }
            }

            logger.LogInformation("");
            logger.LogInformation("üìä === –ò–¢–û–ì–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø ===");
            logger.LogInformation("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {success}/{total} —ç—Ç–∞–ø–æ–≤", successCount, stageNumbers.Length);
            
            if (failedStages.Any())
            {
                logger.LogInformation("‚ùå –ó–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π: {failed} —ç—Ç–∞–ø–æ–≤", failedStages.Count);
                foreach (var (number, error) in failedStages)
                {
                    logger.LogError("  - –≠—Ç–∞–ø {number}: {Error}", number, error.Message);
                }
            }
        }

        /// <summary>
        /// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
        /// </summary>
        public void ShowAvailableStages(ILogger logger)
        {
            logger.LogInformation("üìã === –î–û–°–¢–£–ü–ù–´–ï –≠–¢–ê–ü–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===");
            
            foreach (var stage in GetAllStages())
            {
                logger.LogInformation("  {Order:D2}. {Name}", stage.Order, stage.Name);
                if (!string.IsNullOrEmpty(stage.Description))
                {
                    logger.LogInformation("      {Description}", stage.Description);
                }
            }
            
            logger.LogInformation("");
            logger.LogInformation("üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:");
            logger.LogInformation("  dotnet run                    - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —ç—Ç–∞–ø—ã");
            logger.LogInformation("  dotnet run --stages 1,3,13    - –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–∞–ø—ã 1, 3 –∏ 13");
            logger.LogInformation("  dotnet run --list             - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤");
            logger.LogInformation("  dotnet run --help             - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É");
        }
    }
}
