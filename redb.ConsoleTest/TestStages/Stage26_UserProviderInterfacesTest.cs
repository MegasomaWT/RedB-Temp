using System;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.DBModels;
using redb.Core.Models.Contracts;
using redb.Core.Models.Entities;
using redb.Core.Providers;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏ –∫–æ–º–ø–∏–ª–∏—Ä—É—é—Ç—Å—è
    /// </summary>
    public class Stage26_UserProviderInterfacesTest : ITestStage
    {
        public string Name => "–¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (IUserProvider, IRoleProvider, IPermissionProvider)";
        public string Description => "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ä–æ–ª–µ–π –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π";
        public int Order => 26;

        public async Task ExecuteAsync(ILogger logger, IRedbService service)
        {
            logger.LogInformation("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...");
            
            try
            {
                // === –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ IUserProvider ===
                logger.LogInformation("üìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ IUserProvider");
                await TestIUserProviderInterface();
                logger.LogInformation("‚úÖ IUserProvider - –≤—Å–µ –º–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                
                // === –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ IRoleProvider ===
                logger.LogInformation("üìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ IRoleProvider");
                await TestIRoleProviderInterface();
                logger.LogInformation("‚úÖ IRoleProvider - –≤—Å–µ –º–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                
                // === –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ IPermissionProvider ===
                logger.LogInformation("üìã –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ IPermissionProvider");
                await TestIPermissionProviderInterface();
                logger.LogInformation("‚úÖ IPermissionProvider - –≤—Å–µ –º–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                
                // === –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤ ===
                logger.LogInformation("üìã –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤");
                TestTypeCompatibility();
                logger.LogInformation("‚úÖ –í—Å–µ —Ç–∏–ø—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã");
                
                logger.LogInformation("üéâ –í—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã!");
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: {Message}", ex.Message);
                throw;
            }
        }
        
        /// <summary>
        /// –¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ IUserProvider
        /// </summary>
        private async Task TestIUserProviderInterface()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
            var interfaceType = typeof(IUserProvider);
            
            // CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
            CheckMethod(interfaceType, "CreateUserAsync");
            CheckMethod(interfaceType, "UpdateUserAsync");
            CheckMethod(interfaceType, "DeleteUserAsync");
            
            // –ü–æ–∏—Å–∫ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ
            CheckMethod(interfaceType, "GetUserByIdAsync");
            CheckMethod(interfaceType, "GetUserByLoginAsync");
            CheckMethod(interfaceType, "LoadUserAsync"); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
            CheckMethod(interfaceType, "GetUsersAsync");
            
            // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            CheckMethod(interfaceType, "ValidateUserAsync");
            CheckMethod(interfaceType, "ChangePasswordAsync");
            CheckMethod(interfaceType, "SetPasswordAsync");
            
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º
            CheckMethod(interfaceType, "EnableUserAsync");
            CheckMethod(interfaceType, "DisableUserAsync");
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            CheckMethod(interfaceType, "ValidateUserDataAsync");
            CheckMethod(interfaceType, "IsLoginAvailableAsync");
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            CheckMethod(interfaceType, "GetUserCountAsync");
            CheckMethod(interfaceType, "GetActiveUserCountAsync");
            
            Console.WriteLine($"   ‚úì IUserProvider —Å–æ–¥–µ—Ä–∂–∏—Ç {interfaceType.GetMethods().Length} –º–µ—Ç–æ–¥–æ–≤");
            await Task.CompletedTask;
        }
        
        /// <summary>
        /// –¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ IRoleProvider
        /// </summary>
        private async Task TestIRoleProviderInterface()
        {
            var interfaceType = typeof(IRoleProvider);
            
            // CRUD —Ä–æ–ª–µ–π
            CheckMethod(interfaceType, "CreateRoleAsync");
            CheckMethod(interfaceType, "UpdateRoleAsync");
            CheckMethod(interfaceType, "DeleteRoleAsync");
            
            // –ü–æ–∏—Å–∫ —Ä–æ–ª–µ–π
            CheckMethod(interfaceType, "GetRoleByIdAsync");
            CheckMethod(interfaceType, "GetRoleByNameAsync");
            CheckMethod(interfaceType, "LoadRoleAsync"); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
            CheckMethod(interfaceType, "GetRolesAsync");
            
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Ä–æ–ª—å
            CheckMethod(interfaceType, "AssignUserToRoleAsync");
            CheckMethod(interfaceType, "RemoveUserFromRoleAsync");
            CheckMethod(interfaceType, "SetUserRolesAsync");
            CheckMethod(interfaceType, "GetUserRolesAsync");
            CheckMethod(interfaceType, "GetRoleUsersAsync");
            CheckMethod(interfaceType, "UserHasRoleAsync");
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            CheckMethod(interfaceType, "IsRoleNameAvailableAsync");
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            CheckMethod(interfaceType, "GetRoleCountAsync");
            CheckMethod(interfaceType, "GetRoleUserCountAsync");
            CheckMethod(interfaceType, "GetRoleStatisticsAsync");
            
            Console.WriteLine($"   ‚úì IRoleProvider —Å–æ–¥–µ—Ä–∂–∏—Ç {interfaceType.GetMethods().Length} –º–µ—Ç–æ–¥–æ–≤");
            await Task.CompletedTask;
        }
        
        /// <summary>
        /// –¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ IPermissionProvider
        /// </summary>
        private async Task TestIPermissionProviderInterface()
        {
            var interfaceType = typeof(IPermissionProvider);
            
            // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
            CheckMethod(interfaceType, "GetReadableObjectIds");
            CheckMethod(interfaceType, "CanUserEditObject");
            CheckMethod(interfaceType, "CanUserSelectObject");
            CheckMethod(interfaceType, "CanUserInsertScheme");
            CheckMethod(interfaceType, "CanUserDeleteObject");
            
            // –ù–æ–≤—ã–µ CRUD –º–µ—Ç–æ–¥—ã
            CheckMethod(interfaceType, "CreatePermissionAsync");
            CheckMethod(interfaceType, "UpdatePermissionAsync");
            CheckMethod(interfaceType, "DeletePermissionAsync");
            
            // –ü–æ–∏—Å–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            CheckMethod(interfaceType, "GetPermissionsByUserAsync");
            CheckMethod(interfaceType, "GetPermissionsByRoleAsync");
            CheckMethod(interfaceType, "GetPermissionsByObjectAsync");
            CheckMethod(interfaceType, "GetPermissionByIdAsync");
            
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏
            CheckMethod(interfaceType, "GrantPermissionAsync");
            CheckMethod(interfaceType, "RevokePermissionAsync");
            CheckMethod(interfaceType, "RevokeAllUserPermissionsAsync");
            CheckMethod(interfaceType, "RevokeAllRolePermissionsAsync");
            
            // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞
            CheckMethod(interfaceType, "GetEffectivePermissionsAsync");
            CheckMethod(interfaceType, "GetEffectivePermissionsBatchAsync");
            CheckMethod(interfaceType, "GetAllEffectivePermissionsAsync");
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            CheckMethod(interfaceType, "GetPermissionCountAsync");
            CheckMethod(interfaceType, "GetUserPermissionCountAsync");
            CheckMethod(interfaceType, "GetRolePermissionCountAsync");
            
            Console.WriteLine($"   ‚úì IPermissionProvider —Å–æ–¥–µ—Ä–∂–∏—Ç {interfaceType.GetMethods().Length} –º–µ—Ç–æ–¥–æ–≤");
            await Task.CompletedTask;
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤
        /// </summary>
        private void TestTypeCompatibility()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∏–ø—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            CheckType<IRedbUser>("IRedbUser");
            CheckType<RedbUser>("RedbUser");
            CheckType<_RUser>("_RUser");
            CheckType<_RRole>("_RRole");
            CheckType<_RPermission>("_RPermission");
            CheckType<_RUsersRole>("_RUsersRole");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ RedbUser —Ä–µ–∞–ª–∏–∑—É–µ—Ç IRedbUser
            if (!typeof(IRedbUser).IsAssignableFrom(typeof(RedbUser)))
            {
                throw new InvalidOperationException("RedbUser –¥–æ–ª–∂–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å IRedbUser");
            }
            
            Console.WriteLine("   ‚úì –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã");
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        /// </summary>
        private void CheckMethod(Type interfaceType, string methodName)
        {
            var methods = interfaceType.GetMethods();
            bool found = false;
            
            foreach (var method in methods)
            {
                if (method.Name == methodName)
                {
                    found = true;
                    break;
                }
            }
            
            if (!found)
            {
                throw new InvalidOperationException($"–ú–µ—Ç–æ–¥ {methodName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ {interfaceType.Name}");
            }
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–∏–ø–∞
        /// </summary>
        private void CheckType<T>(string typeName)
        {
            var type = typeof(T);
            if (type == null)
            {
                throw new InvalidOperationException($"–¢–∏–ø {typeName} –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }
            Console.WriteLine($"   ‚úì –¢–∏–ø {typeName} –Ω–∞–π–¥–µ–Ω: {type.FullName}");
        }
    }
}
