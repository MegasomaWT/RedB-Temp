using Microsoft.Extensions.Logging;
using Microsoft.EntityFrameworkCore;
using redb.Core;
using redb.Core.DBModels;
using System;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –≠—Ç–∞–ø 20: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã —É–¥–∞–ª–µ–Ω–∏—è –∏ –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤
    /// –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏—Ö ID –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–æ–≤
    /// </summary>
    public class Stage20_CurrentSystemAnalysis : BaseTestStage
    {
        public override int Order => 20;
        public override string Name => "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã";
        public override string Description => "–ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏—Ö ID, —Å–∏—Å—Ç–µ–º—ã —É–¥–∞–ª–µ–Ω–∏—è –∏ –º–µ—Å—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–∞ –¥–∂–µ–Ω–µ—Ä–∏–∫–∏";

        protected override async Task<bool> ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üîç === –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ô –°–ò–°–¢–ï–ú–´ ===");
            logger.LogInformation("");

            // 1. –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏—Ö long id
            logger.LogInformation("üìã 1. –ú–ï–¢–û–î–´ –ü–†–ò–ù–ò–ú–ê–Æ–©–ò–ï LONG ID (–∫–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–∞ –¥–∂–µ–Ω–µ—Ä–∏–∫–∏):");
            logger.LogInformation("");

            logger.LogInformation("üîπ IObjectStorageProvider:");
            logger.LogInformation("  - LoadAsync<T>(long objectId, ...) ‚úÖ –£–∂–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω");
            logger.LogInformation("  - DeleteAsync(long objectId, long userId, ...) ‚ùå –ù—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞ –Ω–∞ DeleteAsync<T>(T obj, ...)");
            logger.LogInformation("  - DeleteSubtreeAsync(long parentId, long userId, ...) ‚ùå –ù—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞ –Ω–∞ DeleteSubtreeAsync<T>(T parent, ...)");
            logger.LogInformation("");

            logger.LogInformation("üîπ ITreeProvider:");
            logger.LogInformation("  - LoadTreeAsync<T>(long rootId, ...) ‚ùå –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å LoadTreeAsync<T>(T root, ...)");
            logger.LogInformation("  - GetChildrenAsync<T>(long parentId, ...) ‚ùå –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å GetChildrenAsync<T>(T parent, ...)");
            logger.LogInformation("  - GetPathToRootAsync<T>(long objectId, ...) ‚ùå –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å GetPathToRootAsync<T>(T obj, ...)");
            logger.LogInformation("  - GetDescendantsAsync<T>(long parentId, ...) ‚ùå –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å GetDescendantsAsync<T>(T parent, ...)");
            logger.LogInformation("  - MoveObjectAsync(long objectId, long? newParentId, long userId, ...) ‚ùå –ù—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞");
            logger.LogInformation("  - CreateChildAsync<T>(..., long parentId, ...) ‚ùå –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å CreateChildAsync<T>(..., T parent, ...)");
            logger.LogInformation("");

            logger.LogInformation("üîπ IPermissionProvider:");
            logger.LogInformation("  - GetReadableObjectIds(long userId) ‚ùå –ù—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞ –Ω–∞ GetReadableObjectIds(IRedbUser user)");
            logger.LogInformation("  - CanUserEditObject(long objectId, long userId) ‚ùå –ù—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞ –Ω–∞ CanUserEditObject<T>(T obj, IRedbUser user)");
            logger.LogInformation("  - CanUserSelectObject(long objectId, long userId) ‚ùå –ù—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞");
            logger.LogInformation("  - CanUserInsertScheme(long schemeId, long userId) ‚ùå –ù—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞");
            logger.LogInformation("  - CanUserDeleteObject(long objectId, long userId) ‚ùå –ù—É–∂–Ω–∞ –∑–∞–º–µ–Ω–∞");
            logger.LogInformation("");

            // 2. –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã —É–¥–∞–ª–µ–Ω–∏—è
            logger.LogInformation("üóëÔ∏è 2. –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ –£–î–ê–õ–ï–ù–ò–Ø:");
            logger.LogInformation("");

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ _deleted_objects
                var deletedObjectsCount = await redb.RedbContext.Database
                    .SqlQueryRaw<int>("SELECT COUNT(*) as \"Value\" FROM _deleted_objects")
                    .FirstOrDefaultAsync();

                logger.LogInformation($"‚úÖ –¢–∞–±–ª–∏—Ü–∞ _deleted_objects —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–ø–∏—Å–µ–π: {deletedObjectsCount}");
                logger.LogInformation("‚úÖ –¢—Ä–∏–≥–≥–µ—Ä ftr__objects__deleted_objects –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã");
                logger.LogInformation("‚úÖ –ê—Ä—Ö–∏–≤–∏—Ä—É—é—Ç—Å—è –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ _values –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ");
                logger.LogInformation("");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if (deletedObjectsCount > 0)
                {
                    var sampleDeleted = await redb.RedbContext.Database
                        .SqlQueryRaw<string>("SELECT _values AS \"Value\" FROM _deleted_objects LIMIT 1")
                        .FirstOrDefaultAsync();

                    if (!string.IsNullOrEmpty(sampleDeleted))
                    {
                        logger.LogInformation("üìÑ –ü—Ä–∏–º–µ—Ä –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):");
                        var preview = sampleDeleted.Length > 200 ? sampleDeleted.Substring(0, 200) + "..." : sampleDeleted;
                        logger.LogInformation($"  {preview}");
                        logger.LogInformation("");
                    }
                }
            }
            catch (Exception ex)
            {
                logger.LogWarning($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∏—Å—Ç–µ–º—ã —É–¥–∞–ª–µ–Ω–∏—è: {ex.Message}");
            }

            // 3. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è userId
            logger.LogInformation("üë§ 3. –ê–ù–ê–õ–ò–ó –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø USERID:");
            logger.LogInformation("");

            logger.LogInformation("üîπ –¢–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:");
            logger.LogInformation("  - –í–µ–∑–¥–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è long userId –≤–º–µ—Å—Ç–æ IRedbUser");
            logger.LogInformation("  - –ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            logger.LogInformation("  - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ö–∞—Ä–¥–∫–æ–¥ sys ID: 0");
            logger.LogInformation("  - –ù–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ owner_id –∏ who_change_id");
            logger.LogInformation("  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —á–∞—Å—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (checkPermissions: false)");
            logger.LogInformation("");

            // 4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
            logger.LogInformation("üí° 4. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:");
            logger.LogInformation("");

            logger.LogInformation("üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:");
            logger.LogInformation("  - –°–æ–∑–¥–∞—Ç—å IRedbSecurityContext —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
            logger.LogInformation("  - –î–æ–±–∞–≤–∏—Ç—å fallback –∫ sys (0)");
            logger.LogInformation("  - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å SystemContext –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π");
            logger.LogInformation("");

            logger.LogInformation("üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2 - –ö—Ä–∞—Å–∏–≤—ã–µ –º–µ—Ç–æ–¥—ã:");
            logger.LogInformation("  - SaveAsync<T>(RedbObject<T> obj) - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ");
            logger.LogInformation("  - DeleteAsync<T>(T obj) - –∏–∑–≤–ª–µ–∫–∞–µ—Ç ID –∏–∑ –æ–±—ä–µ–∫—Ç–∞");
            logger.LogInformation("  - LoadAsync<T>(long id) - —É–∂–µ —Ö–æ—Ä–æ—à–æ, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å");
            logger.LogInformation("");

            logger.LogInformation("üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3 - –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:");
            logger.LogInformation("  - –°—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–º–µ—Ç–∏—Ç—å [Obsolete] –Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏");
            logger.LogInformation("  - –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–º–∏");
            logger.LogInformation("");

            // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤ sys
            logger.LogInformation("üîê 5. –ü–†–û–í–ï–†–ö–ê –ì–õ–û–ë–ê–õ–¨–ù–´–• –ü–†–ê–í sys:");
            logger.LogInformation("");

            try
            {
                var adminPermissions = await redb.RedbContext.Database
                    .SqlQueryRaw<string>(
                        "SELECT CONCAT('User: ', _id_user, ', Ref: ', _id_ref, ', Rights: ', " +
                        "CASE WHEN _select THEN 'R' ELSE '-' END || " +
                        "CASE WHEN _insert THEN 'I' ELSE '-' END || " +
                        "CASE WHEN _update THEN 'U' ELSE '-' END || " +
                        "CASE WHEN _delete THEN 'D' ELSE '-' END) as \"Value\" " +
                        "FROM _permissions WHERE _id_user = 0 AND _id_ref = 0")
                    .FirstOrDefaultAsync();

                if (!string.IsNullOrEmpty(adminPermissions))
                {
                    logger.LogInformation($"‚úÖ sys –∏–º–µ–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞: {adminPermissions}");
                }
                else
                {
                    logger.LogWarning("‚ö†Ô∏è sys –Ω–µ –∏–º–µ–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤! –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π.");
                }
            }
            catch (Exception ex)
            {
                logger.LogWarning($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ sys: {ex.Message}");
            }

            logger.LogInformation("");
            logger.LogInformation("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω!");
            logger.LogInformation("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π");

            return true;
        }
    }
}
