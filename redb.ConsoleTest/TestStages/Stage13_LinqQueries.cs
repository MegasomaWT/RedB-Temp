using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.DBModels;
using redb.Core.Models.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –≠—Ç–∞–ø 13: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LINQ-–∑–∞–ø—Ä–æ—Å–æ–≤
    /// </summary>
    public class Stage13_LinqQueries : BaseTestStage
    {
        public override string Name => "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –°–õ–û–ñ–ù–´–• LINQ-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –º–∞—Å—Å–∏–≤–∞–º–∏";
        public override string Description => "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö LINQ-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ REDB —Å–æ —Å–ª–æ–∂–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ –º–∞—Å—Å–∏–≤–∞–º–∏";
        public override int Order => 13;

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üìù –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LINQ-–∑–∞–ø—Ä–æ—Å–æ–≤...");
            
            // –°–æ–∑–¥–∞–µ–º/—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ö–µ–º—É –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Å –º–∞—Å—Å–∏–≤–∞–º–∏
            var schemeId = await redb.SyncSchemeAsync<MixedTestProps>();
            logger.LogInformation($"‚úÖ –°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞: {nameof(MixedTestProps)}, ID: {schemeId}");

            logger.LogInformation("üì¶ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...");
            
            // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏ (–∏–∑ Stage 5)
            var testDate = new DateTime(2025, 1, 15, 10, 30, 0);
            var products = new[]
            {
                new RedbObject<MixedTestProps> 
                { 
                    scheme_id = schemeId.Id,
                    name = "Mixed Object 1",
                    owner_id = 0,
                    who_change_id = 0,
                    date_create = DateTime.Now,
                    date_modify = DateTime.Now,
                    properties = new MixedTestProps { 
                        Age = 30, Name = "John Doe", Date = testDate, Article = "Article 1", Stock = 150, Tag = "mixed-test",
                        Tags1 = new[] { "developer", "senior", "fullstack" },
                        Scores1 = new[] { 85, 92, 78 },
                        Tags2 = new[] { "secondary", "tags" },
                        Scores2 = new[] { 33, 22 },
                        Address1 = new Address { 
                            City = "Moscow", Street = "Main Street 123",
                            Details = new Details { 
                                Floor = 5, Building = "Building A",
                                Tags1 = new[] { "moscow", "main-street", "building-a" },
                                Scores1 = new[] { 95, 87, 92 }
                            }
                        },
                        Contacts = new[] {
                            new Contact { Type = "email", Value = "john@example.com", Verified = true },
                            new Contact { Type = "phone", Value = "+7-999-123-45-67", Verified = false }
                        }
                    }
                },
                new RedbObject<MixedTestProps> 
                { 
                    scheme_id = schemeId.Id,
                    name = "Mixed Object 2", 
                    owner_id = 0,
                    who_change_id = 0,
                    date_create = DateTime.Now,
                    date_modify = DateTime.Now,
                    properties = new MixedTestProps { 
                        Age = 25, Name = "Jane Smith", Date = testDate.AddDays(1), Article = "Article 2", Stock = 80, Tag = "test-user",
                        Tags1 = new[] { "designer", "junior" },
                        Scores1 = new[] { 70, 88 },
                        Tags2 = new[] { "creative" },
                        Scores2 = new[] { 45 }
                    }
                },
                new RedbObject<MixedTestProps> 
                { 
                    scheme_id = schemeId.Id,
                    name = "Mixed Object 3", 
                    owner_id = 0,
                    who_change_id = 0,
                    date_create = DateTime.Now,
                    date_modify = DateTime.Now,
                    properties = new MixedTestProps { 
                        Age = 35, Name = "Mike Johnson", Date = testDate, Article = "Article 3", Stock = 50, Tag = "complex-test",
                        Tags1 = new[] { "manager", "team-lead", "senior" },
                        Scores1 = new[] { 95, 100, 85, 90 },
                        Tags2 = new string[0], // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
                        Scores2 = new int[0]   // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
                    }
                }
            };

            var productIds = new List<long>();
            foreach (var product in products)
            {
                try
                {
                    var id = await redb.SaveAsync(product);
                    productIds.Add(id);
                    logger.LogInformation($"  üì¶ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {product.name} (ID: {id})");
                    
                    // üî• –í–†–ï–ú–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–ó–î–ê–ù–ù–´–• –û–ë–™–ï–ö–¢–û–í
                    Console.WriteLine($"üî• CREATED: {product.name} -> Age={product.properties.Age}, Stock={product.properties.Stock}, Tags1={string.Join(",", product.properties.Tags1)}");
                }
                catch (Exception ex)
                {
                    logger.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product.name}: {ex.Message}");
                    logger.LogError($"StackTrace: {ex.StackTrace}");
                    throw;
                }
            }

            logger.LogInformation("");
            logger.LogInformation("üîç === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LINQ-–ó–ê–ü–†–û–°–û–í ===");

            // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π Where (Stock > 100)
            logger.LogInformation("üìã –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π Where (Stock > 100)");
            try
            {
                var query = await redb.QueryAsync<MixedTestProps>();
                var highStockProducts = await query
                    .Where(p => p.Stock > 100)
                    .ToListAsync();

                logger.LogInformation($"‚úÖ –ù–∞–π–¥–µ–Ω–æ {highStockProducts.Count} –æ–±—ä–µ–∫—Ç–æ–≤ —Å Stock > 100:");
                foreach (var product in highStockProducts)
                {
                    logger.LogInformation($"  - {product.name}: Stock = {product.properties.Stock}");
                }
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 1: {ex.Message}");
                logger.LogError($"StackTrace: {ex.StackTrace}");
            }

            // –¢–µ—Å—Ç 2: –°–ª–æ–∂–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ AND (Age –∏ Stock)
            logger.LogInformation("");
            logger.LogInformation("üìã –¢–µ—Å—Ç 2: –°–ª–æ–∂–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ (Age >= 30 AND Stock >= 100)");
            try
            {
                var query = await redb.QueryAsync<MixedTestProps>();
                var experienced = await query
                    .Where(p => p.Age >= 30 && p.Stock >= 100)
                    .ToListAsync();

                logger.LogInformation($"‚úÖ –ù–∞–π–¥–µ–Ω–æ {experienced.Count} –æ–ø—ã—Ç–Ω—ã—Ö —Å –±–æ–ª—å—à–∏–º Stock:");
                foreach (var product in experienced)
                {
                    logger.LogInformation($"  - {product.name}: Age = {product.properties.Age}, Stock = {product.properties.Stock}");
                }
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 2: {ex.Message}");
                logger.LogError($"StackTrace: {ex.StackTrace}");
            }

            // –¢–µ—Å—Ç 3: Count
            logger.LogInformation("");
            logger.LogInformation("üìã –¢–µ—Å—Ç 3: –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π (CountAsync)");
            try
            {
                var query = await redb.QueryAsync<MixedTestProps>();
                var totalCount = await query.CountAsync();
                var youngCount = await query.Where(p => p.Age < 30).CountAsync();

                logger.LogInformation($"‚úÖ –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {totalCount}");
                logger.LogInformation($"‚úÖ –ú–æ–ª–æ–¥—ã—Ö (Age < 30): {youngCount}");
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 3: {ex.Message}");
                logger.LogError($"StackTrace: {ex.StackTrace}");
            }

            // ===== –¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û–†–Ø–î–ö–ê (–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´) =====
            logger.LogInformation("");
            logger.LogInformation("üêõ === –¢–ï–°–¢ –ü–†–û–ë–õ–ï–ú–´ –ü–û–†–Ø–î–ö–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò ===");
            
            // –¢–µ—Å—Ç 4: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤ - –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É Tags1
            logger.LogInformation("üìã –¢–µ—Å—Ç 4: –ú–ê–°–°–ò–í–´ - –ø–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö 'senior' –≤ Tags1");
            try
            {
                var query4 = await redb.QueryAsync<MixedTestProps>();
                
                // üî• –¢–ï–°–¢–ò–†–£–ï–ú –ú–ê–°–°–ò–í–´ - –ø–æ–∫–∞ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
                logger.LogInformation("  ‚ö†Ô∏è –í–†–ï–ú–ï–ù–ù–û: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Tags1 (–ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)");
                var withTags = await query4.Where(p => p.Name != "").ToListAsync(); // –í—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å –∏–º–µ–Ω–∞–º–∏
                logger.LogInformation($"  –û–±—ä–µ–∫—Ç—ã —Å Tags1: –Ω–∞–π–¥–µ–Ω–æ {withTags.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                foreach (var item in withTags.Take(3))
                {
                    logger.LogInformation($"    ‚Ä¢ {item.name}: Tags1=[{string.Join(", ", item.properties.Tags1)}]");
                }
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 4: {ex.Message}");
            }

            // –¢–µ—Å—Ç 5: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ Age –∏ Date
            logger.LogInformation("");
            logger.LogInformation("üìã –¢–µ—Å—Ç 5: Age –∏ Date (Age >= 30 AND Date == 2025-01-15)");
            try
            {
                var query5 = await redb.QueryAsync<MixedTestProps>();
                var step1 = await query5.Where(p => p.Age >= 30).ToListAsync();
                logger.LogInformation($"  –®–∞–≥ 1 - Age >= 30: –Ω–∞–π–¥–µ–Ω–æ {step1.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                
                query5 = query5.Where(p => p.Age >= 30);
                var step2 = await query5.Where(p => p.Date == testDate).ToListAsync();
                logger.LogInformation($"  –®–∞–≥ 2 - Date == {testDate:yyyy-MM-dd}: –Ω–∞–π–¥–µ–Ω–æ {step2.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                foreach (var item in step2)
                {
                    logger.LogInformation($"    ‚Ä¢ {item.name}: Age={item.properties.Age}, Date={item.properties.Date:yyyy-MM-dd}");
                }
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 5: {ex.Message}");
            }

            // ===== –°–õ–û–ñ–ù–´–ï LINQ –¢–ï–°–¢–´ (–†–ê–°–®–ò–†–ï–ù–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò) =====
            logger.LogInformation("");
            logger.LogInformation("üöÄ === –°–õ–û–ñ–ù–´–ï LINQ –¢–ï–°–¢–´ ===");
            
            // –¢–µ—Å—Ç 6: –î–∏–∞–ø–∞–∑–æ–Ω—ã - Stock –º–µ–∂–¥—É 60 –∏ 120  
            logger.LogInformation("üìã –¢–µ—Å—Ç 6: –î–∏–∞–ø–∞–∑–æ–Ω Stock (60 < Stock < 120)");
            try
            {
                var query6 = await redb.QueryAsync<MixedTestProps>();
                var stockRange = await query6
                    .Where(p => p.Stock > 60 && p.Stock < 120)
                    .ToListAsync();
                logger.LogInformation($"  –î–∏–∞–ø–∞–∑–æ–Ω Stock 60-120: –Ω–∞–π–¥–µ–Ω–æ {stockRange.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                foreach (var item in stockRange.Take(3))
                {
                    logger.LogInformation($"    ‚Ä¢ {item.name}: Stock={item.properties.Stock}");
                }
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 6: {ex.Message}");
            }

            // –¢–µ—Å—Ç 7: DateTime –¥–∏–∞–ø–∞–∑–æ–Ω - Date >= 2025-01-15
            logger.LogInformation("üìã –¢–µ—Å—Ç 7: DateTime –¥–∏–∞–ø–∞–∑–æ–Ω (Date >= 2025-01-15)");
            try
            {
                var query7 = await redb.QueryAsync<MixedTestProps>();
                var dateRange = await query7
                    .Where(p => p.Date >= new DateTime(2025, 1, 15))
                    .ToListAsync();
                logger.LogInformation($"  DateTime >= 2025-01-15: –Ω–∞–π–¥–µ–Ω–æ {dateRange.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                foreach (var item in dateRange.Take(4))
                {
                    logger.LogInformation($"    ‚Ä¢ {item.name}: Date={item.properties.Date:yyyy-MM-dd}");
                }
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 7: {ex.Message}");
            }

            // –¢–µ—Å—Ç 8: –°–ª–æ–∂–Ω—ã–π OR —Ñ–∏–ª—å—Ç—Ä - –º–æ–ª–æ–¥—ã–µ –ò–õ–ò —Å –±–æ–ª—å—à–∏–º Stock
            logger.LogInformation("üìã –¢–µ—Å—Ç 8: –°–ª–æ–∂–Ω—ã–π OR (Age < 30 –ò–õ–ò Stock > 100)");
            try
            {
                var query8 = await redb.QueryAsync<MixedTestProps>();
                var complexOr = await query8
                    .Where(p => p.Age < 30 || p.Stock > 100)
                    .ToListAsync();
                logger.LogInformation($"  OR —É—Å–ª–æ–≤–∏–µ: –Ω–∞–π–¥–µ–Ω–æ {complexOr.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                foreach (var item in complexOr.Take(5))
                {
                    logger.LogInformation($"    ‚Ä¢ {item.name}: Age={item.properties.Age}, Stock={item.properties.Stock}");
                }
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 8: {ex.Message}");
            }

            // –¢–µ—Å—Ç 9: –¢—Ä–æ–π–Ω–æ–π AND —Ñ–∏–ª—å—Ç—Ä - Name –∏ Age –∏ Stock
            logger.LogInformation("üìã –¢–µ—Å—Ç 9: –¢—Ä–æ–π–Ω–æ–π AND (Name != '' AND Age >= 30 AND Stock > 100)");
            try
            {
                var query9 = await redb.QueryAsync<MixedTestProps>();
                var tripleAnd = await query9
                    .Where(p => p.Name != "" && p.Age >= 30 && p.Stock > 100)
                    .ToListAsync();
                logger.LogInformation($"  –¢—Ä–æ–π–Ω–æ–π AND: –Ω–∞–π–¥–µ–Ω–æ {tripleAnd.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                foreach (var item in tripleAnd.Take(3))
                {
                    logger.LogInformation($"    ‚Ä¢ {item.name}: Name={item.properties.Name}, Age={item.properties.Age}, Stock={item.properties.Stock}");
                }
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 9: {ex.Message}");
            }

            // –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ NOT (–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞) - –ù–ï "John Doe"
            logger.LogInformation("üìã –¢–µ—Å—Ç 10: NOT –ª–æ–≥–∏–∫–∞ (Name != 'John Doe')");
            try
            {
                var query10 = await redb.QueryAsync<MixedTestProps>();
                var notJohn = await query10
                    .Where(p => p.Name != "John Doe")
                    .ToListAsync();
                logger.LogInformation($"  NOT John Doe: –Ω–∞–π–¥–µ–Ω–æ {notJohn.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                foreach (var item in notJohn.Take(4))
                {
                    logger.LogInformation($"    ‚Ä¢ {item.name}: Name={item.properties.Name}");
                }
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 10: {ex.Message}");
            }

            // –¢–µ—Å—Ç 11: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å –º–∞—Å—Å–∏–≤–∞–º–∏ - —Å–æ—á–µ—Ç–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
            logger.LogInformation("üìã –¢–µ—Å—Ç 11: –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô —Å –ú–ê–°–°–ò–í–ê–ú–ò (Age>=30 AND Stock>60 AND Name —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º–µ–Ω–∞)");
            try
            {
                var query11 = await redb.QueryAsync<MixedTestProps>();
                var complex = await query11
                    .Where(p => p.Age >= 30 && p.Stock > 60 && p.Name != "")
                    .ToListAsync();
                logger.LogInformation($"  –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä: –Ω–∞–π–¥–µ–Ω–æ {complex.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                foreach (var item in complex.Take(6))
                {
                    logger.LogInformation($"    ‚Ä¢ {item.name}: Age={item.properties.Age}, Stock={item.properties.Stock}, Tags1=[{string.Join(",", item.properties.Tags1)}]");
                }
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 11: {ex.Message}");
            }

            // –¢–µ—Å—Ç 12: –ü–†–û–í–ï–†–Ø–ï–ú –°–¢–ê–ù–î–ê–†–¢–ù–´–ô LINQ –î–õ–Ø –ú–ê–°–°–ò–í–û–í
            logger.LogInformation("üìã –¢–µ—Å—Ç 12: –°–¢–ê–ù–î–ê–†–¢–ù–´–ô LINQ - array.Contains() —Å–∏–Ω—Ç–∞–∫—Å–∏—Å");
            try
            {
                var query12 = await redb.QueryAsync<MixedTestProps>();
                
                // üß™ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–´–ô –¢–ï–°–¢: p.Tags1.Contains("senior")
                logger.LogInformation("  üß™ –¢–ï–°–¢: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π .Contains() –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤...");
                
                // –ü–†–û–ë–£–ï–ú –°–¢–ê–ù–î–ê–†–¢–ù–´–ô LINQ –°–ò–ù–¢–ê–ö–°–ò–°:
                // query.Where(p => p.Tags1.Contains("senior"))
                
                // –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Å—Å–∏–≤–æ–≤ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
                var allObjects = await query12.ToListAsync();
                logger.LogInformation($"  üìä –ú–ê–°–°–ò–í–´ –í –û–ë–™–ï–ö–¢–ê–• (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Contains):");
                foreach (var item in allObjects.Take(3))
                {
                    logger.LogInformation($"    üîç {item.name}:");
                    logger.LogInformation($"      Tags1: [{string.Join(", ", item.properties.Tags1)}]");
                    logger.LogInformation($"      Scores1: [{string.Join(", ", item.properties.Scores1)}]");
                    logger.LogInformation($"      Tags2: [{string.Join(", ", item.properties.Tags2)}]");
                    
                    // –õ–û–ì–ò–ö–ê –¢–ï–°–¢–ê: Mixed Object 1 –∏ 3 —Å–æ–¥–µ—Ä–∂–∞—Ç "senior"
                    var containsSenior = item.properties.Tags1.Contains("senior");
                    logger.LogInformation($"      Contains('senior'): {containsSenior}");
                }
                
                logger.LogInformation("  üí° –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ —Ç–µ—Å—Ç—É: p.Tags1.Contains('senior') –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ 2 –æ–±—ä–µ–∫—Ç–∞");
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 12: {ex.Message}");
            }

            // –¢–µ—Å—Ç 13: –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–´–ô - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π array.Contains()
            logger.LogInformation("üìã –¢–µ—Å—Ç 13: –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π .Contains() —Å–∏–Ω—Ç–∞–∫—Å–∏—Å");
            try
            {
                logger.LogInformation("  üß™ –ü–û–ü–´–¢–ö–ê: query.Where(p => p.Tags1.Contains('senior'))");
                
                var query13 = await redb.QueryAsync<MixedTestProps>();
                // ‚ö†Ô∏è –†–ò–°–ö–û–í–ê–ù–ù–´–ô –¢–ï–°–¢ - –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å!
                var containsTest = await query13
                    .Where(p => p.Tags1.Contains("senior"))
                    .ToListAsync();
                
                logger.LogInformation($"  üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ {containsTest.Count} –æ–±—ä–µ–∫—Ç–æ–≤ —Å 'senior' –≤ Tags1:");
                foreach (var item in containsTest)
                {
                    logger.LogInformation($"    ‚Ä¢ {item.name}: Tags1=[{string.Join(", ", item.properties.Tags1)}]");
                }
            }
            catch (Exception ex)
            {
                logger.LogInformation($"  ‚ùå –°–¢–ê–ù–î–ê–†–¢–ù–´–ô LINQ –ù–ï –†–ê–ë–û–¢–ê–ï–¢: {ex.Message}");
                logger.LogInformation("  üí° –ù—É–∂–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã WhereArrayContains()");
            }

            // üöÄ === –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –°–õ–û–ñ–ù–´–ï –¢–ï–°–¢–´ ===
            logger.LogInformation("");
            logger.LogInformation("üöÄ === –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –°–õ–û–ñ–ù–´–ï –¢–ï–°–¢–´ –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ ===");

            // –¢–µ—Å—Ç 14: –ö–†–ê–°–ò–í–´–ï –õ–Ø–ú–ë–î–´ - —Å–ª–æ–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å –º–∞—Å—Å–∏–≤–∞–º–∏ –∏ –¥–∞—Ç–∞–º–∏
            logger.LogInformation("üìã –¢–µ—Å—Ç 14: –ö–†–ê–°–ò–í–´–ï –õ–Ø–ú–ë–î–´ - —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –º–∞—Å—Å–∏–≤–∞–º–∏");
            try
            {
                var query14 = await redb.QueryAsync<MixedTestProps>();
                var complexLambda = await query14
                    .Where(p => p.Tags1.Contains("senior") && p.Age >= 30 && p.Stock > 60)
                    .ToListAsync();
                logger.LogInformation($"  üåü –õ–Ø–ú–ë–î–ê –ö–†–ê–°–û–¢–ê: –Ω–∞–π–¥–µ–Ω–æ {complexLambda.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                foreach (var item in complexLambda.Take(2))
                {
                    logger.LogInformation($"    ‚Ä¢ {item.name}: Tags1=[{string.Join(",", item.properties.Tags1)}]");
                }
            }
            catch (Exception ex)
            {
                logger.LogInformation($"  ‚ùå –õ–Ø–ú–ë–î–ê: {ex.Message}");
            }

            // –¢–µ—Å—Ç 15: –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–´–ï –õ–Ø–ú–ë–î–´ - DateTime + –º–∞—Å—Å–∏–≤—ã + –ª–æ–≥–∏–∫–∞
            logger.LogInformation("üìã –¢–µ—Å—Ç 15: DATETIME –õ–Ø–ú–ë–î–´ - –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–∞—Ç –∏ –º–∞—Å—Å–∏–≤—ã");
            try
            {
                var query15 = await redb.QueryAsync<MixedTestProps>();
                var startDate = new DateTime(2025, 1, 15);
                var endDate = new DateTime(2025, 1, 17);
                
                var dateTimeLambda = await query15
                    .Where(p => p.Date >= startDate && p.Date < endDate && p.Tags1.Contains("senior"))
                    .ToListAsync();
                logger.LogInformation($"  üìÖ DATETIME –õ–Ø–ú–ë–î–´: –Ω–∞–π–¥–µ–Ω–æ {dateTimeLambda.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                foreach (var item in dateTimeLambda.Take(2))
                {
                    logger.LogInformation($"    ‚Ä¢ {item.name}: Date={item.properties.Date:yyyy-MM-dd}");
                }
            }
            catch (Exception ex)
            {
                logger.LogInformation($"  ‚ùå DATETIME –õ–Ø–ú–ë–î–´: {ex.Message}");
            }

            // –¢–µ—Å—Ç 16: –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ï –õ–Ø–ú–ë–î–´ - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ Contains() + DateTime
            logger.LogInformation("üìã –¢–µ—Å—Ç 16: –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ï –õ–Ø–ú–ë–î–´ - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ Contains()");
            try
            {
                var query16 = await redb.QueryAsync<MixedTestProps>();
                var startDate = new DateTime(2025, 1, 15);
                var endDate = new DateTime(2025, 1, 17);
                
                var multipleContains = await query16
                    .Where(p => (p.Tags1.Contains("senior") || p.Tags1.Contains("developer") || p.Tags1.Contains("manager")) &&
                               p.Age >= 25 && p.Age <= 40 &&
                               p.Date >= startDate && p.Date < endDate &&
                               p.Stock > 40 &&
                               p.Name != "")
                    .ToListAsync();
                logger.LogInformation($"  üî• –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï CONTAINS: –Ω–∞–π–¥–µ–Ω–æ {multipleContains.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                foreach (var item in multipleContains.Take(3))
                {
                    logger.LogInformation($"    ‚Ä¢ {item.name}: Tags1=[{string.Join(",", item.properties.Tags1)}], Age={item.properties.Age}");
                }
            }
            catch (Exception ex)
            {
                logger.LogInformation($"  ‚ùå –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï CONTAINS: {ex.Message}");
            }

            // –¢–µ—Å—Ç 17: –°–£–ü–ï–†-–°–õ–û–ñ–ù–´–ô –õ–Ø–ú–ë–î–´ - –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –ª–æ–≥–∏–∫–∞
            logger.LogInformation("üìã –¢–µ—Å—Ç 17: –°–£–ü–ï–†-–°–õ–û–ñ–ù–´–ô –õ–Ø–ú–ë–î–´ - OR + AND + Contains");
            try
            {
                var query17 = await redb.QueryAsync<MixedTestProps>();
                var startDate = new DateTime(2025, 1, 15);
                
                var superComplexQuery = await query17
                    .Where(p => (p.Tags1.Contains("senior") || p.Tags1.Contains("manager")) && 
                               p.Age >= 25 && 
                               p.Date >= startDate && 
                               !p.Tags1.Contains("junior"))
                    .ToListAsync();
                    
                logger.LogInformation($"  üéØ –°–£–ü–ï–†-–°–õ–û–ñ–ù–´–ô: –Ω–∞–π–¥–µ–Ω–æ {superComplexQuery.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                foreach (var item in superComplexQuery.Take(3))
                {
                    logger.LogInformation($"    ‚Ä¢ {item.name}: Age={item.properties.Age}, Tags1=[{string.Join(",", item.properties.Tags1)}]");
                }
            }
            catch (Exception ex)
            {
                logger.LogInformation($"  ‚ùå –°–£–ü–ï–†-–°–õ–û–ñ–ù–´–ô: {ex.Message}");
            }

            // –¢–µ—Å—Ç 18: –ö–†–ê–°–ò–í–´–ï –õ–Ø–ú–ë–î–´ - –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
            logger.LogInformation("üìã –¢–µ—Å—Ç 18: –ö–†–ê–°–ò–í–´–ï –õ–Ø–ú–ë–î–´ - –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ª–æ–≥–∏–∫–∞");
            try
            {
                var query18 = await redb.QueryAsync<MixedTestProps>();
                var startDate = new DateTime(2025, 1, 15);
                
                var complexLambdaQuery = await query18
                    .Where(p => p.Name.Contains("e") && 
                               p.Age >= 25 && p.Age <= 40 && 
                               p.Stock > 40 && 
                               p.Date >= startDate)
                    .ToListAsync();
                    
                logger.LogInformation($"  üé≠ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –õ–Ø–ú–ë–î–´: –Ω–∞–π–¥–µ–Ω–æ {complexLambdaQuery.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                foreach (var item in complexLambdaQuery.Take(2))
                {
                    logger.LogInformation($"    ‚Ä¢ {item.name}: Age={item.properties.Age}, Stock={item.properties.Stock}");
                }
            }
            catch (Exception ex)
            {
                logger.LogInformation($"  ‚ùå –ö–û–ú–ü–õ–ï–ö–°–ù–´–ï –õ–Ø–ú–ë–î–´: {ex.Message}");
            }

            // –¢–µ—Å—Ç 19: –ë–ï–ó–£–ú–ù–û –°–õ–û–ñ–ù–´–ï –õ–Ø–ú–ë–î–´ - –≤–ª–æ–∂–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å –º–∞—Å—Å–∏–≤–∞–º–∏
            logger.LogInformation("üìã –¢–µ—Å—Ç 19: –ë–ï–ó–£–ú–ù–û –°–õ–û–ñ–ù–´–ï –õ–Ø–ú–ë–î–´ - –≤–ª–æ–∂–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞");
            try
            {
                var query19 = await redb.QueryAsync<MixedTestProps>();
                
                var insaneLambda = await query19
                    .Where(p => 
                        // –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å Contains
                        (p.Tags1.Contains("senior") && !p.Tags1.Contains("junior")) ||
                        (p.Tags1.Contains("developer") && p.Stock > 100) ||
                        (p.Tags1.Contains("manager") && p.Age >= 35) &&
                        // DateTime —É—Å–ª–æ–≤–∏—è
                        p.Date >= new DateTime(2025, 1, 15) &&
                        // –ß–∏—Å–ª–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
                        ((p.Age >= 25 && p.Age <= 35) || (p.Stock >= 50 && p.Stock <= 200)) &&
                        // –°—Ç—Ä–æ–∫–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
                        p.Name != "" && p.Name.Contains("e")
                    )
                    .ToListAsync();
                    
                logger.LogInformation($"  ü§Ø –ë–ï–ó–£–ú–ù–û –°–õ–û–ñ–ù–´–ï: –Ω–∞–π–¥–µ–Ω–æ {insaneLambda.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                foreach (var item in insaneLambda.Take(2))
                {
                    logger.LogInformation($"    ‚Ä¢ {item.name}: Age={item.properties.Age}, Stock={item.properties.Stock}, Tags1=[{string.Join(",", item.properties.Tags1)}]");
                }
            }
            catch (Exception ex)
            {
                logger.LogInformation($"  ‚ùå –ë–ï–ó–£–ú–ù–û –°–õ–û–ñ–ù–´–ï: {ex.Message}");
            }

            // –¢–µ—Å—Ç 20: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–ï–ó–£–ú–ù–´–ï –õ–Ø–ú–ë–î–´ - –ø—Ä–µ–¥–µ–ª —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            logger.LogInformation("üìã –¢–µ—Å—Ç 20: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–ï–ó–£–ú–ù–´–ï –õ–Ø–ú–ë–î–´ - –ø—Ä–µ–¥–µ–ª —Å–ª–æ–∂–Ω–æ—Å—Ç–∏");
            try
            {
                var query20 = await redb.QueryAsync<MixedTestProps>();
                var now = DateTime.Now;
                var startYear = new DateTime(2025, 1, 1);
                var endYear = new DateTime(2025, 12, 31);
                
                var insaneComplexity = await query20
                    .Where(p => 
                        // üî• –£–†–û–í–ï–ù–¨ 1: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã
                        ((p.Tags1.Contains("senior") && p.Tags2.Contains("secondary")) ||
                         (p.Tags1.Contains("developer") && !p.Tags1.Contains("intern")) ||
                         (p.Tags1.Contains("manager") && p.Tags1.Contains("team-lead"))) &&
                        
                        // üî• –£–†–û–í–ï–ù–¨ 2: –°–ª–æ–∂–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã  
                        ((p.Age >= 25 && p.Age <= 35 && p.Stock > 50) ||
                         (p.Age >= 30 && p.Age <= 40 && p.Stock > 100) ||
                         (p.Age == 35 && p.Stock != 80)) &&
                        
                        // üî• –£–†–û–í–ï–ù–¨ 3: DateTime —Å –ª–æ–≥–∏–∫–æ–π
                        p.Date >= startYear && p.Date <= endYear &&
                        p.Date >= new DateTime(2025, 1, 15) &&
                        
                        // üî• –£–†–û–í–ï–ù–¨ 4: –°—Ç—Ä–æ–∫–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
                        p.Name != null && p.Name != "" && 
                        (p.Name.Contains("e") || p.Name.Contains("o")) &&
                        p.Name.Length > 3 &&
                        
                        // üî• –£–†–û–í–ï–ù–¨ 5: –û—Ç—Ä–∏—Ü–∞–Ω–∏—è
                        !p.Tags1.Contains("banned") &&
                        !p.Tags1.Contains("test-only") &&
                        !(p.Stock == 0 || p.Age == 0)
                    )
                    .ToListAsync();
                    
                logger.LogInformation($"  ü§Ø –ë–ï–ó–£–ú–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨: –Ω–∞–π–¥–µ–Ω–æ {insaneComplexity.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                foreach (var item in insaneComplexity)
                {
                    logger.LogInformation($"    ‚Ä¢ {item.name}: Age={item.properties.Age}, Stock={item.properties.Stock}");
                    logger.LogInformation($"      Tags1=[{string.Join(",", item.properties.Tags1)}]");
                    logger.LogInformation($"      Tags2=[{string.Join(",", item.properties.Tags2)}]");
                    logger.LogInformation($"      Date={item.properties.Date:yyyy-MM-dd}");
                }
            }
            catch (Exception ex)
            {
                logger.LogInformation($"  ‚ùå –ë–ï–ó–£–ú–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨: {ex.Message}");
            }

            // –¢–µ—Å—Ç 21: –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–ï –§–ò–õ–¨–¢–†–´ - —Ü–µ–ø–æ—á–∫–∞ Where()
            logger.LogInformation("üìã –¢–µ—Å—Ç 21: –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–ï –§–ò–õ–¨–¢–†–´ - —Ü–µ–ø–æ—á–∫–∞ Where()");
            try
            {
                var query21 = await redb.QueryAsync<MixedTestProps>();
                
                var chainedQuery = await query21
                    .Where(p => p.Age >= 25)                    // –§–∏–ª—å—Ç—Ä 1
                    .Where(p => p.Stock > 40)                   // –§–∏–ª—å—Ç—Ä 2  
                    .Where(p => p.Tags1.Contains("senior"))     // –§–∏–ª—å—Ç—Ä 3
                    .Where(p => p.Date >= new DateTime(2025, 1, 15)) // –§–∏–ª—å—Ç—Ä 4
                    .Where(p => p.Name.Contains("e"))           // –§–∏–ª—å—Ç—Ä 5
                    .ToListAsync();
                    
                logger.LogInformation($"  ‚õìÔ∏è –¶–ï–ü–û–ß–ö–ê –§–ò–õ–¨–¢–†–û–í: –Ω–∞–π–¥–µ–Ω–æ {chainedQuery.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                foreach (var item in chainedQuery)
                {
                    logger.LogInformation($"    ‚Ä¢ {item.name}: –ø—Ä–æ—à–µ–ª 5 —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–¥—Ä—è–¥!");
                }
            }
            catch (Exception ex)
            {
                logger.LogInformation($"  ‚ùå –¶–ï–ü–û–ß–ö–ê –§–ò–õ–¨–¢–†–û–í: {ex.Message}");
            }

            // –¢–µ—Å—Ç 22: –ù–û–í–´–ô API - WithMaxRecursionDepth() –ø—Ä–æ–≤–µ—Ä–∫–∞
            logger.LogInformation("üìã –¢–µ—Å—Ç 22: –ù–û–í–´–ô API - WithMaxRecursionDepth() —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ");
            try
            {
                var query22 = await redb.QueryAsync<MixedTestProps>();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å DEFAULT –∑–Ω–∞—á–µ–Ω–∏–µ–º (10)
                var defaultDepthQuery = await query22
                    .Where(p => p.Tags1.Contains("senior") && p.Age >= 25)
                    .ToListAsync();
                logger.LogInformation($"  üîß DEFAULT DEPTH (10): –Ω–∞–π–¥–µ–Ω–æ {defaultDepthQuery.Count} –æ–±—ä–µ–∫—Ç–æ–≤");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ö–ê–°–¢–û–ú–ù–´–ú –∑–Ω–∞—á–µ–Ω–∏–µ–º (15)
                var query22b = await redb.QueryAsync<MixedTestProps>();
                var customDepthQuery = await query22b
                    .Where(p => (p.Tags1.Contains("senior") || p.Tags1.Contains("developer")) && p.Age >= 25)
                    .WithMaxRecursionDepth(15)
                    .ToListAsync();
                logger.LogInformation($"  üöÄ CUSTOM DEPTH (15): –Ω–∞–π–¥–µ–Ω–æ {customDepthQuery.Count} –æ–±—ä–µ–∫—Ç–æ–≤");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ú–ê–õ–´–ú –∑–Ω–∞—á–µ–Ω–∏–µ–º (2) - –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                var query22c = await redb.QueryAsync<MixedTestProps>();
                var smallDepthQuery = await query22c
                    .Where(p => p.Tags1.Contains("senior"))
                    .WithMaxRecursionDepth(2)
                    .ToListAsync();
                logger.LogInformation($"  ‚ö° SMALL DEPTH (2): –Ω–∞–π–¥–µ–Ω–æ {smallDepthQuery.Count} –æ–±—ä–µ–∫—Ç–æ–≤");

                logger.LogInformation("  ‚úÖ –ù–û–í–´–ô API WithMaxRecursionDepth() –†–ê–ë–û–¢–ê–ï–¢!");
            }
            catch (Exception ex)
            {
                logger.LogInformation($"  ‚ùå –ù–û–í–´–ô API: {ex.Message}");
            }

            // –¢–µ—Å—Ç 23: –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ - –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–µ –ª—è–º–±–¥—ã —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–µ–π
            logger.LogInformation("üìã –¢–µ—Å—Ç 23: –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô - —Å–ª–æ–∂–Ω—ã–µ –ª—è–º–±–¥—ã —Å WithMaxRecursionDepth(20)");
            try
            {
                var query23 = await redb.QueryAsync<MixedTestProps>();
                
                var extremeWithCustomDepth = await query23
                    .Where(p => 
                        // –£—Ä–æ–≤–µ–Ω—å 1: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ OR
                        (p.Tags1.Contains("senior") || p.Tags1.Contains("developer") || p.Tags1.Contains("manager")) &&
                        // –£—Ä–æ–≤–µ–Ω—å 2: –°–ª–æ–∂–Ω—ã–µ AND
                        ((p.Age >= 25 && p.Age <= 35) || (p.Age >= 30 && p.Age <= 40)) &&
                        // –£—Ä–æ–≤–µ–Ω—å 3: DateTime —É—Å–ª–æ–≤–∏—è
                        p.Date >= new DateTime(2025, 1, 15) &&
                        // –£—Ä–æ–≤–µ–Ω—å 4: –û—Ç—Ä–∏—Ü–∞–Ω–∏—è
                        !p.Tags1.Contains("banned") && !p.Tags1.Contains("intern")
                    )
                    .WithMaxRecursionDepth(20)  // üî• –ö–ê–°–¢–û–ú–ù–ê–Ø –ì–õ–£–ë–ò–ù–ê!
                    .ToListAsync();
                    
                logger.LogInformation($"  ü§Ø –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –° DEPTH(20): –Ω–∞–π–¥–µ–Ω–æ {extremeWithCustomDepth.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                foreach (var item in extremeWithCustomDepth.Take(2))
                {
                    logger.LogInformation($"    ‚Ä¢ {item.name}: Tags1=[{string.Join(",", item.properties.Tags1)}]");
                }
                
                logger.LogInformation("  ‚úÖ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –° –ö–ê–°–¢–û–ú–ù–û–ô –†–ï–ö–£–†–°–ò–ï–ô –†–ê–ë–û–¢–ê–ï–¢!");
            }
            catch (Exception ex)
            {
                logger.LogInformation($"  ‚ùå –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô –° DEPTH(20): {ex.Message}");
            }

            logger.LogInformation("");
            logger.LogInformation("üéâ === –í–°–ï –°–õ–û–ñ–ù–´–ï LINQ –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ ===");

            logger.LogInformation("");
            logger.LogInformation("üî• === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–ï –£–î–ê–õ–Ø–ï–ú –î–ê–ù–ù–´–ï ===");
            logger.LogInformation("üî• –û–±—ä–µ–∫—Ç—ã –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –ë–î –¥–ª—è SQL –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:");
            foreach (var id in productIds)
            {
                logger.LogInformation($"üî• –û–±—ä–µ–∫—Ç ID: {id}");
            }
            
            // üî• –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
            /*
            // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            // ‚úÖ –ù–û–í–´–ô API - —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            using (redb.CreateSystemContext())
            {
                foreach (var id in productIds)
                {
                    var obj = await redb.LoadAsync<MixedTestProps>(id);
                    await redb.DeleteAsync(obj);
                    logger.LogInformation($"üóëÔ∏è –£–¥–∞–ª–µ–Ω –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API: {obj.name} (ID: {id})");
                }
            }
            */
        }
    }
}
