using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.Models.Entities;
using System;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –≠–¢–ê–ü 44: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ SaveAsync
    /// </summary>
    public class Stage44_TestNewSaveAsync : BaseTestStage
    {
        public override int Order => 44;
        public override string Name => "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ SaveAsync";
        public override string Description => "–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π SaveAsync –Ω–∞ –ø—Ä–æ—Å—Ç–æ–º –æ–±—ä–µ–∫—Ç–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ö–µ–º–æ–π";

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üöÄ === –≠–¢–ê–ü 44: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ì–û SaveAsync ===");

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ö–µ–º—É TestPerson (ID=9001) –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç 14 —Å—Ç—Ä—É–∫—Ç—É—Ä
            var testObj = new RedbObject<TestPersonProps>
            {
                name = "–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ SaveAsync",
                note = "–ü—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                scheme_id = 9001,  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É
                properties = new TestPersonProps
                {
                    Name = "John Test",
                    Age = 35,
                    // ‚ùå –£–ë–ò–†–ê–ï–ú –î–£–ë–õ–ò–†–£–Æ–©–ò–ï–°–Ø –ü–û–õ–Ø (City, Street —É–∂–µ –µ—Å—Ç—å –≤ Address)
                    
                    // ‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã
                    Tags = new string[] { "test", "saveasync", "new" },
                    Scores = new int[] { 90, 95, 85 },
                    
                    // üèóÔ∏è –°–õ–û–ñ–ù–´–ô –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å —Å —Ä–µ–∫—É—Ä—Å–∏–µ–π
                    Address = new TestAddress
                    {
                        City = "Moscow",  
                        Street = "Red Square 1",
                        
                        // üìä –ú–∞—Å—Å–∏–≤ –≤–Ω—É—Ç—Ä–∏ –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞
                        Districts = new string[] { "Center", "Kremlin" },
                        
                        // üèóÔ∏è –í–ª–æ–∂–µ–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å
                        Details = new TestAddressDetails 
                        {
                            Building = "Building A",
                            Floor = 5,
                            Type = "Office"
                        },
                        
                        // üìä –ú–∞—Å—Å–∏–≤ –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–æ–≤
                        Contacts = new TestContact[] 
                        {
                            new TestContact { Value = "phone:+7123", Verified = true },
                            new TestContact { Value = "email:test@test.com", Verified = false }
                        }
                    }
                }
            };

            logger.LogInformation("üìã –¢–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω:");
            logger.LogInformation("   Name: {name}", testObj.properties.Name);
            logger.LogInformation("   Age: {age}", testObj.properties.Age);
            logger.LogInformation("   Tags: [{tags}] ({tagCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)", string.Join(", ", testObj.properties.Tags), testObj.properties.Tags.Length);
            logger.LogInformation("   Scores: [{scores}] ({scoreCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)", string.Join(", ", testObj.properties.Scores), testObj.properties.Scores.Length);
            logger.LogInformation("üèóÔ∏è Address: City={city}, Street={street}", testObj.properties.Address.City, testObj.properties.Address.Street);
            logger.LogInformation("   üìä Districts: [{districts}] ({count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)", string.Join(", ", testObj.properties.Address.Districts), testObj.properties.Address.Districts.Length);
            logger.LogInformation("   üèóÔ∏è Details: Building={building}, Floor={floor}, Type={type}", testObj.properties.Address.Details.Building, testObj.properties.Address.Details.Floor, testObj.properties.Address.Details.Type);
            logger.LogInformation("   üìä Contacts: {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", testObj.properties.Address.Contacts.Length);
            foreach (var contact in testObj.properties.Address.Contacts)
            {
                logger.LogInformation("     - {value} (Verified: {verified})", contact.Value, contact.Verified);
            }

            logger.LogInformation("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π SaveAsync...");
            var savedId = await redb.SaveAsync(testObj);

            logger.LogInformation("‚úÖ –û–±—ä–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {savedId}", savedId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ –ë–î
            logger.LogInformation("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î...");
            var loaded = await redb.LoadAsync<TestPersonProps>(savedId);

            logger.LogInformation("üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç:");
            logger.LogInformation("   ID: {id}, Name: {name}", loaded.Id, loaded.Name);
            logger.LogInformation("   Properties Name: {propName}", loaded.properties.Name);
            logger.LogInformation("   Properties Age: {propAge}", loaded.properties.Age);

            logger.LogInformation("‚úÖ === –≠–¢–ê–ü 44 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û ===");
        }
    }

    // –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∞–Ω–∞–ª–æ–≥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π TestPerson)
    public class TestPersonProps
    {
        public string Name { get; set; } = string.Empty;
        public int Age { get; set; }
        // ‚ùå –£–ë–ò–†–ê–ï–ú City –∏ Street - –æ–Ω–∏ –µ—Å—Ç—å –≤ Address –∏ –≤—ã–∑—ã–≤–∞—é—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä!
        
        // ‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã
        public string[] Tags { get; set; } = new string[0];
        public int[] Scores { get; set; } = new int[0];

        // üèóÔ∏è –ë–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å —Å —Ä–µ–∫—É—Ä—Å–∏–µ–π
        public TestAddress Address { get; set; } = new TestAddress();
    }

    // üèóÔ∏è –°–ª–æ–∂–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å —Å –º–∞—Å—Å–∏–≤–∞–º–∏ –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏
    public class TestAddress 
    {
        public string City { get; set; } = string.Empty;
        public string Street { get; set; } = string.Empty;
        
        // üìä –ú–ê–°–°–ò–í –≤–Ω—É—Ç—Ä–∏ –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞
        public string[] Districts { get; set; } = new string[0];
        
        // üèóÔ∏è –í–õ–û–ñ–ï–ù–ù–´–ô –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å
        public TestAddressDetails Details { get; set; } = new TestAddressDetails();
        
        // üìä –ú–ê–°–°–ò–í –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–æ–≤
        public TestContact[] Contacts { get; set; } = new TestContact[0];
    }

    // üèóÔ∏è –í–ª–æ–∂–µ–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å
    public class TestAddressDetails
    {
        public string Building { get; set; } = string.Empty;
        public int Floor { get; set; }
        public string Type { get; set; } = string.Empty;
    }

    // üèóÔ∏è –≠–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–æ–≤  
    public class TestContact
    {
        public string Value { get; set; } = string.Empty;
        public bool Verified { get; set; }
    }
}
