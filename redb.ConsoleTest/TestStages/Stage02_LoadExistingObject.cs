using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.Models.Entities;
using System;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –≠—Ç–∞–ø 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    /// </summary>
    public class Stage02_LoadExistingObject : BaseTestStage
    {
        public override string Name => "–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞";
        public override string Description => "–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞...";
        public override int Order => 2;

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            // üöÄ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ LoadAsync
            logger.LogInformation("üì¶ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç AnalyticsRecordProps...");
            
            // ‚úÖ –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É —è–≤–Ω–æ –≤–º–µ—Å—Ç–æ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            var scheme = await redb.EnsureSchemeFromTypeAsync<AnalyticsRecordProps>();

            var testObj = new RedbObject<AnalyticsRecordProps>
            {
                scheme_id = 0,// scheme.Id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Ö–µ–º—É
                name = "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è Stage02",
                note = "–°–æ–∑–¥–∞–Ω –≤ —ç—Ç–∞–ø–µ 2 –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ LoadAsync",
                properties = new AnalyticsRecordProps
                {
                    Article = "TEST-002",
                    Date = DateTime.Now,
                    Stock = 100,
                    Orders = 5,
                    Tag = "Stage02Test",
                    TestName = "LoadAsync Demo",
                    stringArr = new[] { "test1", "test2", "stage02" },
                    longArr = new[] { 1L, 2L, 3L }
                }
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            var savedId = await redb.SaveAsync(testObj);
            logger.LogInformation("üíæ –û–±—ä–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ID={savedId}", savedId);

            // ‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–û–ù–¢–†–ê–ö–¢–û–í: –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç SecurityContext)
            logger.LogInformation("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç LoadAsync(long id)...");
            var loadedObj = await redb.LoadAsync<AnalyticsRecordProps>(savedId);
            
            logger.LogInformation("‚úÖ –û–±—ä–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π API: id={id}, name='{name}', scheme_id={schemeId}", 
                loadedObj.id, loadedObj.name, loadedObj.scheme_id);
            logger.LogInformation("   Properties: Article='{Article}', Date={Date}, Stock={Stock}", 
                loadedObj.properties.Article, loadedObj.properties.Date, loadedObj.properties.Stock);
            logger.LogInformation("   üîê –ü—Ä–∞–≤–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ SecurityContext");
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –¥—Ä—É–≥–∏—Ö —ç—Ç–∞–ø–æ–≤
            SetStageData("Stage02_CreatedObjectId", savedId);
        }
    }
}
