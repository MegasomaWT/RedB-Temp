using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.Models.Entities;
using System;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –≠–¢–ê–ü 5: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    /// </summary>
    public class Stage05_CreateObject : BaseTestStage
    {
        public override int Order => 5;
        public override string Name => "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞";
        public override string Description => "–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç AnalyticsRecord —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º";

        public long CreatedObjectId { get; private set; }

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("‚ûï === –≠–¢–ê–ü 5: –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –û–ë–™–ï–ö–¢–ê ===");

            // –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
            //var schMetName = "TrueSight.DBModels.AnalyticsMetrics";
            //var schemeName = "TrueSight.DBModels.AnalyticsRecord";

            // üöÄ –ü–û–õ–ù–û–°–¢–¨–Æ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–•–ï–ú–ê: –ù–∏–∫–∞–∫–∏—Ö —Ä—É—á–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ SyncSchemeAsync!
            // –ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ —Å—Ö–µ–º–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
            // - –ò–º—è —Å—Ö–µ–º—ã = –∏–º—è –∫–ª–∞—Å—Å–∞ (AnalyticsRecordProps, AnalyticsMetricsProps)
            // - –ê–ª–∏–∞—Å –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ [RedbScheme("...")]
            // - –°—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º –∫–ª–∞—Å—Å–∞
            logger.LogInformation("–°—Ö–µ–º—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –ü–û–õ–ù–û–°–¢–¨–Æ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤!");

            var metObj = new RedbObject<AnalyticsMetricsProps>
            {
                //scheme_id = metId,
                name = "–í–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç AutoMetrics",
                note = "–ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏",
                owner_id = 0,
                who_change_id = 0,
                date_create = DateTime.Now,
                date_modify = DateTime.Now,
                properties = new AnalyticsMetricsProps
                {
                    AdvertId = 12312,
                    Base = 1500,
                    Baskets = 45,
                    Association = 12,
                    Costs = 2500.75,
                    Rate = 95
                }
            };

            // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AutoMetricsArray
            logger.LogInformation("–°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è AutoMetricsArray...");
            var metricsArray = new RedbObject<AnalyticsMetricsProps>[]
            {
                new RedbObject<AnalyticsMetricsProps>
                {
                    name = "–ú–µ—Ç—Ä–∏–∫–∞ 1 - –†–µ–∫–ª–∞–º–∞ ULTRA",
                    note = "–î–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ #1",
                    owner_id = 0,
                    who_change_id = 0,
                    date_create = DateTime.Now,
                    date_modify = DateTime.Now,
                    properties = new AnalyticsMetricsProps
                    {
                        AdvertId = 10001,
                        Base = 150,
                        Baskets = 25,
                        Association = 5,
                        Costs = 1250.50,
                        Rate = 85
                    }
                },
                new RedbObject<AnalyticsMetricsProps>
                {
                    name = "–ú–µ—Ç—Ä–∏–∫–∞ 2 - –û—Ä–≥–∞–Ω–∏–∫–∞",
                    note = "–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞—Ñ–∏–∫",
                    owner_id = 0,
                    who_change_id = 0,
                    date_create = DateTime.Now,
                    date_modify = DateTime.Now,
                    properties = new AnalyticsMetricsProps
                    {
                        AdvertId = 10002,
                        Base = 300,
                        Baskets = 45,
                        Association = 12,
                        Costs = 0.0, // –û—Ä–≥–∞–Ω–∏–∫–∞ –±–µ–∑ –∑–∞—Ç—Ä–∞—Ç
                        Rate = 92
                    }
                },
                new RedbObject<AnalyticsMetricsProps>
                {
                    name = "–ú–µ—Ç—Ä–∏–∫–∞ 3 - –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏",
                    note = "–¢—Ä–∞—Ñ–∏–∫ –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π",
                    owner_id = 0,
                    who_change_id = 0,
                    date_create = DateTime.Now,
                    date_modify = DateTime.Now,
                    properties = new AnalyticsMetricsProps
                    {
                        AdvertId = 10003,
                        Base = 75,
                        Baskets = 8,
                        Association = 2,
                        Costs = 450.25,
                        Rate = 65
                    }
                }
            };

            logger.LogInformation("–°–æ–∑–¥–∞–Ω–æ {count} –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ AutoMetricsArray:", metricsArray.Length);
            for (int i = 0; i < metricsArray.Length; i++)
            {
                var metric = metricsArray[i];
                logger.LogInformation("   [{index}] {name} - AdvertId: {advertId}, Base: {baseValue}, Costs: {costs}",
                    i, metric.name, metric.properties.AdvertId, metric.properties.Base, metric.properties.Costs);
            }

            logger.LogInformation("üîß === –°–û–ó–î–ê–ù–ò–ï –°–ú–ï–®–ê–ù–ù–û–ì–û –¢–ï–°–¢–û–í–û–ì–û –û–ë–™–ï–ö–¢–ê ===");
            // ‚úÖ –°–ú–ï–®–ê–ù–ù–´–ô –¢–ï–°–¢–û–í–´–ô –û–ë–™–ï–ö–¢ –¥–ª—è –Ω–æ–≤–æ–π –ø–∞—Ä–∞–¥–∏–≥–º—ã
            var newObj = new RedbObject<MixedTestProps>
            {
                // scheme_id = 0 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –∫–∞–∫ "MixedTestProps"
                name = "–°–º–µ—à–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç",
                note = "–¢–µ—Å—Ç –Ω–æ–≤–æ–π –ø–∞—Ä–∞–¥–∏–≥–º—ã —Å –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞–º–∏",
                owner_id = 0,
                who_change_id = 0,
                date_create = DateTime.Now,
                date_modify = DateTime.Now,
                properties = new MixedTestProps
                {
                    // ‚úÖ –ü—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã
                    Age = 30,
                    Name = "John Doe",
                    Date = DateTime.Today,
                    Article = "–¢–µ—Å—Ç–æ–≤—ã–π –∞—Ä—Ç–∏–∫—É–ª",
                    Stock = 100,
                    Tag = "mixed-test",
                    TestName = "–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ STAGE 5", // ‚úÖ –ó–ê–ü–û–õ–ù–Ø–ï–ú TestName!

                    // ‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã (–Ω–æ–≤–∞—è –ø–∞—Ä–∞–¥–∏–≥–º–∞: —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ) - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ó–ê–ü–û–õ–ù–ï–ù–ù–´–ï!
                    Tags1 = new string[] { "developer", "senior", "fullstack", "expert", "architect", "lead" },
                    Scores1 = new int[] { 85, 92, 78, 96, 88, 94 },
                    Tags2 = new string[] { "JJJdeveloper", "!!!senior", "_____fullstack", "###expert", "@@@architect" },
                    Scores2 = new int[] { 33, 22, 11, 44, 55 },

                    // ‚úÖ –ë–∏–∑–Ω–µ—Å –∫–ª–∞—Å—Å (–Ω–æ–≤–∞—è –ø–∞—Ä–∞–¥–∏–≥–º–∞: UUID —Ö–µ—à + –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞)
                    Address1 = new Address
                    {
                        City = "Moscow",
                        Street = "Main Street 123",
                        Details = new Details
                        {
                            Floor = 5,
                            Building = "Building A",
                            // ‚úÖ –ó–ê–ü–û–õ–ù–Ø–ï–ú –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û - –º–∞—Å—Å–∏–≤—ã –≤ Details!
                            Tags1 = new string[] { "moscow", "main-street", "building-a" },
                            Scores1 = new int[] { 95, 87, 92 },
                            Tags2 = new string[] { "addr1", "premium", "center" },
                            Scores2 = new int[] { 88, 91, 89 }
                        }
                    },
                    Address2 = new Address
                    {
                        City = "Moscow",
                        Street = "Main Street 123",
                        Details = new Details
                        {
                            Floor = 15,
                            Building = "Building B Advanced",
                            // ‚úÖ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ó–ê–ü–û–õ–ù–ï–ù–ù–´–ï –º–∞—Å—Å–∏–≤—ã –¥–ª—è Address2!
                            Tags1 = new string[] { "address2", "advanced", "building-b", "premium", "moscow-center" },
                            Scores1 = new int[] { 98, 97, 96, 95, 94 },
                            Tags2 = new string[] { "ultra", "mega", "super", "advanced", "final" },
                            Scores2 = new int[] { 100, 99, 98, 97, 96 },
                        }
                    },
                    // ‚úÖ –ú–∞—Å—Å–∏–≤ –±–∏–∑–Ω–µ—Å –∫–ª–∞—Å—Å–æ–≤ (–Ω–æ–≤–∞—è –ø–∞—Ä–∞–¥–∏–≥–º–∞: –±–∞–∑–æ–≤–∞—è –∑–∞–ø–∏—Å—å + —ç–ª–µ–º–µ–Ω—Ç—ã —Å ArrayParentId)
                    Contacts = new Contact[]
                    {
                            new Contact { Type = "email", Value = "john@example.com", Verified = true },
                            new Contact { Type = "phone", Value = "+7-999-123-45-67", Verified = false },
                            new Contact { Type = "telegram", Value = "@john_doe_test", Verified = true },
                            new Contact { Type = "skype", Value = "john.doe.business", Verified = false },
                            new Contact { Type = "whatsapp", Value = "+7-999-555-77-88", Verified = true }
                    },

                    // ‚úÖ RedbObject —Å—Å—ã–ª–∫–∏ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ - ID –≤ Long –ø–æ–ª–µ)
                    AutoMetrics = metObj,
                    RelatedMetrics = metricsArray
                }
            };

            logger.LogInformation("‚úÖ === –°–¢–†–£–ö–¢–£–†–ê –°–ú–ï–®–ê–ù–ù–û–ì–û –û–ë–™–ï–ö–¢–ê ===");
            logger.LogInformation("   –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è: name='{name}', note='{note}', scheme_id={schemeId} (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)",
                newObj.name, newObj.note, newObj.scheme_id);
            logger.LogInformation("   Properties (–±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ _values):");

            // ‚úÖ –ü—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã
            logger.LogInformation("     üî¢ Age: {age}", newObj.properties.Age);
            logger.LogInformation("     üìù Name: '{name}'", newObj.properties.Name);
            logger.LogInformation("     üìÖ Date: {date}", newObj.properties.Date);
            logger.LogInformation("     üì¶ Article: '{article}'", newObj.properties.Article);
            logger.LogInformation("     üìä Stock: {stock}", newObj.properties.Stock);
            logger.LogInformation("     üè∑Ô∏è Tag: '{tag}'", newObj.properties.Tag);

            // ‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã (–Ω–æ–≤–∞—è –ø–∞—Ä–∞–¥–∏–≥–º–∞)
            logger.LogInformation("     üìã Tags[]: [{tags}] ({tagCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)",
                string.Join(", ", newObj.properties.Tags1 ?? Array.Empty<string>()),
                newObj.properties.Tags1?.Length ?? 0);
            logger.LogInformation("     üéØ Scores[]: [{scores}] ({scoreCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)",
                string.Join(", ", newObj.properties.Scores2 ?? Array.Empty<int>()),
                newObj.properties.Scores2?.Length ?? 0);

            // ‚úÖ –ë–∏–∑–Ω–µ—Å –∫–ª–∞—Å—Å (–Ω–æ–≤–∞—è –ø–∞—Ä–∞–¥–∏–≥–º–∞)
            logger.LogInformation("     üè† Address: {city}, {street} (Floor: {floor}, Building: {building})",
                newObj.properties.Address1.City, newObj.properties.Address2.Street,
                newObj.properties.Address1.Details.Floor, newObj.properties.Address2.Details.Building);

            // ‚úÖ –ú–∞—Å—Å–∏–≤ –±–∏–∑–Ω–µ—Å –∫–ª–∞—Å—Å–æ–≤ (–Ω–æ–≤–∞—è –ø–∞—Ä–∞–¥–∏–≥–º–∞)
            logger.LogInformation("     üìû Contacts[]: {contactCount} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", newObj.properties.Contacts?.Length ?? 0);
            if (newObj.properties.Contacts != null)
            {
                for (int i = 0; i < newObj.properties.Contacts.Length; i++)
                {
                    var contact = newObj.properties.Contacts[i];
                    logger.LogInformation("       [{index}] {type}: {value} (Verified: {verified})",
                        i, contact.Type, contact.Value, contact.Verified);
                }
            }
            
            // ‚úÖ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø Address1.Details –∏ Address2.Details
            logger.LogInformation("     üè† Address1.Details: Floor={floor}, Building={building}",
                newObj.properties.Address1.Details.Floor, newObj.properties.Address1.Details.Building);
            logger.LogInformation("       üìã Address1.Details.Tags1: [{tags}] ({count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)",
                string.Join(", ", newObj.properties.Address1.Details.Tags1), newObj.properties.Address1.Details.Tags1.Length);
            logger.LogInformation("       üéØ Address1.Details.Scores1: [{scores}] ({count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)",
                string.Join(", ", newObj.properties.Address1.Details.Scores1), newObj.properties.Address1.Details.Scores1.Length);
                
            logger.LogInformation("     üè† Address2.Details: Floor={floor}, Building={building}",
                newObj.properties.Address2.Details.Floor, newObj.properties.Address2.Details.Building);
            logger.LogInformation("       üìã Address2.Details.Tags1: [{tags}] ({count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)",
                string.Join(", ", newObj.properties.Address2.Details.Tags1), newObj.properties.Address2.Details.Tags1.Length);
            logger.LogInformation("       üéØ Address2.Details.Scores1: [{scores}] ({count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)",
                string.Join(", ", newObj.properties.Address2.Details.Scores1), newObj.properties.Address2.Details.Scores1.Length);

            // ‚úÖ RedbObject —Å—Å—ã–ª–∫–∏
            logger.LogInformation("     üîó AutoMetrics: '{autoMetricsName}' (RedbObject —Å—Å—ã–ª–∫–∞)", newObj.properties.AutoMetrics?.name);
            logger.LogInformation("     üîó RelatedMetrics[]: {arrayCount} RedbObject —Å—Å—ã–ª–æ–∫", newObj.properties.RelatedMetrics?.Length ?? 0);

            logger.LogInformation("üöÄ === –°–û–•–†–ê–ù–ï–ù–ò–ï –°–ú–ï–®–ê–ù–ù–û–ì–û –û–ë–™–ï–ö–¢–ê ===");
            logger.LogInformation("–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ (checkPermissions=false - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)...");
            logger.LogInformation("   ‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º 'MixedTestProps' –∏ 'AnalyticsMetricsProps'");
            logger.LogInformation("   ‚Üí INSERT –≤ _objects (–±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è)");
            logger.LogInformation("   ‚Üí INSERT –≤ _values (–Ω–æ–≤–∞—è –ø–∞—Ä–∞–¥–∏–≥–º–∞):");
            logger.LogInformation("     ‚Ä¢ –ü—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã: Age, Name, Date, Article, Stock, Tag");
            logger.LogInformation("     ‚Ä¢ –ü—Ä–æ—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã: Tags[], Scores[] (—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ)");
            logger.LogInformation("     ‚Ä¢ –ë–∏–∑–Ω–µ—Å –∫–ª–∞—Å—Å: Address (UUID —Ö–µ—à + –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞)");
            logger.LogInformation("     ‚Ä¢ –ú–∞—Å—Å–∏–≤ –±–∏–∑–Ω–µ—Å –∫–ª–∞—Å—Å–æ–≤: Contacts[] (–±–∞–∑–æ–≤–∞—è –∑–∞–ø–∏—Å—å + —ç–ª–µ–º–µ–Ω—Ç—ã)");
            logger.LogInformation("     ‚Ä¢ RedbObject —Å—Å—ã–ª–∫–∏: AutoMetrics, RelatedMetrics[]");
            logger.LogInformation("   ‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ 4 –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (1 + 3 –≤ –º–∞—Å—Å–∏–≤–µ)");
            logger.LogInformation("   ‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç MD5 —Ö–µ—à–∞");

            // üî¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê NULL ‚Üí DEFAULT –ü–ï–†–ï–î –°–û–•–†–ê–ù–ï–ù–ò–ï–ú
            logger.LogInformation("üî¨ === –ê–ù–ê–õ–ò–ó NULL –ü–û–õ–ï–ô –ü–ï–†–ï–î –°–û–•–†–ê–ù–ï–ù–ò–ï–ú ===");
            logger.LogInformation($"   üìä Stock (non-nullable): {newObj.properties.Stock}");
            logger.LogInformation($"   üìä Tag (nullable): {newObj.properties.Tag ?? "NULL"}");
            logger.LogInformation($"   üìä TestName (nullable): {newObj.properties.TestName ?? "NULL"}");
            if (newObj.properties.AutoMetrics?.properties != null)
            {
                logger.LogInformation($"   üìä AutoMetrics.Baskets (nullable): {newObj.properties.AutoMetrics.properties.Baskets?.ToString() ?? "NULL"}");
                logger.LogInformation($"   üìä AutoMetrics.Costs (nullable): {newObj.properties.AutoMetrics.properties.Costs?.ToString() ?? "NULL"}");
            }
            
            // üî¨ –ê–ù–ê–õ–ò–ó –ë–ò–ó–ù–ï–°-–ö–õ–ê–°–°–û–í
            logger.LogInformation("üî¨ –ê–ù–ê–õ–ò–ó –ë–ò–ó–ù–ï–°-–ö–õ–ê–°–°–û–í (Address):");
            logger.LogInformation($"   üìä Address1 (–Ω–µ nullable): {(newObj.properties.Address1 == null ? "NULL" : $"Filled: {newObj.properties.Address1.City}")}");
            logger.LogInformation($"   üìä Address2 (–Ω–µ nullable): {(newObj.properties.Address2 == null ? "NULL" : $"Filled: {newObj.properties.Address2.City}")}");
            logger.LogInformation($"   üìä Address3 (nullable): {(newObj.properties.Address3 == null ? "NULL" : $"Filled: {newObj.properties.Address3.City}")}");

            CreatedObjectId = await redb.SaveAsync(newObj); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç
            
            logger.LogInformation("‚úÖ –û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {newId}", CreatedObjectId);

            // üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–ò –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ú–ê–°–°–ò–í–ê
            logger.LogInformation("üß™ === –¢–ï–°–¢–ò–†–£–ï–ú –ò–°–ü–†–ê–í–õ–ï–ù–ù–£–Æ ArrayParentId –õ–û–ì–ò–ö–£ ===");
            var testArrayMod = await redb.LoadAsync<MixedTestProps>(CreatedObjectId);
            logger.LogInformation("‚úÖ –û–±—ä–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–∑–º–µ–Ω—è–µ–º Contacts[0].Type");
            testArrayMod.properties.Contacts[0].Type = "test_fixed";
            logger.LogInformation("üöÄ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –º–∞—Å—Å–∏–≤–∞...");
            await redb.SaveAsync(testArrayMod);
            logger.LogInformation("‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï –ú–ê–°–°–ò–í–ê –£–°–ü–ï–®–ù–û!");
            
            // üîç –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –ò–ó–ú–ï–ù–ò–õ–û–°–¨ –í –ë–î
            logger.LogInformation("üîç === –ü–†–û–í–ï–†–Ø–ï–ú –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –ë–ê–ó–ï –î–ê–ù–ù–´–• ===");
            var changedObj = await redb.LoadAsync<MixedTestProps>(CreatedObjectId);
            logger.LogInformation("üìû –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:");
            for (int i = 0; i < changedObj.properties.Contacts.Length; i++)
            {
                var contact = changedObj.properties.Contacts[i];
                string indicator = i == 0 ? "üî• [–ò–ó–ú–ï–ù–ï–ù]" : "   [–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]";
                logger.LogInformation("  {indicator} [{index}] Type: '{type}', Value: '{value}', Verified: {verified}",
                    indicator, i, contact.Type, contact.Value, contact.Verified);
            }
            // üî¨ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢: –û–ë–™–ï–ö–¢ –° –Ø–í–ù–´–ú–ò NULL –ü–û–õ–Ø–ú–ò
            logger.LogInformation("üß™ === –°–û–ó–î–ê–ï–ú –¢–ï–°–¢–û–í–´–ô –û–ë–™–ï–ö–¢ –° NULL –ü–û–õ–Ø–ú–ò ===");
            var nullTestObj = new RedbObject<AnalyticsRecordProps>
            {
                name = "NULL Test Object",
                properties = new AnalyticsRecordProps
                {
                    Date = DateTime.Today,
                    Article = "NULL-TEST-001",
                    Stock = 100,              // ‚úÖ Non-nullable: –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
                    Orders = null,            // ‚ùå Nullable: –æ—Å—Ç–∞–µ—Ç—Å—è null
                    TotalCart = null,         // ‚ùå Nullable: –æ—Å—Ç–∞–µ—Ç—Å—è null  
                    Tag = null,               // ‚ùå Nullable: –æ—Å—Ç–∞–µ—Ç—Å—è null
                    TestName = "Filled Name", // ‚úÖ Nullable –Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
                    stringArr = new string[] { "test" },
                    longArr = new long[] { 1, 2, 3 },
                    AuctionMetrics = null  // ‚úÖ NULL RedbObject —Å—Å—ã–ª–∫–∞!
                }
            };
            
            logger.LogInformation("üìù –°–û–ó–î–ê–ï–ú –û–ë–™–ï–ö–¢ –° NULL:");
            logger.LogInformation($"   üìä Orders: {nullTestObj.properties.Orders?.ToString() ?? "NULL"}");
            logger.LogInformation($"   üìä TotalCart: {nullTestObj.properties.TotalCart?.ToString() ?? "NULL"}");
            logger.LogInformation($"   üìä Tag: {nullTestObj.properties.Tag ?? "NULL"}");
            logger.LogInformation($"   üìä TestName: {nullTestObj.properties.TestName ?? "NULL"}");
            logger.LogInformation($"   üìä Stock: {nullTestObj.properties.Stock}");
            logger.LogInformation($"   üìä AuctionMetrics (RedbObject —Å—Å—ã–ª–∫–∞): {(nullTestObj.properties.AuctionMetrics == null ? "NULL" : "NOT NULL")}");
            
            var nullTestId = await redb.SaveAsync(nullTestObj);
            SetStageData("NullTestObjectId", nullTestId);
            logger.LogInformation("‚úÖ NULL Test –æ–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {nullTestId}", nullTestId);

            // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç–∞–¥–∏—è—Ö
            SetStageData("CreatedObjectId", CreatedObjectId);
            SetStageData("UpdatedObjectId", CreatedObjectId);  // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞–¥–∏–µ–π 9

            // üîç –ü–†–û–í–ï–†–ö–ê –£–°–¢–ê–ù–û–í–ö–ò ParentId –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            logger.LogInformation("üîç === –ü–†–û–í–ï–†–ö–ê ParentId –î–õ–Ø –í–õ–û–ñ–ï–ù–ù–´–• –û–ë–™–ï–ö–¢–û–í ===");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç
            logger.LogInformation("üìã –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç:");
            logger.LogInformation("   ID: {mainId}, ParentId: {mainParentId}", newObj.Id, newObj.ParentId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            logger.LogInformation("üìã –û–¥–∏–Ω–æ—á–Ω—ã–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç (AutoMetrics):");
            logger.LogInformation("   ID: {nestedId}, ParentId: {nestedParentId}, Name: '{nestedName}'",
                newObj.properties.AutoMetrics.Id, newObj.properties.AutoMetrics.ParentId, newObj.properties.AutoMetrics.name);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Å–∏–≤ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            logger.LogInformation("üìã –ú–∞—Å—Å–∏–≤ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (RelatedMetrics):");
            if (newObj.properties.RelatedMetrics != null)
            {
                for (int i = 0; i < newObj.properties.RelatedMetrics.Length; i++)
                {
                    var arrayItem = newObj.properties.RelatedMetrics[i];
                    logger.LogInformation("   [{index}] ID: {arrayId}, ParentId: {arrayParentId}, Name: '{arrayName}'",
                        i, arrayItem.Id, arrayItem.ParentId, arrayItem.name);
                }
            }

            // üìñ –ó–ê–ì–†–£–ñ–ê–ï–ú –ò –ü–†–û–í–ï–†–Ø–ï–ú –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•
            logger.LogInformation("üìñ === –ü–†–û–í–ï–†–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ò–ó –ë–î ===");
            var loaded = await redb.LoadAsync<MixedTestProps>(CreatedObjectId);

            logger.LogInformation("üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç:");
            logger.LogInformation("   ID: {loadedId}, ParentId: {loadedParentId}, Name: '{loadedName}'",
                loaded.Id, loaded.ParentId, loaded.name);

            logger.LogInformation("üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç (AutoMetrics):");
            if (loaded.properties.AutoMetrics != null)
            {
                logger.LogInformation("   ID: {loadedNestedId}, ParentId: {loadedNestedParentId}, Name: '{loadedNestedName}'",
                    loaded.properties.AutoMetrics.Id, loaded.properties.AutoMetrics.ParentId, loaded.properties.AutoMetrics.name);
            }

            logger.LogInformation("üìã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (RelatedMetrics):");
            if (loaded.properties.RelatedMetrics != null)
            {
                for (int i = 0; i < loaded.properties.RelatedMetrics.Length; i++)
                {
                    var loadedArrayItem = loaded.properties.RelatedMetrics[i];
                    logger.LogInformation("   [{index}] ID: {loadedArrayId}, ParentId: {loadedArrayParentId}, Name: '{loadedArrayName}'",
                        i, loadedArrayItem.Id, loadedArrayItem.ParentId, loadedArrayItem.name);
                }
            }

            // üéØ –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê
            bool parentIdSetCorrectly = true;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            if (loaded.properties.AutoMetrics != null && loaded.properties.AutoMetrics.ParentId != loaded.Id)
            {
                logger.LogWarning("‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –£ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ AutoMetrics ParentId = {actualParent}, –æ–∂–∏–¥–∞–ª—Å—è {expectedParent}",
                    loaded.properties.AutoMetrics.ParentId, loaded.Id);
                parentIdSetCorrectly = false;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Å–∏–≤ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            if (loaded.properties.RelatedMetrics != null)
            {
                foreach (var arrayItem in loaded.properties.RelatedMetrics)
                {
                    if (arrayItem.ParentId != loaded.Id)
                    {
                        logger.LogWarning("‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –£ –æ–±—ä–µ–∫—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ '{arrayName}' ParentId = {actualParent}, –æ–∂–∏–¥–∞–ª—Å—è {expectedParent}",
                            arrayItem.name, arrayItem.ParentId, loaded.Id);
                        parentIdSetCorrectly = false;
                    }
                }
            }

            if (parentIdSetCorrectly)
            {
                logger.LogInformation("‚úÖ –£–°–ü–ï–•: ParentId —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤!");
            }
            else
            {
                logger.LogError("‚ùå –ü–†–û–ë–õ–ï–ú–ê: ParentId —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤!");
            }
        }
    }
}
