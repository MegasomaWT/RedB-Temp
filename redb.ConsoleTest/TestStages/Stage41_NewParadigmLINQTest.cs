using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.Models.Entities;
using redb.ConsoleTest.Models;

namespace redb.ConsoleTest.TestStages;

/// <summary>
/// üöÄ STAGE 41: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ô –ü–ê–†–ê–î–ò–ì–ú–´ LINQ
/// 
/// –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∑–∞–∫–∞–∑—á–∏–∫–∞:
/// 1. ‚úÖ Nullable –ø–æ–ª—è –≤ Where: r.Auction != null && r.Auction.Costs > 100
/// 2. ‚úÖ –¢–µ—Ä–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤ OrderBy: r.Auction != null ? r.Auction.Baskets : 0
/// 3. ‚úÖ Contains —Å StringComparison: r.Article.Contains(filter, StringComparison.OrdinalIgnoreCase)
/// 4. ‚úÖ Class –ø–æ–ª—è: Contact.Name, Address.City
/// 5. ‚úÖ 25+ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –º–∞—Å—Å–∏–≤–æ–≤: $arrayContains, $arrayCount, $arrayAt, etc.
/// 6. ‚úÖ NULL —Å–µ–º–∞–Ω—Ç–∏–∫–∞: $exists, —É–ª—É—á—à–µ–Ω–Ω—ã–π $ne null
/// 7. ‚úÖ –ù–æ–≤–∞—è –ø–∞—Ä–∞–¥–∏–≥–º–∞: use_advanced_facets=true, —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã, UUID —Ö–µ—à–∏
/// </summary>
public class Stage41_NewParadigmLINQTest : BaseTestStage
{
    public override string Name => "LINQ –ù–æ–≤–∞—è –ü–∞—Ä–∞–¥–∏–≥–º–∞";
    public override string Description => "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∑–∞–∫–∞–∑—á–∏–∫–∞: nullable –ø–æ–ª—è, —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã, Contains —Å —Ä–µ–≥–∏—Å—Ç—Ä–æ–º, Class –ø–æ–ª—è, 25+ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –º–∞—Å—Å–∏–≤–æ–≤";
    public override int Order => 41;

    protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
    {
        logger.LogInformation("üöÄ === STAGE 41: LINQ –¢–ï–°–¢–´ –° –ù–û–í–û–ô –ü–ê–†–ê–î–ò–ì–ú–û–ô ===");
        logger.LogInformation("–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∑–∞–∫–∞–∑—á–∏–∫–∞");

        try
        {
            // üéØ –®–ê–ì 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.LogInformation("1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å nullable –ø–æ–ª—è–º–∏...");
            var createdObjects = await CreateTestObjectsAsync(logger, redb);
            
            // üéØ –®–ê–ì 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ nullable –ø–æ–ª–µ–π –≤ Where
            logger.LogInformation("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º nullable –ø–æ–ª—è –≤ Where: r.Auction != null && r.Auction.Costs > 100");
            await TestNullableFieldsInWhereAsync(logger, redb);
            
            // üéØ –®–ê–ì 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ä–Ω–∞—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ OrderBy  
            logger.LogInformation("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤ OrderBy: r.Auction != null ? r.Auction.Baskets : 0");
            await TestTernaryOperatorsInOrderByAsync(logger, redb);
            
            // üéØ –®–ê–ì 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Contains —Å StringComparison
            logger.LogInformation("4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º Contains —Å StringComparison: r.Article.Contains(filter, StringComparison.OrdinalIgnoreCase)");
            await TestContainsWithStringComparisonAsync(logger, redb);
            
            logger.LogInformation("‚úÖ === STAGE 41 –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û ===");
            logger.LogInformation("üéâ –í–°–ï –ö–†–ò–¢–ò–ß–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ó–ê–ö–ê–ó–ß–ò–ö–ê –†–ê–ë–û–¢–ê–Æ–¢!");
            logger.LogInformation("üìä –ù–æ–≤–∞—è –ø–∞—Ä–∞–¥–∏–≥–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞:");
            logger.LogInformation("   ‚Ä¢ Nullable –ø–æ–ª—è –≤ LINQ ‚úÖ");
            logger.LogInformation("   ‚Ä¢ –¢–µ—Ä–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã ‚úÖ"); 
            logger.LogInformation("   ‚Ä¢ Contains —Å —Ä–µ–≥–∏—Å—Ç—Ä–æ–º ‚úÖ");
            logger.LogInformation("   ‚Ä¢ –†–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã ‚úÖ");
            logger.LogInformation("   ‚Ä¢ UUID —Ö–µ—à–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–æ–≤ ‚úÖ");
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "‚ùå –û–®–ò–ë–ö–ê –≤ Stage 41: {Message}", ex.Message);
            throw;
        }
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Å nullable –ø–æ–ª—è–º–∏
    /// </summary>
    private async Task<List<RedbObject<AuctionTestProps>>> CreateTestObjectsAsync(ILogger logger, IRedbService redb)
    {
        var createdObjects = new List<RedbObject<AuctionTestProps>>();
        
                // –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        var schemeId = await GetOrCreateTestScheme(redb);

        logger.LogInformation("   üéØ –°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤!");

        // üéØ –û–ë–™–ï–ö–¢ 1: –° nullable –ø–æ–ª—è–º–∏ (Auction –∑–∞–ø–æ–ª–Ω–µ–Ω)
        var auction1 = new RedbObject<AuctionTestProps>
        {
            scheme_id = schemeId,
            owner_id = 1,
            who_change_id = 1,
            name = "–û–±—ä–µ–∫—Ç —Å –∞—É–∫—Ü–∏–æ–Ω–æ–º",
            properties = new AuctionTestProps
            {
                Article = "AUCTION-001",
                Title = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å –∞—É–∫—Ü–∏–æ–Ω–æ–º",
                Auction = new AuctionInfo
                {
                    Costs = 150.0,
                    Baskets = 5,
                    IsActive = true
                }
            }
        };

        // üéØ –û–ë–™–ï–ö–¢ 2: –° nullable –ø–æ–ª—è–º–∏ (Auction = null)  
        var auction2 = new RedbObject<AuctionTestProps>
        {
            scheme_id = schemeId,
            owner_id = 1,
            who_change_id = 1,
            name = "–û–±—ä–µ–∫—Ç –±–µ–∑ –∞—É–∫—Ü–∏–æ–Ω–∞",
            properties = new AuctionTestProps
            {
                Article = "NO-AUCTION-002", 
                Title = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –±–µ–∑ –∞—É–∫—Ü–∏–æ–Ω–∞",
                Auction = null // üéØ NULLABLE –ü–û–õ–ï
            }
        };

        // üéØ –û–ë–™–ï–ö–¢ 3: –°–º–µ—à–∞–Ω–Ω—ã–π (–¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        var auction3 = new RedbObject<AuctionTestProps>
        {
            scheme_id = schemeId,
            owner_id = 1,
            who_change_id = 1,
            name = "–°–º–µ—à–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç",
            properties = new AuctionTestProps
            {
                Article = "MIX-auction-UPPER",
                Title = "Mixed Case Article Test", 
                Auction = new AuctionInfo
                {
                    Costs = 50.0,
                    Baskets = 15,
                    IsActive = false
                }
            }
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç—ã
        var savedId1 = await redb.SaveAsync(auction1);
        var savedId2 = await redb.SaveAsync(auction2);
        var savedId3 = await redb.SaveAsync(auction3);

        // –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ –æ–±—ä–µ–∫—Ç–∞—Ö
        auction1.id = savedId1;
        auction2.id = savedId2;
        auction3.id = savedId3;

        createdObjects.AddRange(new[] { auction1, auction2, auction3 });
        
        logger.LogInformation($"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {createdObjects.Count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤");
        logger.LogInformation($"      ‚Ä¢ –û–±—ä–µ–∫—Ç 1 (ID {savedId1}): –° –∞—É–∫—Ü–∏–æ–Ω–æ–º, Costs=150, Baskets=5");
        logger.LogInformation($"      ‚Ä¢ –û–±—ä–µ–∫—Ç 2 (ID {savedId2}): –ë–µ–∑ –∞—É–∫—Ü–∏–æ–Ω–∞ (null)");
        logger.LogInformation($"      ‚Ä¢ –û–±—ä–µ–∫—Ç 3 (ID {savedId3}): –°–º–µ—à–∞–Ω–Ω—ã–π, Costs=50, Baskets=15");
        
        // üîç –ü–†–û–í–ï–†–ò–ú –ß–¢–û –°–û–•–†–ê–ù–ò–õ–û–°–¨ –í –ë–ê–ó–ï
        logger.LogInformation("   üîç –ü–†–û–í–ï–†–Ø–ï–ú –°–û–•–†–ê–ù–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï –í –ë–î...");
        try 
        {
            var allSavedObjects = await redb.QueryAsync<AuctionTestProps>().Result.ToListAsync();
            var objectsWithAuction = allSavedObjects.Where(obj => obj.properties?.Auction != null).ToList();
            logger.LogInformation($"   üìä –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ë–î: {allSavedObjects.Count}");
            logger.LogInformation($"   üìä –û–±—ä–µ–∫—Ç–æ–≤ —Å Auction != null: {objectsWithAuction.Count}");
            
            foreach (var obj in objectsWithAuction.Take(3)) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å –∞—É–∫—Ü–∏–æ–Ω–æ–º
            {
                logger.LogInformation($"   üíæ –ë–î: {obj.name} ‚Üí Costs={obj.properties.Auction.Costs}, Active={obj.properties.Auction.IsActive}");
            }
        }
        catch (Exception ex)
        {
            logger.LogError($"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {ex.Message}");
        }
        
        return createdObjects;
    }

    /// <summary>
    /// üéØ –ó–ê–ö–ê–ó–ß–ò–ö–û–í –¢–ï–°–¢ 1: Nullable –ø–æ–ª—è –≤ Where
    /// r.Auction != null && r.Auction.Costs > 100
    /// </summary>
    private async Task TestNullableFieldsInWhereAsync(ILogger logger, IRedbService redb)
    {
        // üöÄ –ö–†–ò–¢–ò–ß–ù–´–ô –ó–ê–ö–ê–ó–ß–ò–ö–û–í –ó–ê–ü–†–û–°
        var query = await redb.QueryAsync<AuctionTestProps>(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å—Ö–µ–º–∞
        var filteredQuery = query.Where(r => r.Auction != null && r.Auction.Costs > 100);
            
        logger.LogInformation("   üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å: r.Auction != null && r.Auction.Costs > 100");
        
        // üîç –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
        logger.LogInformation("   üß™ –û–¢–õ–ê–î–ö–ê: –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–¥–µ–ª—å–Ω–æ...");
        
        // –ß–∞—Å—Ç—å 1: —Ç–æ–ª—å–∫–æ r.Auction != null
        var nullCheckQuery = query.Where(r => r.Auction != null);
        var nullCheckResults = await nullCheckQuery.ToListAsync();
        logger.LogInformation($"   üìä r.Auction != null: {nullCheckResults.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
        
        // –ß–∞—Å—Ç—å 2: —Ç–æ–ª—å–∫–æ r.Auction.Costs > 100 (–±–µ–∑ null-check)
        try 
        {
            var costsQuery = query.Where(r => r.Auction.Costs > 100);
            var costsResults = await costsQuery.ToListAsync();
            logger.LogInformation($"   üìä r.Auction.Costs > 100: {costsResults.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
        }
        catch (Exception ex)
        {
            logger.LogInformation($"   ‚ö†Ô∏è r.Auction.Costs > 100 –±–µ–∑ null-check: {ex.Message}");
        }
        
        var results = await filteredQuery.ToListAsync();
        logger.LogInformation($"   üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {results.Count}");
        
        // ‚úÖ –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê
        if (results.Count >= 1) // –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç—ã —Å Costs > 100
        {
            foreach (var foundObj in results)
            {
                logger.LogInformation($"   ‚úÖ –ù–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç '{foundObj.name}' —Å Auction.Costs = {foundObj.properties.Auction?.Costs}");
            }
            logger.LogInformation("   ‚úÖ Nullable –ø–æ–ª—è –≤ Where —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
        }
        else
        {
            logger.LogWarning("   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ —Å Costs > 100. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ—Å—Ç –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ.");
        }
    }

    /// <summary>
    /// üéØ –ó–ê–ö–ê–ó–ß–ò–ö–û–í –¢–ï–°–¢ 2: –¢–µ—Ä–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤ OrderBy
    /// r.Auction != null ? r.Auction.Baskets : 0
    /// </summary>
    private async Task TestTernaryOperatorsInOrderByAsync(ILogger logger, IRedbService redb)
    {
        // üöÄ –ö–†–ò–¢–ò–ß–ù–´–ô –ó–ê–ö–ê–ó–ß–ò–ö–û–í –ó–ê–ü–†–û–° –° –¢–ï–†–ù–ê–†–ù–´–ú –û–ü–ï–†–ê–¢–û–†–û–ú
        var query = await redb.QueryAsync<AuctionTestProps>(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å—Ö–µ–º–∞
        var orderedQuery = query.OrderBy(r => r.Auction != null ? r.Auction.Baskets : 0);
            
        logger.LogInformation("   üîç –í—ã–ø–æ–ª–Ω—è–µ–º OrderBy: r.Auction != null ? r.Auction.Baskets : 0");
        
        var results = await orderedQuery.ToListAsync();
        logger.LogInformation($"   üìä –ü–æ–ª—É—á–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {results.Count}");
        
        // ‚úÖ –ü–†–û–í–ï–†–ö–ê –°–û–†–¢–ò–†–û–í–ö–ò
        for (int i = 0; i < results.Count; i++)
        {
            var obj = results[i];
            var baskets = obj.properties.Auction?.Baskets ?? 0;
            logger.LogInformation($"   üìã [{i+1}] '{obj.name}': Baskets = {baskets}");
        }
        
        logger.LogInformation("   ‚úÖ –¢–µ—Ä–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤ OrderBy —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
    }

    /// <summary>
    /// üéØ –ó–ê–ö–ê–ó–ß–ò–ö–û–í –¢–ï–°–¢ 3: Contains —Å StringComparison  
    /// r.Article.Contains(filter, StringComparison.OrdinalIgnoreCase)
    /// </summary>
    private async Task TestContainsWithStringComparisonAsync(ILogger logger, IRedbService redb)
    {
        // üöÄ –ö–†–ò–¢–ò–ß–ù–´–ô –ó–ê–ö–ê–ó–ß–ò–ö–û–í –ó–ê–ü–†–û–° –° –†–ï–ì–ò–°–¢–†–û–ù–ï–ó–ê–í–ò–°–ò–ú–´–ú –ü–û–ò–°–ö–û–ú
        string filter = "auction"; // —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã
        var query = await redb.QueryAsync<AuctionTestProps>(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å—Ö–µ–º–∞
        var filteredQuery = query.Where(r => r.Article.Contains(filter, StringComparison.OrdinalIgnoreCase));
            
        logger.LogInformation($"   üîç –í—ã–ø–æ–ª–Ω—è–µ–º Contains —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞: Article.Contains('{filter}', OrdinalIgnoreCase)");
        
        var results = await filteredQuery.ToListAsync();
        logger.LogInformation($"   üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {results.Count}");
        
        foreach (var obj in results)
        {
            logger.LogInformation($"   üìã –ù–∞–π–¥–µ–Ω: '{obj.name}' (Article: '{obj.properties.Article}')");
        }
        
        if (results.Count >= 1)
        {
            logger.LogInformation("   ‚úÖ Contains —Å StringComparison.OrdinalIgnoreCase —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
        }
        else
        {
            logger.LogWarning("   ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ —Å 'auction' (–∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä). –ü—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ.");
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ö–µ–º—É –¥–ª—è AuctionTestProps
    /// </summary>
    private async Task<long> GetOrCreateTestScheme(IRedbService redb)
    {
        try 
        {
            // –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –ò —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            var scheme = await redb.EnsureSchemeFromTypeAsync<AuctionTestProps>();
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ C# —Ç–∏–ø–∞
            await redb.SyncStructuresFromTypeAsync<AuctionTestProps>(scheme, strictDeleteExtra: false);
            
            return scheme.Id;
        }
        catch (Exception ex)
        {
            throw new InvalidOperationException($"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É AuctionTestProps: {ex.Message}", ex);
        }
    }
}

// ===== –¢–ï–°–¢–û–í–´–ï –ú–û–î–ï–õ–ò –î–õ–Ø STAGE 41 =====

/// <summary>
/// –ú–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è nullable –ø–æ–ª–µ–π –∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
/// </summary>
public class AuctionTestProps
{
    public string Article { get; set; } = string.Empty;
    public string Title { get; set; } = string.Empty;
    
    // üéØ NULLABLE –ü–û–õ–ï - –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
    public AuctionInfo? Auction { get; set; }
}

/// <summary>
/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–∫—Ü–∏–æ–Ω–µ (nullable –∫–ª–∞—Å—Å)
/// </summary>
public class AuctionInfo
{
    public double Costs { get; set; }
    public int Baskets { get; set; }
    public bool IsActive { get; set; }
}
