using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.Models.Configuration;
using redb.Core.Models.Entities;
using System;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ RedbService
    /// </summary>
    public class Stage28_ConfigurationSystemTest : ITestStage
    {
        public string Name => "–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏";
        public string Description => "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ RedbService - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤";
        public int Order => 28;

        public async Task ExecuteAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üîß === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===");

            try
            {
                // === –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
                logger.LogInformation("üìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
                
                var currentConfig = redb.Configuration;
                logger.LogInformation("   ‚Üí DefaultCheckPermissionsOnSave: {value}", currentConfig.DefaultCheckPermissionsOnSave);
                logger.LogInformation("   ‚Üí DefaultCheckPermissionsOnLoad: {value}", currentConfig.DefaultCheckPermissionsOnLoad);
                logger.LogInformation("   ‚Üí DefaultCheckPermissionsOnDelete: {value}", currentConfig.DefaultCheckPermissionsOnDelete);
                logger.LogInformation("   ‚Üí DefaultLoadDepth: {value}", currentConfig.DefaultLoadDepth);
                logger.LogInformation("   ‚Üí IdResetStrategy: {value}", currentConfig.IdResetStrategy);
                logger.LogInformation("   ‚Üí MissingObjectStrategy: {value}", currentConfig.MissingObjectStrategy);
                logger.LogInformation("   ‚Üí AutoSetModifyDate: {value}", currentConfig.AutoSetModifyDate);

                // === –¢–ï–°–¢ 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Action ===
                logger.LogInformation("üîÑ –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Action");
                
                redb.UpdateConfiguration(config =>
                {
                    config.DefaultLoadDepth = 5;
                    config.IdResetStrategy = ObjectIdResetStrategy.AutoResetOnDelete;
                    config.MissingObjectStrategy = MissingObjectStrategy.AutoSwitchToInsert;
                });

                logger.LogInformation("   ‚Üí –ù–æ–≤–∞—è –≥–ª—É–±–∏–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {value}", redb.Configuration.DefaultLoadDepth);
                logger.LogInformation("   ‚Üí –ù–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–±—Ä–æ—Å–∞ ID: {value}", redb.Configuration.IdResetStrategy);
                logger.LogInformation("   ‚Üí –ù–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {value}", redb.Configuration.MissingObjectStrategy);

                // === –¢–ï–°–¢ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Builder ===
                logger.LogInformation("üèóÔ∏è –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Builder");
                
                redb.UpdateConfiguration(builder =>
                {
                    builder.WithLoadDepth(15)
                           .WithStrictSecurity()
                           .WithMetadataCache(enabled: false);
                });

                logger.LogInformation("   ‚Üí –ì–ª—É–±–∏–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ Builder: {value}", redb.Configuration.DefaultLoadDepth);
                logger.LogInformation("   ‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {value}", redb.Configuration.DefaultCheckPermissionsOnSave);
                logger.LogInformation("   ‚Üí –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {value}", redb.Configuration.EnableMetadataCache);

                // === –¢–ï–°–¢ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ AutoResetOnDelete ===
                logger.LogInformation("üóëÔ∏è –¢–µ—Å—Ç 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ AutoResetOnDelete");
                
                // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
                var testObj = new RedbObject<redb.ConsoleTest.AnalyticsMetricsProps>
                {
                    name = "ConfigTest_AutoReset",
                    properties = new redb.ConsoleTest.AnalyticsMetricsProps
                    {
                        AdvertId = 12345,
                        Baskets = 42,
                        Costs = 99.99
                    }
                };

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç
                var savedId = await redb.SaveAsync(testObj);
                logger.LogInformation("   ‚Üí –û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {id}", savedId);
                logger.LogInformation("   ‚Üí ID –≤ –æ–±—ä–µ–∫—Ç–µ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: {id}", testObj.id);

                // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç (–¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–æ—Å–∏—Ç—å ID)
                var deleted = await redb.DeleteAsync(testObj);
                logger.LogInformation("   ‚Üí –û–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω: {deleted}", deleted);
                logger.LogInformation("   ‚Üí ID –≤ –æ–±—ä–µ–∫—Ç–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {id} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0)", testObj.id);

                if (testObj.id == 0)
                {
                    logger.LogInformation("   ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è AutoResetOnDelete —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
                }
                else
                {
                    logger.LogWarning("   ‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è AutoResetOnDelete –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞!");
                }

                // === –¢–ï–°–¢ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ AutoSwitchToInsert ===
                logger.LogInformation("üîÑ –¢–µ—Å—Ç 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ AutoSwitchToInsert");
                
                // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
                var uniqueId = 900000 + DateTime.Now.Second * 1000 + DateTime.Now.Millisecond; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                var testObj2 = new RedbObject<redb.ConsoleTest.AnalyticsMetricsProps>
                {
                    id = uniqueId, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
                    name = "ConfigTest_AutoSwitch",
                    properties = new redb.ConsoleTest.AnalyticsMetricsProps
                    {
                        AdvertId = 67890,
                        Base = 84,
                        Rate = 5
                    }
                };

                logger.LogInformation("   ‚Üí –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID: {id}", testObj2.id);
                
                // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å (–¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ INSERT)
                var newId = await redb.SaveAsync(testObj2);
                logger.LogInformation("   ‚Üí ID –ø–æ—Å–ª–µ –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {newId}", newId);
                logger.LogInformation("   ‚Üí ID –≤ –æ–±—ä–µ–∫—Ç–µ: {id}", testObj2.id);

                if (newId == uniqueId && testObj2.id == newId)
                {
                    logger.LogInformation("   ‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è AutoSwitchToInsert —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
                    logger.LogInformation("   ‚Üí –û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å –∑–∞–¥–∞–Ω–Ω—ã–º ID: {newId} (–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç ID)", newId);
                    
                    // –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
                    await redb.DeleteAsync(testObj2);
                }
                else
                {
                    logger.LogError("   ‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è AutoSwitchToInsert –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞!");
                    logger.LogError("   ‚Üí –û–∂–∏–¥–∞–ª—Å—è ID = {expectedId}, –ø–æ–ª—É—á–∏–ª–∏: newId={newId}, testObj2.id={objId}", uniqueId, newId, testObj2.id);
                    throw new InvalidOperationException("AutoSwitchToInsert failed.");
                }

                // === –¢–ï–°–¢ 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ===
                logger.LogInformation("‚öôÔ∏è –¢–µ—Å—Ç 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                redb.UpdateConfiguration(config =>
                {
                    config.DefaultLoadDepth = 10;
                    config.DefaultCheckPermissionsOnLoad = false;
                    config.DefaultCheckPermissionsOnSave = false;
                    config.DefaultCheckPermissionsOnDelete = true;
                });

                // –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –±–µ–∑ —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                var testObj3 = new RedbObject<redb.ConsoleTest.AnalyticsMetricsProps>
                {
                    name = "ConfigTest_Defaults",
                    properties = new redb.ConsoleTest.AnalyticsMetricsProps
                    {
                        AdvertId = 11111,
                        Association = 100,
                        Costs = 250.50
                    }
                };

                var id3 = await redb.SaveAsync(testObj3); // –ë–µ–∑ —è–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                logger.LogInformation("   ‚Üí –û–±—ä–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {id}", id3);

                var loaded3 = await redb.LoadAsync<redb.ConsoleTest.AnalyticsMetricsProps>(id3); // –ë–µ–∑ —è–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                logger.LogInformation("   ‚Üí –û–±—ä–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");

                var deleted3 = await redb.DeleteAsync(testObj3); // –ë–µ–∑ —è–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                logger.LogInformation("   ‚Üí –û–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {deleted}", deleted3);

                logger.LogInformation("   ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");

                logger.LogInformation("üéâ === –í–°–ï –¢–ï–°–¢–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û ===");
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
                throw;
            }
        }
    }
}
