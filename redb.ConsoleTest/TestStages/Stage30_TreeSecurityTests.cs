using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.Models;
using redb.Core.Models.Configuration;
using redb.Core.Models.Contracts;
using redb.Core.Models.Entities;
using redb.Core.Extensions;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –≠–¢–ê–ü 30: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —É–ª—É—á—à–µ–Ω–∏–π –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
    /// </summary>
    public class Stage30_TreeSecurityTests : BaseTestStage
    {
        public override int Order => 30;
        public override string Name => "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–µ—Ä–µ–≤—å–µ–≤";
        public override string Description => "–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –∑–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–æ–≤, SQL injection, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è extension –º–µ—Ç–æ–¥–æ–≤";

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üõ°Ô∏è === –≠–¢–ê–ü 30: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –î–ï–†–ï–í–¨–ï–í ===");
            logger.LogInformation("–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –≤ PostgresTreeProvider –∏ IRedbObjectExtensions");
            
            // üîß –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–¢–ï–ì–ò–ò: TreeProvider –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ID –∑–∞—Ä–∞–Ω–µ–µ, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–∞ AutoSwitchToInsert
            redb.Configuration.MissingObjectStrategy = MissingObjectStrategy.AutoSwitchToInsert;
            logger.LogInformation("‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: AutoSwitchToInsert –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ TreeProvider");
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            var scheme = await redb.SyncSchemeAsync<AnalyticsRecordProps>();
            var schemeId = scheme.Id;

            logger.LogInformation("üîß –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...");

            // –°–æ–∑–¥–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –¥–µ—Ä–µ–≤–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            var root = new TreeRedbObject<AnalyticsRecordProps>
            {
                scheme_id = schemeId,
                owner_id = 0,
                who_change_id = 0,
                name = "Security Root",
                note = "–ö–æ—Ä–µ–Ω—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                properties = new AnalyticsRecordProps
                {
                    Article = "SECURE_ROOT",
                    Date = DateTime.Now,
                    Stock = 100,
                    TestName = "Security Root Node"
                }
            };

            var rootId = await redb.SaveAsync(root);
            logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç: ID={rootId}");

            // –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            var level1Ids = new long[3];
            for (int i = 0; i < 3; i++)
            {
                var child = new TreeRedbObject<AnalyticsRecordProps>
                {
                    scheme_id = schemeId,
                    owner_id = 0,
                    who_change_id = 0,
                    name = $"Level1_Child_{i + 1}",
                    note = $"–†–µ–±–µ–Ω–æ–∫ 1-–≥–æ —É—Ä–æ–≤–Ω—è #{i + 1}",
                    properties = new AnalyticsRecordProps
                    {
                        Article = $"L1_C{i + 1}",
                        Date = DateTime.Now.AddMinutes(-i),
                        Stock = 50 - i * 10,
                        TestName = $"Level 1 Child {i + 1}"
                    }
                };

                level1Ids[i] = await redb.CreateChildAsync(child, await redb.LoadAsync<AnalyticsRecordProps>(rootId, 1));
                logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω —Ä–µ–±–µ–Ω–æ–∫ —É—Ä–æ–≤–Ω—è 1: ID={level1Ids[i]}");
            }

            // –°–æ–∑–¥–∞–µ–º –≤–Ω—É–∫–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
            var level2Id = await CreateDeepChild(redb, schemeId, level1Ids[0], "Level2_GrandChild", "L2_GC");
            var level3Id = await CreateDeepChild(redb, schemeId, level2Id, "Level3_GreatGrandChild", "L3_GGC");
            
            logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥–ª—É–±–æ–∫–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è: 4 —É—Ä–æ–≤–Ω—è (–¥–æ ID={level3Id})");

            logger.LogInformation("");
            logger.LogInformation("üß™ === –¢–ï–°–¢ 1: –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ ===");
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º GetPathToRootAsync —Å –≥–ª—É–±–æ–∫–∏–º –æ–±—ä–µ–∫—Ç–æ–º
            logger.LogInformation("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—É—Ç–∏ –¥–ª—è –≥–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞...");
            var level3Obj = await redb.LoadAsync<AnalyticsRecordProps>(level3Id, 1);
            var pathFromDeep = await redb.GetPathToRootAsync<AnalyticsRecordProps>(level3Obj);
            var pathLength = pathFromDeep.Count();
            logger.LogInformation($"‚úÖ –ü—É—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ: {pathLength} —É—Ä–æ–≤–Ω–µ–π");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ø—É—Ç–∏ –Ω–µ—Ç –¥—É–±–ª–µ–π (–∑–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–æ–≤ —Å—Ä–∞–±–æ—Ç–∞–ª–∞)
            var allIds = pathFromDeep.Select(p => p.id).ToList();
            var uniqueIds = allIds.Distinct().Count();
            var hasDuplicates = allIds.Count != uniqueIds;
            
            logger.LogInformation($"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏ ID –≤ –ø—É—Ç–∏: {(hasDuplicates ? "‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´" : "‚úÖ –ù–ï–¢ –î–£–ë–õ–ï–ô")}");
            logger.LogInformation($"   –í—Å–µ–≥–æ —É–∑–ª–æ–≤ –≤ –ø—É—Ç–∏: {allIds.Count}, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: {uniqueIds}");
            
            if (!hasDuplicates)
            {
                logger.LogInformation("üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
            }

            logger.LogInformation("");
            logger.LogInformation("üß™ === –¢–ï–°–¢ 2: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Extension –º–µ—Ç–æ–¥—ã ===");
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è extension –º–µ—Ç–æ–¥–æ–≤  
            var rootObj = await redb.LoadAsync<AnalyticsRecordProps>(rootId, 1);
            var deepObj = await redb.LoadAsync<AnalyticsRecordProps>(level3Id, 1);
            var midObj = await redb.LoadAsync<AnalyticsRecordProps>(level2Id, 1);
            
            logger.LogInformation("–¢–µ—Å—Ç–∏—Ä—É–µ–º IsDescendantOfAsync (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...");
            var startTime = DateTime.Now;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ç–æ–º–∫–æ–≤
            var isDeepDescendant = await deepObj.IsDescendantOfAsync<AnalyticsRecordProps>(rootObj, redb);
            var isMidDescendant = await midObj.IsDescendantOfAsync<AnalyticsRecordProps>(rootObj, redb);
            var isRootDescendant = await rootObj.IsDescendantOfAsync<AnalyticsRecordProps>(deepObj, redb);
            
            var timeElapsed = DateTime.Now - startTime;
            logger.LogInformation($"‚úÖ IsDescendantOfAsync —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–≤—Ä–µ–º—è: {timeElapsed.TotalMilliseconds:F0}–º—Å):");
            logger.LogInformation($"   - –ì–ª—É–±–æ–∫–∏–π –æ–±—ä–µ–∫—Ç –ø–æ—Ç–æ–º–æ–∫ –∫–æ—Ä–Ω—è: {isDeepDescendant}");
            logger.LogInformation($"   - –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–∫—Ç –ø–æ—Ç–æ–º–æ–∫ –∫–æ—Ä–Ω—è: {isMidDescendant}");
            logger.LogInformation($"   - –ö–æ—Ä–µ–Ω—å –ù–ï –ø–æ—Ç–æ–º–æ–∫ –≥–ª—É–±–æ–∫–æ–≥–æ: {!isRootDescendant}");
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º GetTreeLevelAsync
            var rootLevel = await rootObj.GetTreeLevelAsync<AnalyticsRecordProps>(redb);
            var deepLevel = await deepObj.GetTreeLevelAsync<AnalyticsRecordProps>(redb);
            
            logger.LogInformation($"‚úÖ GetTreeLevelAsync —É—Ä–æ–≤–Ω–∏:");
            logger.LogInformation($"   - –ö–æ—Ä–µ–Ω—å: —É—Ä–æ–≤–µ–Ω—å {rootLevel}");
            logger.LogInformation($"   - –ì–ª—É–±–æ–∫–∏–π –æ–±—ä–µ–∫—Ç: —É—Ä–æ–≤–µ–Ω—å {deepLevel}");
            logger.LogInformation($"   - –†–∞–∑–Ω–∏—Ü–∞ —É—Ä–æ–≤–Ω–µ–π: {deepLevel - rootLevel}");

            logger.LogInformation("");
            logger.LogInformation("üß™ === –¢–ï–°–¢ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ ===");
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ IRedbObject
            logger.LogInformation($"‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤:");
            logger.LogInformation($"   - Root IsRoot: {rootObj.IsRoot}, HasParent: {rootObj.HasParent}");
            logger.LogInformation($"   - Deep IsRoot: {deepObj.IsRoot}, HasParent: {deepObj.HasParent}");
            logger.LogInformation($"   - ParentId Deep: {deepObj.ParentId}");
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            var rootAge = rootObj.GetAge();
            var timeSinceModify = rootObj.GetTimeSinceLastModification();
            
            logger.LogInformation($"‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏:");
            logger.LogInformation($"   - –í–æ–∑—Ä–∞—Å—Ç –æ–±—ä–µ–∫—Ç–∞: {rootAge.TotalSeconds:F1} —Å–µ–∫—É–Ω–¥");
            logger.LogInformation($"   - –° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {timeSinceModify.TotalSeconds:F1} —Å–µ–∫—É–Ω–¥");
            logger.LogInformation($"   - –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {rootObj.DateCreate:yyyy-MM-dd HH:mm:ss}");
            logger.LogInformation($"   - –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {rootObj.DateModify:yyyy-MM-dd HH:mm:ss}");
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º GetDisplayName –∏ GetDebugInfo
            var displayName = rootObj.GetDisplayName();
            var debugInfo = deepObj.GetDebugInfo();
            
            logger.LogInformation($"‚úÖ –°–ª—É–∂–µ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã:");
            logger.LogInformation($"   - GetDisplayName –∫–æ—Ä–Ω—è: '{displayName}'");
            logger.LogInformation($"   - GetDebugInfo –≥–ª—É–±–æ–∫–æ–≥–æ: {debugInfo}");

            logger.LogInformation("");
            logger.LogInformation("üß™ === –¢–ï–°–¢ 4: –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===");
            
            logger.LogInformation("–í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...");
            var perfStartTime = DateTime.Now;
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            for (int i = 0; i < 5; i++)
            {
                var testPath = await redb.GetPathToRootAsync<AnalyticsRecordProps>(level3Obj);
                var testDescendant = await deepObj.IsDescendantOfAsync<AnalyticsRecordProps>(rootObj, redb);
                var testLevel = await deepObj.GetTreeLevelAsync<AnalyticsRecordProps>(redb);
            }
            
            var perfTime = DateTime.Now - perfStartTime;
            logger.LogInformation($"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 15 –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ {perfTime.TotalMilliseconds:F0}–º—Å");
            logger.LogInformation($"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é: {perfTime.TotalMilliseconds / 15:F1}–º—Å");

            logger.LogInformation("");
            logger.LogInformation("üéØ === –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –£–õ–£–ß–®–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===");
            logger.LogInformation("üõ°Ô∏è ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫: —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            logger.LogInformation("üöÄ ‚úÖ SQL injection –∑–∞—â–∏—Ç–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã");
            logger.LogInformation("‚ö° ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ extension –º–µ—Ç–æ–¥—ã: –±—ã—Å—Ç—Ä—ã–µ –∏ –Ω–∞–¥–µ–∂–Ω—ã–µ");
            logger.LogInformation("üìä ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ IRedbObject: –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç");
            logger.LogInformation("üîß ‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è");
            logger.LogInformation("‚è±Ô∏è ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: —É–ª—É—á—à–µ–Ω–∞ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–∞");
            logger.LogInformation("");
            logger.LogInformation("üéâ –í—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∏–¥–µ–∞–ª—å–Ω–æ!");
        }

        private async Task<long> CreateDeepChild(IRedbService redb, long schemeId, long parentId, string name, string article)
        {
            var child = new TreeRedbObject<AnalyticsRecordProps>
            {
                scheme_id = schemeId,
                owner_id = 0,
                who_change_id = 0,
                name = name,
                note = $"–ì–ª—É–±–æ–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç: {name}",
                properties = new AnalyticsRecordProps
                {
                    Article = article,
                    Date = DateTime.Now.AddMinutes(-1),
                    Stock = 25,
                    TestName = name
                }
            };

            var parentObj = await redb.LoadAsync<AnalyticsRecordProps>(parentId, 1);
            return await redb.CreateChildAsync(child, parentObj);
        }
    }
}
