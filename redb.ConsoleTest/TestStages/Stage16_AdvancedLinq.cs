using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.DBModels;
using redb.Core.Models.Entities;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using redb.ConsoleTest.TestStages;  // ‚úÖ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ BulkTestProps –∏–∑ Stage42

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –≠—Ç–∞–ø 16: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö LINQ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    /// </summary>
    public class Stage16_AdvancedLinq : BaseTestStage
    {
        public override string Name => "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö LINQ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤";
        public override string Description => "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Any(), WhereIn() –∏ –¥—Ä—É–≥–∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö LINQ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤";
        public override int Order => 16;

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö LINQ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤...");

            // –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            var schemeId = await redb.SyncSchemeAsync<ProductTestProps>();
            logger.LogInformation($"‚úÖ –°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞: AdvancedLinqTestProps, ID: {schemeId}");

            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            var testProducts = new[]
            {
                new { Name = "Gaming Laptop", Category = "Electronics", Price = 1500.0, Stock = 10, IsActive = true },
                new { Name = "Office Laptop", Category = "Electronics", Price = 800.0, Stock = 25, IsActive = true },
                new { Name = "Programming Book", Category = "Books", Price = 50.0, Stock = 100, IsActive = true },
                new { Name = "Old Phone", Category = "Electronics", Price = 200.0, Stock = 5, IsActive = false },
                new { Name = "Tablet", Category = "Electronics", Price = 400.0, Stock = 15, IsActive = true }
            };

            var createdIds = new List<long>();

            foreach (var product in testProducts)
            {
                var obj = new RedbObject<ProductTestProps>
                {
                    scheme_id = schemeId.Id,
                    owner_id = 0,
                    who_change_id = 0,
                    name = product.Name,
                    note = "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö LINQ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤",
                    properties = new ProductTestProps
                    {
                        Category = product.Category,
                        Price = product.Price,
                        Stock = product.Stock,
                        IsActive = product.IsActive,
                        TestDate = DateTime.Now,  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TestDate
                        TestValue = 2
                    }
                };

                await redb.SaveAsync(obj);
                createdIds.Add(obj.id);
                logger.LogInformation($"  üì¶ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {product.Name} (ID: {obj.id})");
            }

            logger.LogInformation("");
            logger.LogInformation("üîç === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–´–• LINQ –û–ü–ï–†–ê–¢–û–†–û–í ===");

            // –¢–µ—Å—Ç 1: Any() –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            logger.LogInformation("üìã –¢–µ—Å—Ç 1: Any() - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π");
            var hasAnyProducts = await (await redb.QueryAsync<ProductTestProps>())
                .AnyAsync();
            logger.LogInformation($"‚úÖ –ï—Å—Ç—å –ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã: {hasAnyProducts}");

            // –¢–µ—Å—Ç 2: Any() —Å —É—Å–ª–æ–≤–∏–µ–º
            logger.LogInformation("üìã –¢–µ—Å—Ç 2: Any(predicate) - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å —É—Å–ª–æ–≤–∏–µ–º");
            var hasExpensiveProducts = await (await redb.QueryAsync<ProductTestProps>())
                .AnyAsync(p => p.Price > 1000);
            logger.LogInformation($"‚úÖ –ï—Å—Ç—å –ª–∏ –¥–æ—Ä–æ–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã (>$1000): {hasExpensiveProducts}");

            var hasCheapProducts = await (await redb.QueryAsync<ProductTestProps>())
                .AnyAsync(p => p.Price < 10);
            logger.LogInformation($"‚úÖ –ï—Å—Ç—å –ª–∏ –¥–µ—à–µ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (<$10): {hasCheapProducts}");

            // –¢–µ—Å—Ç 3: WhereIn() - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É –∑–Ω–∞—á–µ–Ω–∏–π
            logger.LogInformation("üìã –¢–µ—Å—Ç 3: WhereIn() - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
            var categories = new[] { "Electronics", "Books" };
            
            // üî¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: —Å—Ä–∞–≤–Ω–∏–º —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –ø–æ–∏—Å–∫–∞–º–∏
            logger.LogInformation("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–†–ï–î WhereIn:");
            var electronicsOnly = await (await redb.QueryAsync<ProductTestProps>())
                .Where(p => p.Category == "Electronics")
                .ToListAsync();
            var booksOnly = await (await redb.QueryAsync<ProductTestProps>())
                .Where(p => p.Category == "Books")
                .ToListAsync();
            logger.LogInformation($"   üìä Category == Electronics: {electronicsOnly.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
            logger.LogInformation($"   üìä Category == Books: {booksOnly.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
            logger.LogInformation($"   üìä –û–±—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è WhereIn: [{string.Join(", ", categories)}]");
            
            // üî¨ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ª–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è
            var whereInQuery = (await redb.QueryAsync<ProductTestProps>()).WhereIn(p => p.Category, categories);
            logger.LogInformation("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê WhereIn: –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...");
            
            var productsInCategories = await whereInQuery.ToListAsync();
            logger.LogInformation($"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö [Electronics, Books]: {productsInCategories.Count}");
            
            if (productsInCategories.Count == 0 && (electronicsOnly.Count > 0 || booksOnly.Count > 0))
            {
                logger.LogError("‚ùå –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: WhereIn –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π!");
                logger.LogError("   üîç –û—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–∏—Å–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç –æ–±—ä–µ–∫—Ç—ã, –Ω–æ WhereIn - –Ω–µ—Ç");
                logger.LogError("   üìã –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
                logger.LogError("     1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è $in JSON –¥–ª—è —Å—Ç—Ä–æ–∫");
                logger.LogError("     2. SQL type_info –ø—Ä–æ–±–ª–µ–º–∞ –¥–ª—è String —Ç–∏–ø–∞");
                logger.LogError("     3. –û—à–∏–±–∫–∞ –≤ _format_json_array_for_in –¥–ª—è —Å—Ç—Ä–æ–∫");
            }
            foreach (var product in productsInCategories)
            {
                logger.LogInformation($"  - {product.name}: Category = {product.properties.Category}");
            }

            // –¢–µ—Å—Ç 4: WhereIn() —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            logger.LogInformation("üìã –¢–µ—Å—Ç 4: WhereIn() - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É —Ü–µ–Ω");
            var targetPrices = new[] { 50.0, 200.0, 400.0 };
            var productsWithTargetPrices = await (await redb.QueryAsync<ProductTestProps>())
                .WhereIn(p => p.Price, targetPrices)
                .ToListAsync();
            logger.LogInformation($"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ [50, 200, 400]: {productsWithTargetPrices.Count}");
            foreach (var product in productsWithTargetPrices)
            {
                logger.LogInformation($"  - {product.name}: Price = ${product.properties.Price}");
            }

            // –¢–µ—Å—Ç 5: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
            logger.LogInformation("üìã –¢–µ—Å—Ç 5: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Any() –∏ Where()");
            var hasActiveElectronics = await (await redb.QueryAsync<ProductTestProps>())
                .Where(p => p.Category == "Electronics")
                .AnyAsync(p => p.IsActive == true);
            logger.LogInformation($"‚úÖ –ï—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞: {hasActiveElectronics}");

            // üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø LIMIT –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ Stage42
            logger.LogInformation("");
            logger.LogInformation("üß™ === –¢–ï–°–¢ >100 –û–ë–™–ï–ö–¢–û–í (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï LIMIT) ===");
            await TestLimitRemovalWithBulkObjects(logger, redb);

            logger.LogInformation("");
            logger.LogInformation("üéØ === –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• ===");
            
            // ‚úÖ –ö–û–ú–ú–ï–ù–¢–ò–†–£–ï–ú –£–î–ê–õ–ï–ù–ò–ï - –û–°–¢–ê–í–õ–Ø–ï–ú –û–ë–™–ï–ö–¢–´ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê SQL
            /*
            // –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            foreach (var id in createdIds)
            {
                var obj = await redb.LoadAsync<ProductTestProps>(id);
                await redb.DeleteAsync(obj);
                logger.LogInformation($"üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç ID: {id}");
            }
            */
            logger.LogInformation("üîç –£–î–ê–õ–ï–ù–ò–ï –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û - –æ–±—ä–µ–∫—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ SQL");
        }

        /// <summary>
        /// üß™ –¢–ï–°–¢–ò–†–£–ï–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ö–†–´–¢–û–ì–û –õ–ò–ú–ò–¢–ê 100
        /// </summary>
        private async Task TestLimitRemovalWithBulkObjects(ILogger logger, IRedbService redb)
        {
            try
            {
                // üîç –ó–∞–ø—Ä–æ—Å –ë–ï–ó Take() - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –í–°–ï –æ–±—ä–µ–∫—Ç—ã (–Ω–µ —Ç–æ–ª—å–∫–æ 100)
                logger.LogInformation("üîç –ó–∞–ø—Ä–æ—Å –ë–ï–ó Take(): query.ToListAsync()...");
                var queryWithoutLimit = await redb.QueryAsync<BulkTestProps>();
                var allBulkObjects = await queryWithoutLimit.ToListAsync();
                
                logger.LogInformation($"üìä –ë–ï–ó Take(): –Ω–∞–π–¥–µ–Ω–æ {allBulkObjects.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                
                // üéØ –ó–∞–ø—Ä–æ—Å –° Take(50) - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ 50
                logger.LogInformation("üéØ –ó–∞–ø—Ä–æ—Å –° Take(50): query.Take(50).ToListAsync()...");
                var queryWithLimit = await redb.QueryAsync<BulkTestProps>();
                var limitedBulkObjects = await queryWithLimit.Take(50).ToListAsync();
                
                logger.LogInformation($"üìä –° Take(50): –Ω–∞–π–¥–µ–Ω–æ {limitedBulkObjects.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                
                // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢–´
                if (allBulkObjects.Count > 100)
                {
                    logger.LogInformation($"üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢! ToListAsync() –≤–µ—Ä–Ω—É–ª {allBulkObjects.Count} –æ–±—ä–µ–∫—Ç–æ–≤ (>100)!");
                    
                    if (limitedBulkObjects.Count == 50)
                    {
                        logger.LogInformation($"‚úÖ Take(50) —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {limitedBulkObjects.Count} –æ–±—ä–µ–∫—Ç–æ–≤");
                        logger.LogInformation($"üèÜ –£–°–ü–ï–•! –°–∫—Ä—ã—Ç—ã–π –ª–∏–º–∏—Ç 100 –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—Å—Ç—Ä–∞–Ω–µ–Ω!");
                    }
                    else
                    {
                        logger.LogWarning($"‚ö†Ô∏è Take(50) –≤–µ—Ä–Ω—É–ª {limitedBulkObjects.Count} –æ–±—ä–µ–∫—Ç–æ–≤ –≤–º–µ—Å—Ç–æ 50");
                    }
                }
                else if (allBulkObjects.Count == 100)
                {
                    logger.LogError($"‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢! ToListAsync() –≤—Å—ë –µ—â—ë –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 100 –æ–±—ä–µ–∫—Ç–∞–º–∏");
                    logger.LogError($"üîß –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ PostgresQueryProvider –∏ SQL");
                }
                else
                {
                    logger.LogInformation($"ü§î –í –±–∞–∑–µ —Ç–æ–ª—å–∫–æ {allBulkObjects.Count} –æ–±—ä–µ–∫—Ç–æ–≤ BulkTestProps");
                    logger.LogInformation($"üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ Stage42 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è 1000 —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤");
                }
                
                // üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                if (allBulkObjects.Count > 0)
                {
                    logger.LogInformation($"üìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:");
                    for (int i = 0; i < Math.Min(3, allBulkObjects.Count); i++)
                    {
                        var obj = allBulkObjects[i];
                        logger.LogInformation($"   ‚Ä¢ #{i + 1}: ID={obj.Id}, Name='{obj.properties?.Name}', Active={obj.properties?.IsActive}");
                    }
                    
                    if (allBulkObjects.Count > 3)
                    {
                        logger.LogInformation($"   ... –∏ –µ—â—ë {allBulkObjects.Count - 3} –æ–±—ä–µ–∫—Ç–æ–≤");
                    }
                }
            }
            catch (Exception ex)
            {
                logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤: {ex.Message}");
                throw;
            }
        }
    }
}
