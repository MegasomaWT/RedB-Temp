using Microsoft.Extensions.Logging;
using redb.Core;
using redb.ConsoleTest.TestStages;
using redb.Core.Models.Entities;
using redb.Core.Models.Contracts;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö
    /// </summary>
    public class Stage29_ProvidersConfigurationTest : BaseTestStage
    {
        public override string Name => "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞—Ö";
        public override int Order => 29;
        public override string Description => "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RedbServiceConfiguration –≤ TreeProvider –∏ QueryProvider";

        protected override async Task<bool> ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üîß === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –í –ü–†–û–í–ê–ô–î–ï–†–ê–• ===");

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                var config = redb.Configuration;
                logger.LogInformation($"üìã –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:");
                logger.LogInformation($"   ‚Üí DefaultCheckPermissionsOnLoad: {config.DefaultCheckPermissionsOnLoad}");
                logger.LogInformation($"   ‚Üí DefaultMaxTreeDepth: {config.DefaultMaxTreeDepth}");
                logger.LogInformation($"   ‚Üí EnableMetadataCache: {config.EnableMetadataCache}");

                // –¢–µ—Å—Ç 1: –ò–∑–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ TreeProvider –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                logger.LogInformation("");
                logger.LogInformation("üå≥ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ TreeProvider");
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                redb.UpdateConfiguration(cfg => {
                    cfg.DefaultMaxTreeDepth = 3;
                    cfg.DefaultCheckPermissionsOnLoad = false;
                });

                // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é
                var rootObj = new RedbObject<AnalyticsRecordProps>
                {
                    name = "–ö–æ—Ä–µ–Ω—å –¥–ª—è —Ç–µ—Å—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                    properties = new AnalyticsRecordProps
                    {
                        Article = "Test100",
                        Date = DateTime.Now,
                        Orders = 10,
                        Stock = 1000
                    }
                };

                var rootId = await redb.SaveAsync(rootObj);
                rootObj.id = rootId; // –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ –æ–±—ä–µ–∫—Ç–µ
                logger.LogInformation($"   ‚Üí –°–æ–∑–¥–∞–Ω –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç: ID={rootId}");

                // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π
                var level1Obj = new TreeRedbObject<AnalyticsRecordProps>
                {
                    name = "–£—Ä–æ–≤–µ–Ω—å 1",
                    properties = new AnalyticsRecordProps { Article = "Test101", Date = DateTime.Now, Orders = 11, Stock = 1100 }
                };
                var level1Id = await redb.CreateChildAsync(level1Obj, rootObj);
                level1Obj.id = level1Id; // –û–±–Ω–æ–≤–ª—è–µ–º ID

                var level2Obj = new TreeRedbObject<AnalyticsRecordProps>
                {
                    name = "–£—Ä–æ–≤–µ–Ω—å 2",
                    properties = new AnalyticsRecordProps { Article = "Test102", Date = DateTime.Now, Orders = 12, Stock = 1200 }
                };
                var level2Id = await redb.CreateChildAsync(level2Obj, level1Obj);
                level2Obj.id = level2Id; // –û–±–Ω–æ–≤–ª—è–µ–º ID

                var level3Id = await redb.CreateChildAsync(new TreeRedbObject<AnalyticsRecordProps>
                {
                    name = "–£—Ä–æ–≤–µ–Ω—å 3",
                    properties = new AnalyticsRecordProps { Article = "Test103", Date = DateTime.Now, Orders = 13, Stock = 1300 }
                }, level2Obj);

                var level4Id = await redb.CreateChildAsync(new TreeRedbObject<AnalyticsRecordProps>
                {
                    name = "–£—Ä–æ–≤–µ–Ω—å 4 (–Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è)",
                    properties = new AnalyticsRecordProps { Article = "Test104", Date = DateTime.Now, Orders = 14, Stock = 1400 }
                }, level2Obj);

                logger.LogInformation($"   ‚Üí –°–æ–∑–¥–∞–Ω–∞ –∏–µ—Ä–∞—Ä—Ö–∏—è: Root -> L1 -> L2 -> L3 -> L4");

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ä–µ–≤–æ –ë–ï–ó —É–∫–∞–∑–∞–Ω–∏—è maxDepth - –¥–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (3)
                var tree = await redb.LoadTreeAsync<AnalyticsRecordProps>(rootObj);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª—É–±–∏–Ω—É
                int actualDepth = GetTreeDepth(tree);
                logger.LogInformation($"   ‚Üí –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≥–ª—É–±–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞: {actualDepth}");
                logger.LogInformation($"   ‚Üí –û–∂–∏–¥–∞–µ–º–∞—è –≥–ª—É–±–∏–Ω–∞ (–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏): {config.DefaultMaxTreeDepth}");

                if (actualDepth <= config.DefaultMaxTreeDepth)
                {
                    logger.LogInformation("   ‚úÖ TreeProvider –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç DefaultMaxTreeDepth –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!");
                }
                else
                {
                    logger.LogWarning($"   ‚ö†Ô∏è TreeProvider –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: –æ–∂–∏–¥–∞–ª–æ—Å—å {config.DefaultMaxTreeDepth}, –ø–æ–ª—É—á–µ–Ω–æ {actualDepth}");
                }

                // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ QueryProvider
                logger.LogInformation("");
                logger.LogInformation("üîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ QueryProvider");
                
                // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ö–µ–º—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                var scheme = await redb.SyncSchemeAsync<AnalyticsRecordProps>();
                var query = redb.Query<AnalyticsRecordProps>(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ —Å —Å—Ö–µ–º–æ–π
                
                var results = await query.ToListAsync();
                logger.LogInformation($"   ‚Üí –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {results.Count}");
                logger.LogInformation("   ‚úÖ QueryProvider –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!");

                // –û—á–∏—Å—Ç–∫–∞
                await redb.DeleteAsync(new RedbObject<AnalyticsRecordProps> { id = rootId });
                logger.LogInformation("   ‚Üí –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã");

                logger.LogInformation("");
                logger.LogInformation("üéâ === –í–°–ï –¢–ï–°–¢–´ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ü–†–û–í–ê–ô–î–ï–†–û–í –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û ===");
                return true;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤");
                return false;
            }
        }

        private int GetTreeDepth(ITreeRedbObject<AnalyticsRecordProps> node, int currentDepth = 0)
        {
            if (node.Children == null || !node.Children.Any())
                return currentDepth;

            return node.Children.Max(child => GetTreeDepth(child, currentDepth + 1));
        }
    }
}
