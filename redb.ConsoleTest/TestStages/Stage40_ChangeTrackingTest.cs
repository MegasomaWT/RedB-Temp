using System;
using System.Diagnostics;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.Models.Entities;
using redb.Core.Models.Configuration;
using redb.ConsoleTest.Models;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π ChangeTracking —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    /// </summary>
    public class Stage40_ChangeTrackingTest : BaseTestStage
    {
        public override string Name => "Change Tracking —Ç–µ—Å—Ç";
        public override string Description => "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ChangeTracking —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ë–î –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤";
        public override int Order => 40;

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            try
            {
                logger.LogInformation("üöÄ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CHANGETRACKING –°–¢–†–ê–¢–ï–ì–ò–ò ===");
                
                // 0. üîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                logger.LogInformation("0Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...");
                
                // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ –∫–∞–∫ –≤ Stage 5 (—É–±–∏—Ä–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é)
                // RedbObject<MixedTestProps>.SetConfiguration(...) ‚Üê –£–ë–ò–†–ê–ï–ú!
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                var config = RedbObject<MixedTestProps>.GetConfiguration();
                logger.LogInformation($"   EavSaveStrategy: {config.EavSaveStrategy}");
                logger.LogInformation($"   ‚úÖ ChangeTracking —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∞–∫—Ç–∏–≤–Ω–∞");
                
                // 1. üìä –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
                logger.LogInformation("");
                logger.LogInformation("1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –°–õ–û–ñ–ù–´–ô –æ–±—ä–µ–∫—Ç —Å –º–∞—Å—Å–∏–≤–∞–º–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ChangeTracking...");
                
                // –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                var autoMetric = new RedbObject<AnalyticsMetricsProps>
                {
                    name = "–ú–µ—Ç—Ä–∏–∫–∞ –¥–ª—è ChangeTracking",
                    note = "Stage 40 - AutoMetrics",
                    properties = new AnalyticsMetricsProps
                    {
                        AdvertId = 40001,
                        Base = 100,
                        Baskets = 15,
                        Association = 3,
                        Costs = 500.75,
                        Rate = 85
                    }
                };

                var testObj = new RedbObject<MixedTestProps>
                {
                    name = "Stage 40 - –°–º–µ—à–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç",
                    note = "Stage 40 - —Ç–µ—Å—Ç ChangeTracking —Å –ø–æ–ª–Ω—ã–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º",
                    properties = new MixedTestProps
                    {
                        // –ü–û–õ–ù–û–ï –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ö–ê–ö –í STAGE 5
                        Age = 30,
                        Name = "John Doe Stage40",
                        Date = new DateTime(2025, 8, 30),
                        Article = "–¢–µ—Å—Ç–æ–≤—ã–π –∞—Ä—Ç–∏–∫—É–ª Stage40",
                        Stock = 100,
                        Tag = "stage40-test",
                        TestName = "STAGE 40 TEST",

                        // –ú–∞—Å—Å–∏–≤—ã –∫–∞–∫ –≤ Stage 5
                        Tags1 = new string[] { "stage40", "test", "tracking" },
                        Scores1 = new int[] { 85, 92, 78 },
                        Tags2 = new string[] { "secondary", "tags" },
                        Scores2 = new int[] { 33, 22 },

                        // –ë–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å—ã –∫–∞–∫ –≤ Stage 5
                        Address1 = new Address
                        {
                            City = "Moscow",
                            Street = "Main Street 123",
                            Details = new Details
                            {
                                Floor = 5,
                                Building = "Building A",
                                Tags1 = new string[] { "moscow", "main-street", "building-a" },
                                Scores1 = new int[] { 95, 87, 92 }
                            }
                        },

                        // IRedbObject —Å—Å—ã–ª–∫–∞
                        AutoMetrics = autoMetric
                    }
                };
                
                logger.LogInformation($"   üìä –°–æ–∑–¥–∞–Ω —Å–ª–æ–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç MixedTestProps:");
                logger.LogInformation($"   üî¢ Age: {testObj.properties.Age}, Name: '{testObj.properties.Name}'");
                logger.LogInformation($"   üìã Tags1: [{string.Join(", ", testObj.properties.Tags1)}]");
                logger.LogInformation($"   üéØ Scores1: [{string.Join(", ", testObj.properties.Scores1)}]");
                logger.LogInformation($"   üîó AutoMetrics: {testObj.properties.AutoMetrics?.name}");
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ ChangeTracking —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)
                logger.LogInformation("   üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î...");
                
                var stopwatch1 = Stopwatch.StartNew();
                var savedId = await redb.SaveAsync(testObj);
                stopwatch1.Stop();
                
                logger.LogInformation($"   ‚úÖ –°–ª–æ–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {savedId}");
                logger.LogInformation($"   ‚è±Ô∏è –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {stopwatch1.ElapsedMilliseconds} –º—Å");
                
                // ‚ö° –ö–†–ò–¢–ò–ß–ù–û: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ID
                logger.LogInformation("   üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ ID...");
                testObj = await redb.LoadAsync<MixedTestProps>(savedId);
                logger.LogInformation($"   ‚úÖ –û–±—ä–µ–∫—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω: AutoMetrics.Id={testObj.properties.AutoMetrics?.Id}");
                
                // 2. üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –ø–æ–ª–µ–π –ò –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞
                logger.LogInformation("");
                logger.LogInformation("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –ø–æ–ª–µ–π + –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞...");
                
                // –ò–∑–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è –ò –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ChangeTracking
                testObj.properties.Age = 35;
                testObj.properties.Stock = 250;
                
                // üß™ –¢–ï–°–¢–ò–†–£–ï–ú: –∏–∑–º–µ–Ω—è–µ–º –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ Tags1
                testObj.properties.Tags1[0] = "stage40-UPDATED1";
                
                logger.LogInformation($"   üîß –ò–∑–º–µ–Ω–∏–ª–∏ Age: {testObj.properties.Age}");
                logger.LogInformation($"   üîß –ò–∑–º–µ–Ω–∏–ª–∏ Stock: {testObj.properties.Stock}");
                logger.LogInformation($"   üß™ –ò–∑–º–µ–Ω–∏–ª–∏ Tags1[0]: '{testObj.properties.Tags1[0]}' (–±—ã–ª–æ 'stage40')");
                logger.LogInformation($"   üìã Tags1 –ü–û–°–õ–ï: [{string.Join(", ", testObj.properties.Tags1)}]");
                logger.LogInformation($"   üîó AutoMetrics –ù–ï –∏–∑–º–µ–Ω—è–ª–∏: ID={testObj.properties.AutoMetrics?.Id}");
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º - –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–∏—Ç—å—Å—è Age, Stock –ò Tags1[0]
                logger.LogInformation("   üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ (ChangeTracking —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)...");
                
                var stopwatch2 = Stopwatch.StartNew();
                await redb.SaveAsync(testObj);
                stopwatch2.Stop();
                
                logger.LogInformation($"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å UPDATE –¥–ª—è Age, Stock –∏ Tags1[0]");
                logger.LogInformation($"   ‚è±Ô∏è –í—Ä–µ–º—è ChangeTracking: {stopwatch2.ElapsedMilliseconds} –º—Å");
                
                // 3. üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç 
                logger.LogInformation("");
                logger.LogInformation("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–Ω–æ–≤–æ...");
                
                var stopwatch3 = Stopwatch.StartNew();
                var reloadedObj = await redb.LoadAsync<MixedTestProps>(savedId);
                stopwatch3.Stop();
                
                logger.LogInformation($"   üìä –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç:");
                logger.LogInformation($"   ‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {stopwatch3.ElapsedMilliseconds} –º—Å");
                logger.LogInformation($"   üî¢ Age: {reloadedObj.properties.Age} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 35)");
                logger.LogInformation($"   üìä Stock: {reloadedObj.properties.Stock} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 250)");
                logger.LogInformation($"   üìù Name: '{reloadedObj.properties.Name}' (–Ω–µ –∏–∑–º–µ–Ω—è–ª—Å—è)");
                logger.LogInformation($"   üìã Tags1: [{string.Join(", ", reloadedObj.properties.Tags1 ?? new string[0])}] (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'stage40-UPDATED, test, tracking')");
                logger.LogInformation($"   üîó AutoMetrics: ID={reloadedObj.properties.AutoMetrics?.Id} (–Ω–µ –∏–∑–º–µ–Ω—è–ª—Å—è)");
                
                // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                var simpleAgeOk = reloadedObj.properties.Age == 35;
                var simpleStockOk = reloadedObj.properties.Stock == 250;
                var simpleNameOk = reloadedObj.properties.Name == "John Doe Stage40";
                var simpleTagsOk = reloadedObj.properties.Tags1 != null && 
                                  reloadedObj.properties.Tags1.Length == 3 && 
                                  reloadedObj.properties.Tags1[0] == "stage40-UPDATED" &&
                                  reloadedObj.properties.Tags1[1] == "test" &&
                                  reloadedObj.properties.Tags1[2] == "tracking";
                
                if (simpleAgeOk && simpleStockOk && simpleNameOk && simpleTagsOk)
                {
                    logger.LogInformation($"   ‚úÖ –í—Å–µ –ø–æ–ª—è (–≤–∫–ª—é—á–∞—è –º–∞—Å—Å–∏–≤) –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
                }
                else
                {
                    logger.LogError($"   ‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª—è—Ö: Age={simpleAgeOk}, Stock={simpleStockOk}, Name={simpleNameOk}, Tags1={simpleTagsOk}");
                    throw new InvalidOperationException("ChangeTracking –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                }
                
                logger.LogInformation("");
                logger.LogInformation("üéâ === CHANGETRACKING –°–¢–†–ê–¢–ï–ì–ò–Ø –ù–ê –ü–û–õ–Ø–• –ò –ú–ê–°–°–ò–í–ê–• –†–ê–ë–û–¢–ê–ï–¢! ===");
                logger.LogInformation("‚ú® ChangeTracking –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–æ–≤!");
                // 4. üß™ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
                logger.LogInformation("");
                logger.LogInformation("4Ô∏è‚É£ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞...");
                
                // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä
                var secondAutoMetric = new RedbObject<AnalyticsMetricsProps>
                {
                    name = "–í—Ç–æ—Ä–∞—è –º–µ—Ç—Ä–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞",
                    note = "Stage 40 - Second Test",
                    properties = new AnalyticsMetricsProps
                    {
                        AdvertId = 40002,
                        Base = 150,
                        Baskets = 20,
                        Association = 4,
                        Costs = 750.50,
                        Rate = 90
                    }
                };

                var secondTestObj = new RedbObject<MixedTestProps>
                {
                    name = "Stage 40 - –í—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç",
                    note = "Stage 40 - –≤—Ç–æ—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ (—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç)",
                    properties = new MixedTestProps
                    {
                        // –ü–û–õ–ù–û–ï –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ö–ê–ö –ü–ï–†–í–´–ô
                        Age = 25,
                        Name = "Jane Doe Stage40",
                        Date = new DateTime(2025, 8, 30),
                        Article = "–í—Ç–æ—Ä–æ–π –∞—Ä—Ç–∏–∫—É–ª Stage40",
                        Stock = 200,
                        Tag = "stage40-second-test",
                        TestName = "STAGE 40 SECOND TEST",

                        // –ú–∞—Å—Å–∏–≤—ã
                        Tags1 = new string[] { "second", "test", "object" },
                        Scores1 = new int[] { 90, 85, 95 },
                        Tags2 = new string[] { "second", "batch" },
                        Scores2 = new int[] { 40, 35 },

                        // –ë–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å
                        Address1 = new Address
                        {
                            City = "Saint Petersburg",
                            Street = "Nevsky Prospect 100",
                            Details = new Details
                            {
                                Floor = 3,
                                Building = "Building B",
                                Tags1 = new string[] { "spb", "nevsky", "building-b" },
                                Scores1 = new int[] { 88, 92, 85 }
                            }
                        },

                        // IRedbObject —Å—Å—ã–ª–∫–∞
                        AutoMetrics = secondAutoMetric
                    }
                };
                
                logger.LogInformation("   üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ç–æ—Ä–æ–π –æ–±—ä–µ–∫—Ç (—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã)...");
                
                var stopwatch4 = Stopwatch.StartNew();
                var secondSavedId = await redb.SaveAsync(secondTestObj);
                stopwatch4.Stop();
                
                logger.LogInformation($"   ‚úÖ –í—Ç–æ—Ä–æ–π –æ–±—ä–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {secondSavedId}");
                logger.LogInformation($"   ‚è±Ô∏è –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –í–¢–û–†–û–ì–û –æ–±—ä–µ–∫—Ç–∞: {stopwatch4.ElapsedMilliseconds} –º—Å");
                
                // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
                var improvement = (double)stopwatch1.ElapsedMilliseconds / stopwatch4.ElapsedMilliseconds;
                logger.LogInformation($"   üìä –°–†–ê–í–ù–ï–ù–ò–ï: –ü–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç {stopwatch1.ElapsedMilliseconds} –º—Å vs –í—Ç–æ—Ä–æ–π {stopwatch4.ElapsedMilliseconds} –º—Å");
                logger.LogInformation($"   ‚ö° –í—Ç–æ—Ä–æ–π –æ–±—ä–µ–∫—Ç –ë–´–°–¢–†–ï–ï –≤ {improvement:F1}x —Ä–∞–∑!");
                
                if (improvement >= 5.0)
                {
                    logger.LogInformation($"   üéØ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –ú–µ–¥–ª–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä –ë–î, –∞ –Ω–µ –≤ ChangeTracking!");
                }
                else if (improvement >= 2.0)
                {
                    logger.LogInformation($"   üëç –ß–ê–°–¢–ò–ß–ù–û: –ï—Å—Ç—å –≤–ª–∏—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å");
                }
                else
                {
                    logger.LogInformation($"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ: –†–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–π");
                }
                
                logger.LogInformation("");
                logger.LogInformation("üìä === –û–¢–ß–ï–¢ –ü–û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===");
                logger.LogInformation($"   ‚è±Ô∏è –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ü–ï–†–í–û–ì–û –æ–±—ä–µ–∫—Ç–∞: {stopwatch1.ElapsedMilliseconds} –º—Å (+ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä)");
                logger.LogInformation($"   ‚è±Ô∏è –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –í–¢–û–†–û–ì–û –æ–±—ä–µ–∫—Ç–∞: {stopwatch4.ElapsedMilliseconds} –º—Å (—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥–æ—Ç–æ–≤—ã)");
                logger.LogInformation($"   ‚è±Ô∏è –í—Ä–µ–º—è ChangeTracking –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {stopwatch2.ElapsedMilliseconds} –º—Å");
                logger.LogInformation($"   ‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–∞: {stopwatch3.ElapsedMilliseconds} –º—Å");
                logger.LogInformation($"   ‚è±Ô∏è –û–ë–©–ï–ï –≤—Ä–µ–º—è: {stopwatch1.ElapsedMilliseconds + stopwatch2.ElapsedMilliseconds + stopwatch3.ElapsedMilliseconds + stopwatch4.ElapsedMilliseconds} –º—Å");
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "üí• –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ChangeTracking —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏");
                throw;
            }
        }
        

    }
}