using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.DBModels;
using redb.Core.Models.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages;

public class Stage19_DateTimeSorting : ITestStage
{
    public int Order => 19;
    public string Name => "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏";
    public string Description => "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ DateTime –ø–æ–ª–µ–π";

    public async Task ExecuteAsync(ILogger logger, IRedbService redb)
    {
        try
        {
            logger.LogInformation("üïê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏...");
            
            // –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
            var schemeId = await redb.SyncSchemeAsync<EventTestProps>();
            logger.LogInformation($"‚úÖ –°—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞: {nameof(EventTestProps)}, ID: {schemeId}");

            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
            var testEvents = new[]
            {
                new { Name = "Event A", EventDate = new DateTime(2024, 1, 15, 10, 30, 0), Priority = 1 },
                new { Name = "Event B", EventDate = new DateTime(2024, 1, 15, 9, 15, 0), Priority = 2 },
                new { Name = "Event C", EventDate = new DateTime(2023, 12, 31, 23, 59, 59), Priority = 3 },
                new { Name = "Event D", EventDate = new DateTime(2024, 2, 1, 8, 0, 0), Priority = 1 },
                new { Name = "Event E", EventDate = new DateTime(2024, 1, 15, 10, 30, 30), Priority = 2 },
                new { Name = "Event F", EventDate = new DateTime(2025, 6, 15, 12, 0, 0), Priority = 1 }
            };

            logger.LogInformation("üìã –°–æ–∑–¥–∞–≤–∞–µ–º—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è:");
            foreach (var evt in testEvents)
            {
                logger.LogInformation($"  - {evt.Name}: {evt.EventDate:yyyy-MM-dd HH:mm:ss}, Priority={evt.Priority}");
            }

            var createdIds = new List<long>();

            foreach (var evt in testEvents)
            {
                var obj = new RedbObject<EventTestProps>
                {
                    scheme_id = schemeId.Id,
                    name = evt.Name,
                    owner_id = 0,
                    who_change_id = 0,
                    date_create = DateTime.Now,
                    date_modify = DateTime.Now,
                    properties = new EventTestProps 
                    { 
                        EventDate = evt.EventDate,
                        Priority = evt.Priority
                    }
                };

                var savedId = await redb.SaveAsync(obj);
                createdIds.Add(savedId);
                logger.LogInformation($"  üìÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {evt.Name} (ID: {savedId})");
            }

            logger.LogInformation("");
            logger.LogInformation("üîç === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–†–¢–ò–†–û–í–ö–ò –î–ê–¢ ===");

            // –¢–µ—Å—Ç 1: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
            logger.LogInformation("üìã –¢–µ—Å—Ç 1: OrderBy(EventDate) - —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫");
            var sortedByDate = await (await redb.QueryAsync<EventTestProps>())
                .OrderBy(e => e.EventDate)
                .ToListAsync();
            
            logger.LogInformation($"üìä –°–æ–±—ã—Ç–∏—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ (–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ) - {sortedByDate.Count} —à—Ç:");
            foreach (var evt in sortedByDate)
            {
                logger.LogInformation($"  - {evt.name}: {evt.properties.EventDate:yyyy-MM-dd HH:mm:ss}");
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫
            var dates = sortedByDate.Select(e => e.properties.EventDate).ToList();
            var isSorted = dates.SequenceEqual(dates.OrderBy(d => d));
            logger.LogInformation($"‚úÖ –•—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {isSorted}");

            // –¢–µ—Å—Ç 2: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
            logger.LogInformation("");
            logger.LogInformation("üìã –¢–µ—Å—Ç 2: OrderByDescending(EventDate) - –æ–±—Ä–∞—Ç–Ω—ã–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫");
            var sortedByDateDesc = await (await redb.QueryAsync<EventTestProps>())
                .OrderByDescending(e => e.EventDate)
                .ToListAsync();
            
            logger.LogInformation($"üìä –°–æ–±—ã—Ç–∏—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ (—É–±—ã–≤–∞–Ω–∏–µ) - {sortedByDateDesc.Count} —à—Ç:");
            foreach (var evt in sortedByDateDesc.Take(3))
            {
                logger.LogInformation($"  - {evt.name}: {evt.properties.EventDate:yyyy-MM-dd HH:mm:ss}");
            }

            var datesDesc = sortedByDateDesc.Select(e => e.properties.EventDate).ToList();
            var isSortedDesc = datesDesc.SequenceEqual(datesDesc.OrderByDescending(d => d));
            logger.LogInformation($"‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {isSortedDesc}");

            // –¢–µ—Å—Ç 3: –î–≤–æ–π–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ - —Å–Ω–∞—á–∞–ª–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É, –ø–æ—Ç–æ–º –ø–æ –¥–∞—Ç–µ
            logger.LogInformation("");
            logger.LogInformation("üìã –¢–µ—Å—Ç 3: OrderBy(Priority).ThenBy(EventDate)");
            var sortedByPriorityThenDate = await (await redb.QueryAsync<EventTestProps>())
                .OrderBy(e => e.Priority)
                .ThenBy(e => e.EventDate)
                .ToListAsync();
            
            logger.LogInformation($"üìä –°–æ–±—ã—Ç–∏—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É + –¥–∞—Ç–µ:");
            foreach (var evt in sortedByPriorityThenDate)
            {
                logger.LogInformation($"  - {evt.name}: Priority={evt.properties.Priority}, Date={evt.properties.EventDate:yyyy-MM-dd HH:mm:ss}");
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –≥—Ä—É–ø–ø–∞–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
            var priorities = sortedByPriorityThenDate.GroupBy(e => e.properties.Priority);
            logger.LogInformation($"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤: {priorities.Count()}");
            foreach (var priority in priorities)
            {
                var priorityDates = priority.Select(e => e.properties.EventDate).ToList();
                var isPrioritySorted = priorityDates.SequenceEqual(priorityDates.OrderBy(d => d));
                logger.LogInformation($"  - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç {priority.Key}: {priority.Count()} —Å–æ–±—ã—Ç–∏–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ: {isPrioritySorted}");
            }

            // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.LogInformation("");
            logger.LogInformation("üéØ === –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• ===");
            foreach (var id in createdIds)
            {
                var obj = await redb.LoadAsync<ProductTestProps>(id);
                await redb.DeleteAsync(obj);
                logger.LogInformation($"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ ID: {id}");
            }

            logger.LogInformation("‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞—Ç –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
        }
        catch (Exception ex)
        {
            logger.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ —ç—Ç–∞–ø–µ {Order}: {Name}");
            logger.LogError($"‚ùå {ex.Message}");
            throw;
        }
    }
}

// –ú–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
public class EventTestProps
{
    public DateTime EventDate { get; set; }
    public int Priority { get; set; }
}
