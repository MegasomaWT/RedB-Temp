using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.Models.Entities;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace redb.ConsoleTest.TestStages
{
    /// <summary>
    /// –≠—Ç–∞–ø 25: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω–æ–≥–æ API –±–µ–∑ –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤
    /// </summary>
    public class Stage25_PolymorphicAPI : BaseTestStage
    {
        public override string Name => "üöÄ –ü–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π API –±–µ–∑ –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤";
        public override string Description => "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å RedbObject –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ç–∏–ø–æ–≤";
        public override int Order => 25;

        protected override async Task ExecuteStageAsync(ILogger logger, IRedbService redb)
        {
            logger.LogInformation("üöÄ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–õ–ò–ú–û–†–§–ù–û–ì–û API ===");
            logger.LogInformation("");

            // === –°–û–ó–î–ê–ï–ú –†–ê–ó–ù–´–ï –¢–ò–ü–´ –û–ë–™–ï–ö–¢–û–í ===
            logger.LogInformation("üì¶ –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤...");
            
            var product = new RedbObject<ProductTestProps>
            {
                name = "–ü–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç",
                scheme_id = 1001,
                properties = new ProductTestProps { Stock = 100, Category = "Electronics", Price = 999.99, IsActive = true }
            };

            var analytics = new RedbObject<AnalyticsRecordProps>
            {
                name = "–ü–æ–ª–∏–º–æ—Ä—Ñ–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", 
                scheme_id = 1002,
                properties = new AnalyticsRecordProps { Article = "TEST001", Stock = 50 }
            };

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç—ã
            using (redb.CreateSystemContext())
            {
                product.id = await redb.SaveAsync(product);
                analytics.id = await redb.SaveAsync(analytics);
            }

            logger.LogInformation($"‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω: ID={product.id}, Name='{product.name}'");
            logger.LogInformation($"‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID={analytics.id}, Name='{analytics.name}'");
            logger.LogInformation("");

            // === –ü–û–õ–ò–ú–û–†–§–ù–ê–Ø –†–ê–ë–û–¢–ê –° –û–ë–™–ï–ö–¢–ê–ú–ò ===
            logger.LogInformation("üéØ === –ü–û–õ–ò–ú–û–†–§–ù–ê–Ø –†–ê–ë–û–¢–ê –ë–ï–ó –î–ñ–ï–ù–ï–†–ò–ö–û–í ===");
            
            // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            List<RedbObject> objects = new List<RedbObject> { product, analytics };
            
            logger.LogInformation($"üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {objects.Count} –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤:");
            
            foreach (var obj in objects)
            {
                logger.LogInformation($"  üîç –û–±—ä–µ–∫—Ç: ID={obj.id}, Name='{obj.name}', Scheme={obj.scheme_id}");
                
                // üöÄ –ö–†–ê–°–ò–í–´–ô API: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ë–ï–ó –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤!
                var canEdit = await redb.CanUserEditObject(obj);
                var canDelete = await redb.CanUserDeleteObject(obj);
                
                logger.LogInformation($"    üîê –ü—Ä–∞–≤–∞: Edit={canEdit}, Delete={canDelete}");
                logger.LogInformation($"    üìÖ –°–æ–∑–¥–∞–Ω: {obj.date_create:yyyy-MM-dd HH:mm:ss}");
                logger.LogInformation($"    üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {obj.owner_id}");
            }
            
            logger.LogInformation("");

            // === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –£–î–ê–õ–ï–ù–ò–Ø ===
            logger.LogInformation("üóëÔ∏è === –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï –ë–ï–ó –î–ñ–ï–ù–ï–†–ò–ö–û–í ===");
            
            using (redb.CreateSystemContext())
            {
                foreach (var obj in objects)
                {
                    logger.LogInformation($"üóëÔ∏è –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç: {obj.name} (ID: {obj.id})");
                    
                    // üöÄ –ö–†–ê–°–ò–í–´–ô API: –£–¥–∞–ª–µ–Ω–∏–µ –ë–ï–ó –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤ (–ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è - —Ç—Ä–µ–±—É–µ—Ç generic —Ç–∏–ø)
                    // var deleted = await redb.DeleteAsync(obj); // ‚ùå –¢—Ä–µ–±—É–µ—Ç generic —Ç–∏–ø
                    logger.LogInformation($"    ‚ö†Ô∏è –ü–æ–ª–∏–º–æ—Ä—Ñ–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è - —Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–≥–æ generic —Ç–∏–ø–∞");
                    logger.LogInformation($"    üí° –í –±—É–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω–æ–≥–æ API");
                }
            }
            
            logger.LogInformation("");
            logger.LogInformation("üéâ === –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ ===");
            logger.LogInformation("  ‚úÖ –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∑—ã–≤–∞—Ç—å –¥–∂–µ–Ω–µ—Ä–∏–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
            logger.LogInformation("  ‚úÖ –ü–æ–ª–∏–º–æ—Ä—Ñ–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤");
            logger.LogInformation("  ‚úÖ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π");
            logger.LogInformation("  ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤");
            logger.LogInformation("  ‚úÖ –≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –∏ —á–∏—Ç–∞–µ–º—ã–π –∫–æ–¥");
            logger.LogInformation("");
            logger.LogInformation("üöÄ –ü–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π API –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!");
        }
    }
}
