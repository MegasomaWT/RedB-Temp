using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using redb.Core.Postgres;
using redb.Core;
using redb.Core.Models.Entities;
using redb.Core.Models.Configuration;
using redb.Core.Providers;
using redb.Core.Postgres.Providers;
using redb.Core.Models.Security;
using redb.Core.Serialization;
using redb.ConsoleTest.TestStages;
using redb.ConsoleTest.Models;
using redb.ConsoleTest;

internal class Program
    {
        static async Task Main(string[] args)
        {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            var services = new ServiceCollection();
            ConfigureServices(services);
            
            var provider = services.BuildServiceProvider();
            var logger = provider.GetRequiredService<ILoggerFactory>().CreateLogger("ConsoleTest");

            try
            {
                // ‚úÖ –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò REDB
                ConfigureRedbGlobalSettings(provider, logger);

                var redb = provider.GetRequiredService<IRedbService>();
                var stageManager = new TestStageManager();

                // –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                if (args.Length == 0)
                {
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —ç—Ç–∞–ø—ã
                    await stageManager.ExecuteAllStagesAsync(logger, redb);
                }
                else if (args.Contains("--help") || args.Contains("-h"))
                {
                    ShowHelp(logger);
                }
                else if (args.Contains("--list") || args.Contains("-l"))
                {
                    stageManager.ShowAvailableStages(logger);
                }
                else if (args.Contains("--demo"))
                {
                    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ—Ö–∞–Ω–∏–∑–º–∞ Reflection Change Tracking
                    // TestReflectionMechanism.DemoReflectionTracking(); // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å TestReflectionMechanism
                    logger.LogWarning("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Reflection –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞");
                }
                else if (args.Contains("--stages") || args.Contains("-s"))
                {
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã
                    var stagesArg = GetArgumentValue(args, "--stages") ?? GetArgumentValue(args, "-s");
                    if (string.IsNullOrEmpty(stagesArg))
                    {
                        logger.LogError("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–æ–º–µ—Ä–∞ —ç—Ç–∞–ø–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: --stages 1,3,13");
                        return;
                    }

                    var stageNumbers = ParseStageNumbers(stagesArg);
                    if (stageNumbers.Any())
                    {
                        await stageManager.ExecuteStagesAsync(logger, redb, stageNumbers);
                    }
                    else
                    {
                        logger.LogError("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–æ–≤ —ç—Ç–∞–ø–æ–≤: {stages}", stagesArg);
                    }
                }
                else
                {
                    logger.LogError("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏");
                }
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ");
                Console.WriteLine(ex);
            }
        }

        private static void ConfigureServices(ServiceCollection services)
        {
            // –û–ø—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
            bool detailedLogging = false; // üîç –í–ö–õ–Æ–ß–ê–ï–ú –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ EF –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ChangeTracking!

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            services.AddLogging(b =>
            {
                b.ClearProviders(); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                b.AddProvider(new SimpleConsoleLoggerProvider()) // –ù–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
                 .SetMinimumLevel(LogLevel.Information);

                if (!detailedLogging)
                {
                    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –ª–æ–≥–∏ EF Core –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    b.AddFilter("Microsoft.EntityFrameworkCore", LogLevel.None); // –í—Å–µ EF Core –ª–æ–≥–∏
                    b.AddFilter("Microsoft.EntityFrameworkCore.Database.Command", LogLevel.None); // SQL –∑–∞–ø—Ä–æ—Å—ã
                    b.AddFilter("Microsoft.EntityFrameworkCore.Query", LogLevel.None); // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∑–∞–ø—Ä–æ—Å–∞—Ö
                    b.AddFilter("Microsoft.EntityFrameworkCore.Update", LogLevel.None); // –û–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    b.AddFilter("Microsoft.EntityFrameworkCore.Infrastructure", LogLevel.None); // –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ª–æ–≥–∏
                    b.AddFilter("Microsoft.EntityFrameworkCore.Model", LogLevel.None); // –ú–æ–¥–µ–ª—å
                    b.AddFilter("Microsoft.EntityFrameworkCore.Migrations", LogLevel.None); // –ú–∏–≥—Ä–∞—Ü–∏–∏
                }
            });

            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ–¥ –≤–∞—à—É —Å—Ä–µ–¥—É)
            var connectionString = "Host=localhost;Port=5432;Username=postgres;Password=rjkmwjnmvs;Database=redb;Pooling=true;";

            services.AddDbContext<redb.Core.Postgres.RedbContext>(options =>
            {
                options.UseNpgsql(connectionString);
                
                // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ EF Core –Ω–∞ —É—Ä–æ–≤–Ω–µ DbContext
                if (!detailedLogging)
                {
                    options.UseLoggerFactory(LoggerFactory.Create(builder => { })); // –ü—É—Å—Ç–æ–π –ª–æ–≥–≥–µ—Ä
                    options.EnableSensitiveDataLogging(false); // –û—Ç–∫–ª—é—á–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    options.EnableDetailedErrors(false); // –û—Ç–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
                }
                else
                {
                    options.EnableSensitiveDataLogging(true); // –í–∫–ª—é—á–∞–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    options.EnableDetailedErrors(true); // –í–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    
                    // üîç –õ–û–ì–ò–†–û–í–ê–ù–ò–ï SQL –ö–û–ú–ê–ù–î –í –ö–û–ù–°–û–õ–¨ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    options.LogTo(Console.WriteLine, LogLevel.Information);
                }
            });

            services.AddScoped<IRedbService, RedbService>();

            // ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è REDB
            services.AddScoped<ISchemeSyncProvider, PostgresSchemeSyncProvider>();
            services.AddScoped<IObjectStorageProvider, PostgresObjectStorageProvider>();
            services.AddScoped<IUserProvider, PostgresUserProvider>();
            services.AddScoped<IPermissionProvider, PostgresPermissionProvider>();
            services.AddScoped<IRedbObjectSerializer, SystemTextJsonRedbSerializer>();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    services.AddSingleton(new RedbServiceConfiguration
        {
            EavSaveStrategy = EavSaveStrategy.DeleteInsert  // üîÑ ChangeTracking –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞ (–º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ —Ç–æ—á–Ω–µ–µ)
        });
        }

        private static void ConfigureRedbGlobalSettings(ServiceProvider provider, ILogger logger)
        {
            logger.LogInformation("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º REDB —Å –Ω–æ–≤–æ–π –ø–∞—Ä–∞–¥–∏–≥–º–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...");

            // üöÄ –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            var configuration = provider.GetRequiredService<RedbServiceConfiguration>();
            RedbObject<ProductTestProps>.SetConfiguration(configuration);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            var schemeProvider = provider.GetRequiredService<ISchemeSyncProvider>();
            RedbObject.SetSchemeSyncProvider(schemeProvider);

            logger.LogInformation("‚úÖ –ù–û–í–ê–Ø –ü–ê–†–ê–î–ò–ì–ú–ê –í–ö–õ–Æ–ß–ï–ù–ê!");
            logger.LogInformation($"‚úÖ EAV Strategy: {configuration.EavSaveStrategy} (—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã, UUID —Ö–µ—à–∏, NULL —Å–µ–º–∞–Ω—Ç–∏–∫–∞)");
            logger.LogInformation("‚úÖ –§—É–Ω–∫—Ü–∏–∏: SaveArrayFieldAsync, SaveClassFieldAsync, SaveSimpleFieldAsync");
        }

        private static string? GetArgumentValue(string[] args, string argumentName)
        {
            var index = Array.IndexOf(args, argumentName);
            if (index >= 0 && index + 1 < args.Length)
            {
                return args[index + 1];
            }
            return null;
        }

        private static int[] ParseStageNumbers(string stagesArg)
        {
            try
            {
                return stagesArg.Split(',', StringSplitOptions.RemoveEmptyEntries)
                    .Select(s => int.Parse(s.Trim()))
                    .ToArray();
            }
            catch
            {
                return Array.Empty<int>();
            }
        }

        private static void ShowHelp(ILogger logger)
        {
            logger.LogInformation("üöÄ === REDB CONSOLE TEST - –°–ü–†–ê–í–ö–ê ===");
            logger.LogInformation("");
            logger.LogInformation("–ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ REDB");
            logger.LogInformation("–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: TESTING_GUIDE.md");
            logger.LogInformation("");
            logger.LogInformation("üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:");
            logger.LogInformation("  dotnet run                    - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —ç—Ç–∞–ø—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
            logger.LogInformation("  dotnet run --stages 1,3,13    - –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç–∞–ø—ã 1, 3 –∏ 13");
            logger.LogInformation("  dotnet run --list             - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤");
            logger.LogInformation("  dotnet run --help             - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É");
            logger.LogInformation("");
            logger.LogInformation("üîß –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:");
            logger.LogInformation("  -s –≤–º–µ—Å—Ç–æ --stages");
            logger.LogInformation("  -l –≤–º–µ—Å—Ç–æ --list");
            logger.LogInformation("  -h –≤–º–µ—Å—Ç–æ --help");
            logger.LogInformation("");
            logger.LogInformation("üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã:");
            logger.LogInformation("  1  - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
            logger.LogInformation("  2  - –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞");
            logger.LogInformation("  3  - Code-First —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã");
            logger.LogInformation("  4  - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–∞–≤");
            logger.LogInformation("  5  - –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞");
            logger.LogInformation("  6  - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞");
            logger.LogInformation("  7  - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞");
            logger.LogInformation("  8  - –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞");
            logger.LogInformation("  9  - –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ");
            logger.LogInformation("  10 - –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑");
            logger.LogInformation("  11 - –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤");
            logger.LogInformation("  12 - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä");
            logger.LogInformation("  13 - –û—Å–Ω–æ–≤–Ω—ã–µ LINQ-–∑–∞–ø—Ä–æ—Å—ã (Where, Count)");
            logger.LogInformation("  16 - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ LINQ (Any, WhereIn)");
            logger.LogInformation("  17 - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ LINQ (All, Select, Distinct)");
            logger.LogInformation("  18 - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è");
            logger.LogInformation("  19 - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–∞–º");
            logger.LogInformation("  30 - üÜï –£–ª—É—á—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–µ—Ä–µ–≤—å–µ–≤");
            logger.LogInformation("  41 - üöÄ LINQ –ù–æ–≤–∞—è –ü–∞—Ä–∞–¥–∏–≥–º–∞ (nullable, —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–µ, StringComparison)");
            logger.LogInformation("");
            logger.LogInformation("üî¨ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:");
            logger.LogInformation("  DETAILED_LOGGING=true         - –≤–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ EF Core");
            logger.LogInformation("");
            logger.LogInformation("üí° –ü—Ä–∏–º–µ—Ä—ã:");
            logger.LogInformation("  dotnet run --stages 1,2,3     - –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏");
            logger.LogInformation("  dotnet run --stages 4,5,6,7,8 - CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏");
            logger.LogInformation("  dotnet run --stages 9,10,11   - –∞–Ω–∞–ª–∏–∑ –ë–î –∏ —É–¥–∞–ª–µ–Ω–∏–µ");
            logger.LogInformation("  dotnet run --stages 12        - –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã");
            logger.LogInformation("  dotnet run --stages 13,16,17  - –≤—Å–µ LINQ —Ç–µ—Å—Ç—ã");
            logger.LogInformation("  dotnet run --stages 18,19     - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è");
            logger.LogInformation("  dotnet run --stages 12,30     - –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤");
            logger.LogInformation("  dotnet run --stages 30        - —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è");
            logger.LogInformation("");
            logger.LogInformation("‚ö†Ô∏è  –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:");
            logger.LogInformation("  - PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞");
            logger.LogInformation("  - –°—Ö–µ–º–∞ REDB —Å–æ–∑–¥–∞–Ω–∞ (redbPostgre.sql)");
            logger.LogInformation("  - –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞");
        }
    }
