using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using redb.Core;
using redb.Core.Postgres;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace redb.ConsoleTest.Utils
{
    /// <summary>
    /// –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    /// </summary>
    public static class DatabaseAnalysisUtils
    {
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–∫—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: –ø–æ–ª—è _objects –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ _values
        /// </summary>
        public static async Task CheckObjectInDatabase(IRedbService redb, long objectId, ILogger logger)
        {
            var redbService = (RedbService)redb;
            var context = GetRedbContext(redbService);

            // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –æ–±—ä–µ–∫—Ç–∞ –∏–∑ _objects
            var objData = await context.Objects
                .Where(o => o.Id == objectId)
                .Select(o => new
                {
                    o.Id,
                    o.Name,
                    o.Note,
                    o.IdScheme,
                    o.IdOwner,
                    o.IdWhoChange,
                    o.DateCreate,
                    o.DateModify,
                    o.Hash,
                    o.Bool,
                    o.Key,
                    o.CodeInt,
                    o.CodeString,
                    o.CodeGuid
                })
                .FirstOrDefaultAsync();

            if (objData == null)
            {
                logger.LogWarning("–û–±—ä–µ–∫—Ç {objectId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ _objects", objectId);
                return;
            }

            logger.LogInformation("–û–±—ä–µ–∫—Ç {id} –≤ _objects:", objData.Id);
            logger.LogInformation("  Name: {name}", objData.Name);
            logger.LogInformation("  Note: {note}", objData.Note);
            logger.LogInformation("  Scheme: {scheme}, Owner: {owner}, WhoChange: {whoChange}",
                objData.IdScheme, objData.IdOwner, objData.IdWhoChange);
            logger.LogInformation("  Created: {created}, Modified: {modified}",
                objData.DateCreate, objData.DateModify);
            logger.LogInformation("  Hash: {hash}", objData.Hash);
            logger.LogInformation("  Bool: {bool}, Key: {key}", objData.Bool, objData.Key);
            logger.LogInformation("  CodeInt: {codeInt}, CodeString: {codeString}, CodeGuid: {codeGuid}",
                objData.CodeInt, objData.CodeString, objData.CodeGuid);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ _values –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            var values = await context.Values
                .Where(v => v.IdObject == objectId)
                .Join(context.Structures, v => v.IdStructure, s => s.Id, (v, s) => new
                {
                    StructureName = s.Name,
                    StructureType = s.TypeNavigation.DbType,
                    IsArray = s.IsArray,
                    StoreNull = s.StoreNull,
                    v.String,
                    v.Long,
                    v.Guid,
                    v.Double,
                    v.DateTime,
                    v.Boolean,
                    v.ByteArray,
                    v.ArrayParentId,
                    v.ArrayIndex
                })
                .ToListAsync();

            logger.LogInformation("–ó–Ω–∞—á–µ–Ω–∏—è –≤ _values ({count} –∑–∞–ø–∏—Å–µ–π):", values.Count);
            foreach (var val in values)
            {
                var actualValue = GetActualValue(val);
                logger.LogInformation("  {name} ({type}{array}): {value}",
                    val.StructureName,
                    val.StructureType,
                    val.IsArray == true ? "[]" : "",
                    actualValue ?? "<NULL>");
            }

            // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –º–∞—Å—Å–∏–≤–æ–≤
            var arrayRecords = values.Where(v => v.ArrayParentId != null || 
                                                 (v.ArrayParentId == null && v.Guid != null && 
                                                  v.String == null && v.Long == null && v.Double == null && 
                                                  v.DateTime == null && v.Boolean == null && v.ByteArray == null))
                                     .ToList();
            
            if (arrayRecords.Any())
            {
                logger.LogInformation("");
                logger.LogInformation("üîç === –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–õ–Ø–¶–ò–û–ù–ù–´–• –ú–ê–°–°–ò–í–û–í ({count} –∑–∞–ø–∏—Å–µ–π) ===", arrayRecords.Count);
                
                var baseRecords = arrayRecords.Where(r => r.ArrayParentId == null).ToList();
                var elementRecords = arrayRecords.Where(r => r.ArrayParentId != null).ToList();
                
                foreach (var baseRecord in baseRecords)
                {
                    logger.LogInformation("  üì¶ –ë–∞–∑–æ–≤–∞—è –∑–∞–ø–∏—Å—å –º–∞—Å—Å–∏–≤–∞ '{name}': Guid={guid}",
                        baseRecord.StructureName, baseRecord.Guid);
                    
                    // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID –∑–∞–ø–∏—Å–∏ - –Ω–æ —ç—Ç–æ —Å–ª–æ–∂–Ω–æ –∏–∑ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Ç–∏–ø–∞
                    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –∏–º–µ–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    var relatedElements = elementRecords.Where(e => e.StructureName == baseRecord.StructureName)
                                                       .OrderBy(e => e.ArrayIndex).ToList();
                    foreach (var element in relatedElements)
                    {
                        var elementValue = GetSimpleValue(element);
                        logger.LogInformation("    ‚îî‚îÄ [{index}] Parent:{parent} = {value}",
                            element.ArrayIndex, element.ArrayParentId, elementValue ?? "<NULL>");
                    }
                    
                    if (!relatedElements.Any())
                    {
                        logger.LogInformation("    ‚îî‚îÄ (—ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)");
                    }
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–æ–≤
                if (elementRecords.Any())
                {
                    logger.LogInformation("  üîó –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–æ–≤ ({count}):", elementRecords.Count);
                    foreach (var element in elementRecords.OrderBy(e => e.StructureName).ThenBy(e => e.ArrayIndex))
                    {
                        var elementValue = GetSimpleValue(element);
                        logger.LogInformation("    ‚îî‚îÄ {name}[{index}] Parent:{parent} = {value}",
                            element.StructureName, element.ArrayIndex, element.ArrayParentId, elementValue ?? "<NULL>");
                    }
                }
            }
        }

        /// <summary>
        /// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        /// </summary>
        public static async Task CompareObjectsInDatabase(IRedbService redb, long[] objectIds, ILogger logger)
        {
            var redbService = (RedbService)redb;
            var context = GetRedbContext(redbService);

            foreach (var objectId in objectIds)
            {
                logger.LogInformation("--- –û–±—ä–µ–∫—Ç {id} ---", objectId);

                // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
                var obj = await context.Objects.FindAsync(objectId);
                if (obj == null)
                {
                    logger.LogWarning("–û–±—ä–µ–∫—Ç {id} –Ω–µ –Ω–∞–π–¥–µ–Ω", objectId);
                    continue;
                }

                logger.LogInformation("–ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è: name='{name}', scheme={scheme}, hash={hash}",
                    obj.Name, obj.IdScheme, obj.Hash);

                // –°–≤–æ–π—Å—Ç–≤–∞ (generic fields)
                var valueCount = await context.Values.CountAsync(v => v.IdObject == objectId);
                var propertyNames = await context.Values
                    .Where(v => v.IdObject == objectId)
                    .Join(context.Structures, v => v.IdStructure, s => s.Id, (v, s) => s.Name)
                    .ToListAsync();

                logger.LogInformation("–î–∂–µ–Ω–µ—Ä–∏–∫ —Å–≤–æ–π—Å—Ç–≤–∞ ({count}): {names}",
                    valueCount, string.Join(", ", propertyNames));
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        /// </summary>
        public static async Task<bool> CheckObjectExists(IRedbService redb, long objectId)
        {
            var redbService = (RedbService)redb;
            var context = GetRedbContext(redbService);
            return await context.Objects.AnyAsync(o => o.Id == objectId);
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ –∞—Ä—Ö–∏–≤–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö
        /// </summary>
        public static async Task<bool> CheckObjectInArchive(IRedbService redb, long objectId)
        {
            var redbService = (RedbService)redb;
            var context = GetRedbContext(redbService);
            return await context.Database
                .SqlQueryRaw<long>("SELECT _id FROM _deleted_objects WHERE _id = {0}", objectId)
                .AnyAsync();
        }

        /// <summary>
        /// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∞—Ä—Ö–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏
        /// </summary>
        public static async Task ShowArchivedObjectDetails(IRedbService redb, long objectId, ILogger logger)
        {
            var redbService = (RedbService)redb;
            var context = GetRedbContext(redbService);

            logger.LogInformation("");
            logger.LogInformation("üìã === –î–ï–¢–ê–õ–ò –ê–†–•–ò–í–ù–û–ô –ó–ê–ü–ò–°–ò ===");

            // –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—É—é –∑–∞–ø–∏—Å—å
            var archivedRecord = await context.Database
                .SqlQueryRaw<ArchivedObjectRecord>(@"
                    SELECT _id, _name, _note, _date_create, _date_modify, _date_delete, 
                           _values, _hash, _id_scheme, _id_owner, _id_who_change
                    FROM _deleted_objects 
                    WHERE _id = {0}", objectId)
                .FirstOrDefaultAsync();

            if (archivedRecord == null)
            {
                logger.LogWarning("–ê—Ä—Ö–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {objectId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", objectId);
                return;
            }

            logger.LogInformation("–ê—Ä—Ö–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–±—ä–µ–∫—Ç–∞ {id}:", archivedRecord._id);
            logger.LogInformation("  Name: {name}", archivedRecord._name);
            logger.LogInformation("  Note: {note}", archivedRecord._note);
            logger.LogInformation("  Scheme: {scheme}, Owner: {owner}, WhoChange: {whoChange}",
                archivedRecord._id_scheme, archivedRecord._id_owner, archivedRecord._id_who_change);
            logger.LogInformation("  Created: {created}, Modified: {modified}, Deleted: {deleted}",
                archivedRecord._date_create, archivedRecord._date_modify, archivedRecord._date_delete);
            logger.LogInformation("  Hash: {hash}", archivedRecord._hash);

            logger.LogInformation("");
            logger.LogInformation("üìÑ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ _values (JSON):");
            if (string.IsNullOrEmpty(archivedRecord._values))
            {
                logger.LogInformation("  (–Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π)");
            }
            else
            {
                try
                {
                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    var jsonObj = System.Text.Json.JsonSerializer.Deserialize<object>(archivedRecord._values);
                    var formattedJson = System.Text.Json.JsonSerializer.Serialize(jsonObj, new System.Text.Json.JsonSerializerOptions
                    {
                        WriteIndented = true
                    });

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ JSON –¥–ª—è –æ–±–∑–æ—Ä–∞
                    var preview = formattedJson.Length > 500 ? formattedJson.Substring(0, 500) + "..." : formattedJson;
                    logger.LogInformation("  JSON Preview ({length} chars):", formattedJson.Length);
                    logger.LogInformation("{preview}", preview);
                }
                catch (Exception ex)
                {
                    logger.LogWarning("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {error}", ex.Message);
                    logger.LogInformation("  Raw Values: {values}", archivedRecord._values);
                }
            }
        }

        /// <summary>
        /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∑–∞–ø–∏—Å–∏ _values
        /// </summary>
        private static object? GetActualValue(dynamic valueRecord)
        {
            // ‚úÖ –ù–û–í–ê–Ø –ü–ê–†–ê–î–ò–ì–ú–ê: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤
            if (valueRecord.ArrayParentId != null)
            {
                // –≠—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∏–Ω–¥–µ–∫—Å –∏ —Ä–æ–¥–∏—Ç–µ–ª—è
                var elementValue = GetSimpleValue(valueRecord);
                return $"<ArrayElement[{valueRecord.ArrayIndex ?? "?"}] Parent:{valueRecord.ArrayParentId}> = {elementValue}";
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ Guid (–≤–æ–∑–º–æ–∂–Ω–æ –±–∞–∑–æ–≤–∞—è –∑–∞–ø–∏—Å—å –º–∞—Å—Å–∏–≤–∞)
            if (valueRecord.Guid != null && IsOnlyGuidSet(valueRecord))
            {
                return $"<ArrayBase: {valueRecord.Guid}>";
            }

            // –û–±—ã—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ-null –∑–Ω–∞—á–µ–Ω–∏–µ
            return GetSimpleValue(valueRecord);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∑–∞–ø–∏—Å–∏ (–±–µ–∑ –º–∞—Å—Å–∏–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏)
        /// </summary>
        private static object? GetSimpleValue(dynamic valueRecord)
        {
            if (valueRecord.String != null) return valueRecord.String;
            if (valueRecord.Long != null) return valueRecord.Long;
            if (valueRecord.Guid != null) return valueRecord.Guid;
            if (valueRecord.Double != null) return valueRecord.Double;
            if (valueRecord.DateTime != null) return valueRecord.DateTime;
            if (valueRecord.Boolean != null) return valueRecord.Boolean;
            if (valueRecord.ByteArray != null) return $"<ByteArray[{((byte[])valueRecord.ByteArray).Length}]>";

            return null;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ –∑–∞–ø–∏—Å–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ Guid (–ø—Ä–∏–∑–Ω–∞–∫ –±–∞–∑–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –º–∞—Å—Å–∏–≤–∞)
        /// </summary>
        private static bool IsOnlyGuidSet(dynamic valueRecord)
        {
            return valueRecord.String == null && 
                   valueRecord.Long == null && 
                   valueRecord.Double == null && 
                   valueRecord.DateTime == null && 
                   valueRecord.Boolean == null && 
                   valueRecord.ByteArray == null &&
                   valueRecord.ArrayParentId == null;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ë–î —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!)
        /// </summary>
        private static redb.Core.Postgres.RedbContext GetRedbContext(RedbService redbService)
        {
            var context = redbService.GetType().GetField("_context",
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)?.GetValue(redbService)
                as redb.Core.Postgres.RedbContext;

            if (context == null)
            {
                throw new InvalidOperationException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å RedbContext –∏–∑ RedbService");
            }

            return context;
        }
    }
}
