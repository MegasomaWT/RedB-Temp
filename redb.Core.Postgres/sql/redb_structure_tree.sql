-- ====================================================================================================
-- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ï–†–ï–í–û–ú –°–¢–†–£–ö–¢–£–† –°–•–ï–ú–´
-- ====================================================================================================
-- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º: parent ‚Üí children ‚Üí descendants
-- –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –ø–ª–æ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä –≤ SaveAsync
-- ====================================================================================================

-- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä —Å—Ö–µ–º—ã (–ü–†–û–°–¢–û–ô –ü–û–î–•–û–î)
-- ‚úÖ –ü–†–û–°–¢–ê–Ø –ò –ü–û–ù–Ø–¢–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ–π ‚Üí –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–µ–π —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
CREATE OR REPLACE FUNCTION get_scheme_structure_tree(
    scheme_id bigint,
    parent_id bigint DEFAULT NULL,
    max_depth integer DEFAULT 10
) RETURNS jsonb
LANGUAGE 'plpgsql'
COST 100
VOLATILE NOT LEAKPROOF
AS $BODY$
DECLARE
    result jsonb := '[]'::jsonb;
    structure_record RECORD;
    children_json jsonb;
BEGIN
    -- –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏
    IF max_depth <= 0 THEN
        RETURN jsonb_build_array(jsonb_build_object('error', 'Max recursion depth reached'));
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã
    IF NOT EXISTS(SELECT 1 FROM _schemes WHERE _id = scheme_id) THEN
        RETURN jsonb_build_array(jsonb_build_object('error', 'Scheme not found'));
    END IF;
    
    -- ‚úÖ –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê: –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¢–ï–ö–£–©–ï–ì–û –£–†–û–í–ù–Ø
    FOR structure_record IN
        SELECT 
            s._id,
            s._name,
            s._order,
            s._is_array,
            s._store_null,
            s._allow_not_null,
            t._name as type_name,
            t._db_type as db_type,
            t._type as type_semantic
        FROM _structures s
        JOIN _types t ON t._id = s._id_type
        WHERE s._id_scheme = scheme_id
          AND ((parent_id IS NULL AND s._id_parent IS NULL) 
               OR (parent_id IS NOT NULL AND s._id_parent = parent_id))
        ORDER BY s._order, s._id
    LOOP
        -- ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ï–°–¢–¨ –õ–ò –î–ï–¢–ò —É –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        IF EXISTS(SELECT 1 FROM _structures 
                 WHERE _id_scheme = scheme_id 
                   AND _id_parent = structure_record._id) THEN
            -- üîÑ –†–ï–ö–£–†–°–ò–í–ù–û –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–µ–π (–ø—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏!)
            children_json := get_scheme_structure_tree(scheme_id, structure_record._id, max_depth - 1);
        ELSE
            -- –ù–µ—Ç –¥–µ—Ç–µ–π - –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            children_json := '[]'::jsonb;
        END IF;
        
        -- ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –°–¢–†–£–ö–¢–£–†–£ –í –†–ï–ó–£–õ–¨–¢–ê–¢ (–ø—Ä–æ—Å—Ç–æ–µ –∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ)
        result := result || jsonb_build_array(
            jsonb_build_object(
                'structure_id', structure_record._id,
                'name', structure_record._name,
                'order', structure_record._order,
                'is_array', structure_record._is_array,
                'store_null', structure_record._store_null,
                'allow_not_null', structure_record._allow_not_null,
                'type_name', structure_record.type_name,
                'db_type', structure_record.db_type,
                'type_semantic', structure_record.type_semantic,
                'children', children_json  -- ‚úÖ –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–µ—Ç–∏
            )
        );
    END LOOP;
    
    RETURN result;
END;
$BODY$;

-- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä  
CREATE OR REPLACE FUNCTION get_structure_children(
    scheme_id bigint,
    parent_id bigint
) RETURNS jsonb
LANGUAGE 'plpgsql'
COST 50
VOLATILE NOT LEAKPROOF
AS $BODY$
BEGIN
    RETURN (
        SELECT COALESCE(jsonb_agg(
            jsonb_build_object(
                'structure_id', s._id,
                'name', s._name,
                'order', s._order,
                'is_array', s._is_array,
                'type_name', t._name,
                'db_type', t._db_type,
                'type_semantic', t._type
            ) ORDER BY s._order, s._id
        ), '[]'::jsonb)
        FROM _structures s
        JOIN _types t ON t._id = s._id_type
        WHERE s._id_scheme = scheme_id
          AND s._id_parent = parent_id
    );
END;
$BODY$;

-- –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä –Ω–∞ –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å
CREATE OR REPLACE FUNCTION validate_structure_tree(
    scheme_id bigint
) RETURNS jsonb
LANGUAGE 'plpgsql'
COST 100
VOLATILE NOT LEAKPROOF
AS $BODY$
DECLARE
    validation_result jsonb;
    excessive_structures jsonb;
    orphaned_structures jsonb;
    circular_references jsonb;
BEGIN
    -- 1. –ü–æ–∏—Å–∫ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä (—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–µ–∑ —Å–≤—è–∑–µ–π —Å values)
    SELECT jsonb_agg(
        jsonb_build_object(
            'structure_id', s._id,
            'name', s._name,
            'parent_name', parent_s._name,
            'issue', 'No values found - possibly excessive structure'
        )
    ) INTO excessive_structures
    FROM _structures s
    LEFT JOIN _structures parent_s ON parent_s._id = s._id_parent
    LEFT JOIN _values v ON v._id_structure = s._id
    WHERE s._id_scheme = scheme_id
      AND v._id IS NULL  -- –ù–µ—Ç values –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      AND s._id_parent IS NOT NULL; -- –¢–æ–ª—å–∫–æ –¥–æ—á–µ—Ä–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    
    -- 2. –ü–æ–∏—Å–∫ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä (parent –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    SELECT jsonb_agg(
        jsonb_build_object(
            'structure_id', s._id,
            'name', s._name,
            'parent_id', s._id_parent,
            'issue', 'Parent structure does not exist'
        )
    ) INTO orphaned_structures
    FROM _structures s
    WHERE s._id_scheme = scheme_id
      AND s._id_parent IS NOT NULL
      AND NOT EXISTS(SELECT 1 FROM _structures parent_s WHERE parent_s._id = s._id_parent);
    
    -- 3. –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ —Å–µ–±—è —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É)
    WITH RECURSIVE cycle_check AS (
        SELECT _id, _id_parent, ARRAY[_id] as path, false as has_cycle
        FROM _structures WHERE _id_scheme = scheme_id AND _id_parent IS NOT NULL
        
        UNION ALL
        
        SELECT s._id, s._id_parent, cc.path || s._id, s._id = ANY(cc.path)
        FROM _structures s
        JOIN cycle_check cc ON cc._id_parent = s._id
        WHERE NOT cc.has_cycle AND array_length(cc.path, 1) < 50
    )
    SELECT jsonb_agg(
        jsonb_build_object(
            'structure_id', _id,
            'path', path,
            'issue', 'Circular reference detected'
        )
    ) INTO circular_references
    FROM cycle_check 
    WHERE has_cycle;
    
    -- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    validation_result := jsonb_build_object(
        'scheme_id', scheme_id,
        'validation_date', NOW(),
        'excessive_structures', COALESCE(excessive_structures, '[]'::jsonb),
        'orphaned_structures', COALESCE(orphaned_structures, '[]'::jsonb), 
        'circular_references', COALESCE(circular_references, '[]'::jsonb),
        'total_structures', (SELECT COUNT(*) FROM _structures WHERE _id_scheme = scheme_id),
        'is_valid', (excessive_structures IS NULL AND orphaned_structures IS NULL AND circular_references IS NULL)
    );
    
    RETURN validation_result;
END;
$BODY$;

-- –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫)
CREATE OR REPLACE FUNCTION get_structure_descendants(
    scheme_id bigint,
    parent_id bigint
) RETURNS jsonb
LANGUAGE 'plpgsql'  
COST 100
VOLATILE NOT LEAKPROOF
AS $BODY$
BEGIN
    RETURN (
        WITH RECURSIVE descendants AS (
            -- –ü—Ä—è–º—ã–µ –¥–æ—á–µ—Ä–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            SELECT _id, _name, _id_parent, 0 as level
            FROM _structures 
            WHERE _id_scheme = scheme_id AND _id_parent = parent_id
            
            UNION ALL
            
            -- –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—Å–µ –ø–æ—Ç–æ–º–∫–∏
            SELECT s._id, s._name, s._id_parent, d.level + 1
            FROM _structures s
            JOIN descendants d ON d._id = s._id_parent
            WHERE s._id_scheme = scheme_id AND d.level < 10
        )
        SELECT COALESCE(jsonb_agg(
            jsonb_build_object(
                'structure_id', _id,
                'name', _name, 
                'parent_id', _id_parent,
                'level', level
            ) ORDER BY level, _id
        ), '[]'::jsonb)
        FROM descendants
    );
END;
$BODY$;

-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –¥–µ—Ä–µ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä
COMMENT ON FUNCTION get_scheme_structure_tree(bigint, bigint, integer) IS '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä —Å—Ö–µ–º—ã —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã —Ä–µ–∫—É—Ä—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgresSchemeSyncProvider –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä –≤ SaveAsync.';

COMMENT ON FUNCTION get_structure_children(bigint, bigint) IS '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏. –ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–µ—Ä–µ–≤—É.';

COMMENT ON FUNCTION validate_structure_tree(bigint) IS '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–µ—Ä–µ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä: –ø–æ–∏—Å–∫ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä, –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫, —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π. –ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∫–∞–∫ —Å Address.Details.Tags1.';

COMMENT ON FUNCTION get_structure_descendants(bigint, bigint) IS '–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –ø–ª–æ—Å–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏. –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥–ª—É–±–æ–∫–∏—Ö –∏–µ—Ä–∞—Ä—Ö–∏–π.';
