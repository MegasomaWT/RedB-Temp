DROP VIEW IF EXISTS v_objects_json;
DROP FUNCTION IF EXISTS get_object_json;
DROP FUNCTION IF EXISTS build_hierarchical_properties_optimized;

-- ===== –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

-- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏—Ö properties —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ values
CREATE OR REPLACE FUNCTION build_hierarchical_properties_optimized(
    object_id bigint,
    parent_structure_id bigint,
    object_scheme_id bigint,
    all_values_json jsonb,
    max_depth integer DEFAULT 10,
    array_index integer DEFAULT NULL -- –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞
) RETURNS jsonb
LANGUAGE 'plpgsql'
COST 100
VOLATILE NOT LEAKPROOF
AS $BODY$
DECLARE
    result_json jsonb := '{}'::jsonb;
    structure_record RECORD;
    current_value jsonb;
    field_value jsonb;
BEGIN
    -- –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏
    IF max_depth <= 0 THEN
        RETURN jsonb_build_object('error', 'Max recursion depth reached for hierarchical fields');
    END IF;
    
    -- –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ parent_structure_id (–ë–ï–ó JOIN —Å _values!)
    FOR structure_record IN
        SELECT 
            s._id as structure_id,
            s._name as field_name,
            s._is_array,
            t._name as type_name,
            t._db_type as db_type,
            t._type as type_semantic
        FROM _structures s
        JOIN _types t ON t._id = s._id_type
        WHERE s._id_scheme = object_scheme_id
          AND ((parent_structure_id IS NULL AND s._id_parent IS NULL) 
               OR (parent_structure_id IS NOT NULL AND s._id_parent = parent_structure_id))
        ORDER BY s._order, s._id
    LOOP
        -- üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º array_index
        IF array_index IS NULL THEN
            -- –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π –∏–ª–∏ –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø–æ–ª–µ–π –º–∞—Å—Å–∏–≤–∞
            current_value := all_values_json->structure_record.structure_id::text;
        ELSE
            -- –î–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ - –∏—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º array_index
            current_value := (
                SELECT jsonb_build_object(
                    '_String', v._String,
                    '_Long', v._Long,
                    '_Guid', v._Guid,
                    '_Double', v._Double,
                    '_DateTime', v._DateTime,
                    '_Boolean', v._Boolean,
                    '_ByteArray', v._ByteArray,
                    '_array_parent_id', v._array_parent_id,
                    '_array_index', v._array_index
                )
                FROM _values v
                WHERE v._id_object = object_id 
                  AND v._id_structure = structure_record.structure_id
                  AND v._array_index = array_index
                LIMIT 1
            );
        END IF;
        
        -- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ç–∏–ø–∞ –∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        field_value := CASE 
            -- –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ _array_index
            WHEN structure_record._is_array = true THEN
                CASE 
                    -- –ú–∞—Å—Å–∏–≤ Class –ø–æ–ª–µ–π - —Å—Ç—Ä–æ–∏–º –∏–∑ —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
                    WHEN structure_record.type_semantic = 'Object' THEN
                        (
                            WITH array_elements AS (
                                -- –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ —Å –∏—Ö –∏–Ω–¥–µ–∫—Å–∞–º–∏
                                SELECT DISTINCT 
                                    v._array_index,
                                    build_hierarchical_properties_optimized(
                                        object_id, 
                                        structure_record.structure_id, 
                                        object_scheme_id, 
                                        all_values_json, 
                                        max_depth - 1,
                                        v._array_index
                                    ) as element_json
                                FROM _values v
                                JOIN _structures s ON s._id = v._id_structure AND s._id_parent = structure_record.structure_id
                                WHERE v._id_object = object_id 
                                  AND v._array_index IS NOT NULL
                                ORDER BY v._array_index
                            )
                            SELECT CASE 
                                WHEN COUNT(*) = 0 THEN NULL  -- ‚úÖ –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ = NULL
                                ELSE jsonb_agg(element_json ORDER BY _array_index)
                            END
                            FROM array_elements
                        )
                    -- –ú–∞—Å—Å–∏–≤—ã –ø—Ä–æ—Å—Ç—ã—Ö —Ç–∏–ø–æ–≤ (String, Long, Boolean, etc.) - —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ
                    ELSE
                        (
                            SELECT CASE 
                                WHEN COUNT(*) = 0 THEN NULL  -- ‚úÖ –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ = NULL
                                ELSE jsonb_agg(
                                CASE 
                                    -- Object —Å—Å—ã–ª–∫–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–Ω—å—à–µ –æ–±—ã—á–Ω—ã—Ö Long
                                    WHEN structure_record.db_type = 'Long' AND structure_record.type_semantic = '_RObject' THEN
                                        get_object_json(v._Long, max_depth - 1)
                                    WHEN structure_record.db_type = 'String' THEN to_jsonb(v._String)
                                    WHEN structure_record.db_type = 'Long' THEN to_jsonb(v._Long)
                                    WHEN structure_record.db_type = 'Guid' THEN to_jsonb(v._Guid)
                                    WHEN structure_record.db_type = 'Double' THEN to_jsonb(v._Double)
                                    WHEN structure_record.db_type = 'DateTime' THEN to_jsonb(v._DateTime)
                                    WHEN structure_record.db_type = 'Boolean' THEN to_jsonb(v._Boolean)
                                    WHEN structure_record.db_type = 'ListItem' THEN
                                        jsonb_build_object(
                                            'id', v._Long,
                                            'value', (SELECT _value FROM _list_items WHERE _id = v._Long)
                                        )
                                    WHEN structure_record.db_type = 'ByteArray' THEN 
                                        to_jsonb(encode(decode(v._ByteArray::text, 'base64'), 'base64'))
                                    ELSE NULL
                                END ORDER BY v._array_index
                                )
                            END
                            FROM _values v
                            WHERE v._id_object = object_id 
                              AND v._id_structure = structure_record.structure_id
                              AND v._array_index IS NOT NULL
                        )
                END
            
            -- –û–±—ã—á–Ω—ã–µ –ø–æ–ª—è (–Ω–µ –º–∞—Å—Å–∏–≤—ã)
            -- Object —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç
            WHEN structure_record.type_name = 'Object' AND structure_record.type_semantic = '_RObject' THEN
                CASE 
                    WHEN (current_value->>'_Long')::bigint IS NOT NULL THEN 
                        get_object_json((current_value->>'_Long')::bigint, max_depth - 1)
                    ELSE NULL
                END
            
            -- Class –ø–æ–ª–µ —Å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–º–∏ –¥–æ—á–µ—Ä–Ω–∏–º–∏ –ø–æ–ª—è–º–∏  
            WHEN structure_record.type_semantic = 'Object' THEN
                CASE 
                    WHEN current_value IS NULL OR (current_value->>'_Guid') IS NULL THEN 
                        NULL  -- ‚úÖ Class –ø–æ–ª–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ NULL - –Ω–µ —Å—Ç—Ä–æ–∏–º –æ–±—ä–µ–∫—Ç
                    ELSE
                        build_hierarchical_properties_optimized(object_id, structure_record.structure_id, object_scheme_id, all_values_json, max_depth - 1, array_index)
                END
                
            -- –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã
            WHEN structure_record.db_type = 'String' THEN to_jsonb(current_value->>'_String')
            WHEN structure_record.db_type = 'Long' THEN to_jsonb((current_value->>'_Long')::bigint)
            WHEN structure_record.db_type = 'Guid' THEN to_jsonb((current_value->>'_Guid')::uuid)
            WHEN structure_record.db_type = 'Double' THEN to_jsonb((current_value->>'_Double')::double precision)
            WHEN structure_record.db_type = 'DateTime' THEN to_jsonb((current_value->>'_DateTime')::timestamp)
            WHEN structure_record.db_type = 'Boolean' THEN to_jsonb((current_value->>'_Boolean')::boolean)
            WHEN structure_record.db_type = 'ListItem' THEN 
                CASE 
                    WHEN (current_value->>'_Long')::bigint IS NOT NULL THEN 
                        jsonb_build_object(
                            'id', (current_value->>'_Long')::bigint,
                            'value', (SELECT _value FROM _list_items WHERE _id = (current_value->>'_Long')::bigint)
                        )
                    ELSE NULL
                END
            WHEN structure_record.db_type = 'ByteArray' THEN 
                CASE 
                    WHEN current_value->>'_ByteArray' IS NOT NULL THEN 
                        to_jsonb(encode(decode(current_value->>'_ByteArray', 'base64'), 'base64'))
                    ELSE NULL
                END
            ELSE NULL
        END;
        
        -- –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ NULL
        IF field_value IS NOT NULL THEN
            result_json := result_json || jsonb_build_object(structure_record.field_name, field_value);
        END IF;
        
    END LOOP;
    
    RETURN result_json;
END;
$BODY$;

-- –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π –≤—Å–µ—Ö values
CREATE OR REPLACE FUNCTION get_object_json(
    object_id bigint,
    max_depth integer DEFAULT 10
) RETURNS jsonb
LANGUAGE 'plpgsql'
COST 100
VOLATILE NOT LEAKPROOF
AS $BODY$
DECLARE
    result_json jsonb;
    object_exists boolean;
    base_info jsonb;
    properties_info jsonb;
    object_scheme_id bigint;
    all_values_json jsonb;
BEGIN
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª—É–±–∏–Ω—É —Ä–µ–∫—É—Ä—Å–∏–∏
    IF max_depth <= 0 THEN
        RETURN jsonb_build_object('error', 'Max recursion depth reached');
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    SELECT EXISTS(SELECT 1 FROM _objects WHERE _id = object_id) INTO object_exists;
    
    IF NOT object_exists THEN
        RETURN jsonb_build_object('error', 'Object not found');
    END IF;
    
    -- –°–æ–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ + –ø–æ–ª—É—á–∞–µ–º scheme_id
    SELECT jsonb_build_object(
        'id', o._id,
        'name', o._name,
        'scheme_id', o._id_scheme,
        'scheme_name', sc._name,
        'parent_id', o._id_parent,
        'owner_id', o._id_owner,
        'who_change_id', o._id_who_change,
        'date_create', o._date_create,
        'date_modify', o._date_modify,
        'date_begin', o._date_begin,
        'date_complete', o._date_complete,
        'key', o._key,
        'code_int', o._code_int,
        'code_string', o._code_string,
        'code_guid', o._code_guid,
        'note', o._note,
        'bool', o._bool,
        'hash', o._hash
    ), o._id_scheme
    INTO base_info, object_scheme_id
    FROM _objects o
    JOIN _schemes sc ON sc._id = o._id_scheme
    WHERE o._id = object_id;
    
    -- üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï values –æ–±—ä–µ–∫—Ç–∞ –û–î–ù–ò–ú –∑–∞–ø—Ä–æ—Å–æ–º
    SELECT jsonb_object_agg(
        v._id_structure::text, 
        jsonb_build_object(
            '_String', v._String,
            '_Long', v._Long,
            '_Guid', v._Guid,
            '_Double', v._Double,
            '_DateTime', v._DateTime,
            '_Boolean', v._Boolean,
            '_ByteArray', v._ByteArray,
            '_array_parent_id', v._array_parent_id,
            '_array_index', v._array_index
        )
    ) INTO all_values_json
    FROM _values v
    WHERE v._id_object = object_id;
    
    -- –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ values
    SELECT build_hierarchical_properties_optimized(
        object_id, 
        NULL, 
        object_scheme_id, 
        COALESCE(all_values_json, '{}'::jsonb), 
        max_depth,
        NULL -- array_index = NULL –¥–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø–æ–ª–µ–π
    ) INTO properties_info;
    
    -- –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å properties
    result_json := base_info || jsonb_build_object('properties', COALESCE(properties_info, '{}'::jsonb));
    
    RETURN result_json;
END;
$BODY$;

-- BULK-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø VIEW –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ  
-- CREATE OR REPLACE VIEW v_objects_json AS
-- WITH 
-- -- üöÄ –≠—Ç–∞–ø 1: BULK –∑–∞–≥—Ä—É–∑–∫–∞ values (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ - GROUP BY —Ç–æ–ª—å–∫–æ –ø–æ ID)
-- all_values AS (
--     SELECT 
--         o._id,
--         COALESCE(
--             jsonb_object_agg(
--                 v._id_structure::text, 
--                 jsonb_build_object(
--                     '_String', v._String,
--                     '_Long', v._Long,
--                     '_Guid', v._Guid,
--                     '_Double', v._Double,
--                     '_DateTime', v._DateTime,
--                     '_Boolean', v._Boolean,
--                     '_ByteArray', v._ByteArray,
--                     '_array_parent_id', v._array_parent_id,
--                     '_array_index', v._array_index
--                 )
--             ) FILTER (WHERE v._id IS NOT NULL),
--             '{}'::jsonb
--         ) as all_values_json
--     FROM _objects o
--     LEFT JOIN _values v ON v._id_object = o._id
--     GROUP BY o._id  -- GROUP BY —Ç–æ–ª—å–∫–æ –ø–æ ID (–±—ã—Å—Ç—Ä–æ!)
-- ),
-- -- üöÄ –≠—Ç–∞–ø 2: –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–æ–ª—è–º–∏ _objects –∏ —Å—Ç—Ä–æ–∏–º JSON
-- objects_with_json AS (
--     SELECT 
--         o.*,  -- –í—Å–µ –ø–æ–ª—è _objects –æ–¥–Ω–æ–π –∑–≤–µ–∑–¥–æ—á–∫–æ–π (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ)
--         -- –ü–æ–ª–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç–∞ —Å properties
--         jsonb_build_object(
--             'id', o._id,
--             'name', o._name,
--             'scheme_id', o._id_scheme,
--             'scheme_name', s._name,
--             'parent_id', o._id_parent,
--             'owner_id', o._id_owner,
--             'who_change_id', o._id_who_change,
--             'date_create', o._date_create,
--             'date_modify', o._date_modify,
--             'date_begin', o._date_begin,
--             'date_complete', o._date_complete,
--             'key', o._key,
--             'code_int', o._code_int,
--             'code_string', o._code_string,
--             'code_guid', o._code_guid,
--             'note', o._note,
--             'bool', o._bool,
--             'hash', o._hash,
--             'properties', 
--             build_hierarchical_properties_optimized(
--                 o._id, 
--                 NULL, 
--                 o._id_scheme, 
--                 av.all_values_json,  -- –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
--                 10,
--                 NULL -- array_index = NULL –¥–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö –ø–æ–ª–µ–π
--             )
--         ) as object_json
--     FROM _objects o
--     JOIN _schemes s ON s._id = o._id_scheme  
--     JOIN all_values av ON av._id = o._id  -- JOIN —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ values
-- )
-- SELECT * FROM objects_with_json ORDER BY _id;

-- -- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ú —Ñ—É–Ω–∫—Ü–∏—è–º –∏ VIEW –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
-- COMMENT ON VIEW v_objects_json IS '–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø VIEW –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤. –î–≤—É—Ö—ç—Ç–∞–ø–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: 1) BULK –∞–≥—Ä–µ–≥–∞—Ü–∏—è _values —Å GROUP BY —Ç–æ–ª—å–∫–æ –ø–æ _id (–±—ã—Å—Ç—Ä–æ!) 2) JOIN –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å _objects —á–µ—Ä–µ–∑ o.* (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –í–°–ï –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è _objects –∫–∞–∫ –∫–æ–ª–æ–Ω–∫–∏ –ü–õ–Æ–° –ø–æ–ª–Ω—ã–π JSON —Å properties. –ò–∑–±–µ–≥–∞–µ—Ç heavy GROUP BY –ø–æ 17 –ø–æ–ª—è–º. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ API. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ Class –ø–æ–ª—è.';

COMMENT ON FUNCTION build_hierarchical_properties_optimized(bigint, bigint, bigint, jsonb, integer, integer) IS '–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–π JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ values. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã Class –ø–æ–ª–µ–π —á–µ—Ä–µ–∑ array_index. –ë–ï–ó JOIN —Å _values –≤ —Ü–∏–∫–ª–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π! 3-5x –±—ã—Å—Ç—Ä–µ–µ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª–µ–π.';

COMMENT ON FUNCTION get_object_json(bigint, integer) IS '–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –í–°–ï values –æ–±—ä–µ–∫—Ç–∞ –û–î–ù–ò–ú –∑–∞–ø—Ä–æ—Å–æ–º, –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ Class –ø–æ–ª—è, Object —Å—Å—ã–ª–∫–∏, –º–∞—Å—Å–∏–≤—ã –∏ –≥–ª—É–±–æ–∫—É—é —Ä–µ–∫—É—Ä—Å–∏—é. –û–ø—Ç–∏–º–∞–ª—å–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å 10+ –ø–æ–ª—è–º–∏.';

-- ===== –ü–†–û–°–¢–ê–Ø VIEW –î–õ–Ø –û–ë–™–ï–ö–¢–û–í –° JSON =====

-- –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é view –µ—Å–ª–∏ –µ—Å—Ç—å
DROP VIEW IF EXISTS v_objects_json;

-- –ü—Ä–æ—Å—Ç–∞—è view: –≤—Å–µ –ø–æ–ª—è _objects + JSON —á–µ—Ä–µ–∑ get_object_json
CREATE VIEW v_objects_json AS
SELECT 
    o.*,  -- –í—Å–µ –ø–æ–ª—è _objects –∫–∞–∫ –µ—Å—Ç—å
    get_object_json(o._id, 10) as object_json  -- JSON –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
FROM _objects o;
COMMENT ON VIEW v_objects_json IS '–ü—Ä–æ—Å—Ç–∞—è view –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤: –≤—Å–µ –ø–æ–ª—è _objects + –ø–æ–ª–Ω—ã–π JSON —á–µ—Ä–µ–∑ get_object_json. –£–¥–æ–±–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ—Ç–ª–∞–¥–∫–∏.';
