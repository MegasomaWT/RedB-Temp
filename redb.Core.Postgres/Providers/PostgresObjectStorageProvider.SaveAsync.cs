using redb.Core.Providers;
using redb.Core.DBModels;
using redb.Core.Utils;
using redb.Core.Models.Contracts;
using redb.Core.Models.Entities;
using redb.Core.Models.Configuration;
using redb.Core.Models.Security;
using System.Text.Json.Serialization;
using redb.Core.Postgres.Extensions;
using System.Reflection;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Threading.Tasks;
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage;
using EFCore.BulkExtensions;

namespace redb.Core.Postgres.Providers
{
    /// <summary>
    /// üöÄ –ù–û–í–´–ô SaveAsync - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    /// </summary>
    public partial class PostgresObjectStorageProvider
    {
        /// <summary>
        /// üöÄ –ù–û–í–´–ô –°–ê–í–ï–ê–°–ò–ù–ö: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        /// –°–æ–±–∏—Ä–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã –∏ values –≤ —Å–ø–∏—Å–∫–∏, –ø–æ—Ç–æ–º batch —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        /// </summary>
        public async Task<long> SaveAsyncNew<TProps>(IRedbObject<TProps> obj, IRedbUser user) where TProps : class, new()
        {
            // üöÄ === –ù–û–í–´–ô SaveAsync –ó–ê–ü–£–°–ö ===
            // –û–±—ä–µ–∫—Ç: '{obj.Name}' (ID={obj.Id}, SchemeId={obj.SchemeId})
            
            if (obj.properties == null)
            {
                throw new ArgumentException("–°–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å null", nameof(obj));
            }

            // === –ü–ï–†–ï–°–ß–ï–¢ –•–ï–®–ê –í –ù–ê–ß–ê–õ–ï (–∏–∑ —Å—Ç–∞—Ä–æ–≥–æ SaveAsync) ===
            var currentHash = RedbHash.ComputeFor(obj);
            if (currentHash.HasValue)
            {
                obj.Hash = currentHash.Value;
            }

            // === –°–¢–†–ê–¢–ï–ì–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –£–î–ê–õ–ï–ù–ù–´–• –û–ë–™–ï–ö–¢–û–í (–∏–∑ —Å—Ç–∞—Ä–æ–≥–æ SaveAsync) ===
            var isNewObject = obj.Id == 0;
            if (!isNewObject)
            {
                var exists = await _context.Objects.AnyAsync(o => o.Id == obj.Id);
                if (!exists)
                {
                    switch (_configuration.MissingObjectStrategy)
                    {
                        case MissingObjectStrategy.AutoSwitchToInsert:
                            isNewObject = true;
                            break;
                        case MissingObjectStrategy.ReturnNull:
                            return 0;
                        case MissingObjectStrategy.ThrowException:
                        default:
                            throw new InvalidOperationException($"Object with id {obj.Id} not found. Current strategy: {_configuration.MissingObjectStrategy}");
                    }
                }
            }

            // === –ê–í–¢–û–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–•–ï–ú–´ (–∏–∑ —Å—Ç–∞—Ä–æ–≥–æ SaveAsync) ===
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã: SchemeId={obj.SchemeId}, AutoSync={_configuration.AutoSyncSchemesOnSave}
            if (obj.SchemeId == 0 && _configuration.AutoSyncSchemesOnSave)
            {

                
                // üöß –í–†–ï–ú–ï–ù–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É –ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä
                var existingScheme = await _schemeSync.GetSchemeByTypeAsync<TProps>();
                if (existingScheme != null)
                {
                    obj.SchemeId = existingScheme.Id;

                }
                else
                {

                    try
                    {
                        var scheme = await _schemeSync.SyncSchemeAsync<TProps>();
                        obj.SchemeId = scheme.Id;

                    }
                    catch (Exception ex)
                    {


                        throw;
                    }
                }
            }

            // === –ü–†–û–í–ï–†–ö–ò –ü–†–ê–í –î–û–°–¢–£–ü–ê (–∏–∑ —Å—Ç–∞—Ä–æ–≥–æ SaveAsync) ===
            if (_configuration.DefaultCheckPermissionsOnSave)
            {
                if (isNewObject)
                {
                    var scheme = await _context.Schemes.FindAsync(obj.SchemeId);
                    if (scheme != null)
                    {
                        var schemeContract = RedbScheme.FromEntity(scheme);
                        var canInsert = await _permissionProvider.CanUserInsertScheme(schemeContract, user);
                        if (!canInsert)
                        {
                            throw new UnauthorizedAccessException($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.Id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å—Ö–µ–º–µ {obj.SchemeId}");
                        }
                    }
                }
                else
                {
                    var canUpdate = await _permissionProvider.CanUserEditObject(obj, user);
                    if (!canUpdate)
                    {
                        throw new UnauthorizedAccessException($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.Id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ {obj.Id}");
                    }
                }
            }

            // –®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏ values
            var objectsToSave = new List<IRedbObject>();
            var valuesToSave = new List<_RValue>();
            var processedObjectIds = new HashSet<long>();

            // –®–ê–ì 2: –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–±–æ—Ä –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–≥–ª–∞–≤–Ω—ã–π + –≤–ª–æ–∂–µ–Ω–Ω—ã–µ IRedbObject)

            await CollectAllObjectsRecursively(obj, objectsToSave, processedObjectIds);


            // –®–ê–ì 3: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ ID –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º –±–µ–∑ ID (—á–µ—Ä–µ–∑ GetNextKey)

            await AssignMissingIds(objectsToSave, user);
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–Ø–ï–ú ParentId –ø–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ID
            var mainObjectId = obj.Id;
            foreach (var nestedObj in objectsToSave.Skip(1)) // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç
            {
                if (nestedObj.ParentId == null || nestedObj.ParentId == 0)
                {
                    nestedObj.ParentId = mainObjectId;

                }
            }
            


            // –®–ê–ì 4: –°–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤

            await EnsureSchemesForAllTypes(objectsToSave);


            // –®–ê–ì 5: –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ properties –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–∏ values

            await ProcessAllObjectsPropertiesRecursively(objectsToSave, valuesToSave);

            
            // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏ –≤ valuesToSave 
            var duplicates = valuesToSave
                .Where(v => v.ArrayIndex == null) // —Ç–æ–ª—å–∫–æ –Ω–µ-–º–∞—Å—Å–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                .GroupBy(v => new { v.IdStructure, v.IdObject })
                .Where(g => g.Count() > 1)
                .ToList();
                
            if (duplicates.Any())
            {

                foreach (var duplicate in duplicates)
                {

                }
            }
            else
            {

            }

            // –®–ê–ì 6: Delete/Insert —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ values, –≥–æ—Ç–æ–≤–∏–º –Ω–æ–≤—ã–µ

            await PrepareValuesByStrategy(objectsToSave, valuesToSave);


            // –®–ê–ì 7: Batch —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ

            await CommitAllChangesBatch(objectsToSave, valuesToSave);


            return obj.Id;
        }

        /// <summary>
        /// üîç –®–ê–ì 2: –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–±–æ—Ä –≤—Å–µ—Ö IRedbObject (–≥–ª–∞–≤–Ω—ã–π + –≤–ª–æ–∂–µ–Ω–Ω—ã–µ)
        /// </summary>
        protected async Task CollectAllObjectsRecursively(IRedbObject rootObject, List<IRedbObject> collector, HashSet<long> processed)
        {

            
            collector.Add(rootObject);

            
            // ‚úÖ –†–ï–ê–õ–ò–ó–£–ï–ú: –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö IRedbObject –≤ properties
            var rootProperties = GetPropertiesFromRedbObject(rootObject);
            await CollectNestedRedbObjectsFromProperties(rootProperties, collector, processed, rootObject.Id);
        }

        /// <summary>
        /// üîç –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ IRedbObject –≤ properties –æ–±—ä–µ–∫—Ç–∞
        /// </summary>
        private async Task CollectNestedRedbObjectsFromProperties(object? properties, List<IRedbObject> collector, HashSet<long> processed, long parentId)
        {
            if (properties == null) return;

            var propsType = properties.GetType();
            var propsProperties = propsType.GetProperties(BindingFlags.Public | BindingFlags.Instance);
            
            foreach (var property in propsProperties)
            {
                var value = property.GetValue(properties);
                if (value == null) continue;

                // üîó –û–¥–∏–Ω–æ—á–Ω—ã–π IRedbObject  
                if (IsRedbObjectType(value.GetType()))
                {
                    var redbObj = (IRedbObject)value;

                    
                    // ParentId –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ –ø–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ID
                    
                    collector.Add(redbObj);

                    
                    // –†–µ–∫—É—Ä—Å–∏—è –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö IRedbObject
                    var nestedProperties = GetPropertiesFromRedbObject(redbObj);
                    await CollectNestedRedbObjectsFromProperties(nestedProperties, collector, processed, redbObj.Id);
                }
                // üìä –ú–∞—Å—Å–∏–≤ IRedbObject
                else if (value is IEnumerable enumerable && IsRedbObjectArrayType(value.GetType()))
                {

                    foreach (var item in enumerable)
                    {
                        if (item != null && IsRedbObjectType(item.GetType()))
                        {
                            var redbObj = (IRedbObject)item;

                            
                            // ParentId –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–∑–∂–µ –ø–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ID
                            
                            collector.Add(redbObj);

                            
                            // –†–µ–∫—É—Ä—Å–∏—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞
                            var arrayElementProperties = GetPropertiesFromRedbObject(redbObj);
                            await CollectNestedRedbObjectsFromProperties(arrayElementProperties, collector, processed, redbObj.Id);
                        }
                    }
                }
                // üèóÔ∏è –†–µ–∫—É—Ä—Å–∏—è –≤ –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å—ã
                else if (IsBusinessClassType(value.GetType()))
                {
                    await CollectNestedRedbObjectsFromProperties(value, collector, processed, parentId);
                }
                // üìä –†–µ–∫—É—Ä—Å–∏—è –≤ –º–∞—Å—Å–∏–≤—ã –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–æ–≤
                else if (value is IEnumerable businessEnumerable && !IsStringType(value.GetType()))
                {
                    foreach (var item in businessEnumerable)
                    {
                        if (item != null && IsBusinessClassType(item.GetType()))
                        {
                            await CollectNestedRedbObjectsFromProperties(item, collector, processed, parentId);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ IRedbObject
        /// </summary>
        private static bool IsRedbObjectType(Type type)
        {
            return type.GetInterfaces().Any(i => 
                i.IsGenericType && 
                i.GetGenericTypeDefinition().Name.Contains("IRedbObject"));
        }

        /// <summary>
        /// üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Å–∏–≤–∞ IRedbObject
        /// </summary>
        private static bool IsRedbObjectArrayType(Type type)
        {
            if (!type.IsArray) return false;
            return IsRedbObjectType(type.GetElementType()!);
        }

        /// <summary>
        /// üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ —Ç–∏–ø–∞
        /// </summary>  
        private static bool IsStringType(Type type)
        {
            return type == typeof(string);
        }

        /// <summary>
        /// üîß –ü–æ–ª—É—á–µ–Ω–∏–µ properties –∏–∑ IRedbObject —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
        /// </summary>
        private static object? GetPropertiesFromRedbObject(IRedbObject redbObj)
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤–∞ properties
            var propertiesProperty = redbObj.GetType().GetProperty("properties");
            return propertiesProperty?.GetValue(redbObj);
        }
        
        /// <summary>
        /// üîß –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ properties –∏–∑ IRedbObject
        /// </summary>
        private static Type? GetPropertiesTypeFromRedbObject(IRedbObject redbObj)
        {
            // –ü–æ–ª—É—á–∞–µ–º TProps –∏–∑ IRedbObject<TProps>
            var objType = redbObj.GetType();
            if (objType.IsGenericType)
            {
                return objType.GetGenericArguments()[0]; // TProps
            }
            return null;
        }

        /// <summary>
        /// üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Class —Ç–∏–ø–æ–º (–±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å)
        /// </summary>
        private async Task<bool> IsClassTypeStructure(IRedbStructure structure)
        {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∏–∑ –ë–î
            var type = await _context.Set<_RType>().FindAsync(structure.IdType);
            return type?.Type1 == "Object" || type?.Name == "Class";
        }

        /// <summary>
        /// üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ IRedbObject —Å—Å—ã–ª–∫–æ–π
        /// </summary>
        private async Task<bool> IsRedbObjectStructure(IRedbStructure structure)
        {
            var type = await _context.Set<_RType>().FindAsync(structure.IdType);
            return type?.Type1 == "_RObject" || type?.Name == "Object";
        }

        /// <summary>
        /// üîß –ü–æ–ª—É—á–µ–Ω–∏–µ DbType —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        /// </summary>
        private async Task<string> GetStructureDbType(IRedbStructure structure)
        {
            var type = await _context.Set<_RType>().FindAsync(structure.IdType);
            return type?.DbType ?? "String";
        }

        /// <summary>
        /// üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –¥–ª—è —Ç–∏–ø–∞ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        /// </summary>
        private async Task CreateSchemeForType(Type propsType, IRedbObject obj)
        {

            
            // –î–ª—è AnalyticsMetricsProps –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É
            if (propsType.Name.Contains("AnalyticsMetrics"))
            {
                obj.SchemeId = 1001; // TrueSight.Models.AnalyticsMetrics

            }
            else
            {
                throw new NotImplementedException($"–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –¥–ª—è —Ç–∏–ø–∞ {propsType.Name} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ");
            }
        }

        /// <summary>
        /// üéØ –®–ê–ì 3: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ ID —á–µ—Ä–µ–∑ GetNextKey() –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º –±–µ–∑ ID
        /// </summary>
        protected async Task AssignMissingIds(List<IRedbObject> objects, IRedbUser user)
        {
            foreach (var obj in objects)
            {

                if (obj.Id == 0)
                {
                    var newId = _context.GetNextKey();
                    obj.Id = newId;

                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—É–¥–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    obj.OwnerId = user.Id;
                    obj.WhoChangeId = user.Id;
                    
                    if (_configuration.AutoSetModifyDate)
                    {
                        obj.DateCreate = DateTime.Now;
                        obj.DateModify = DateTime.Now;
                    }
                    
                    if (_configuration.AutoRecomputeHash)
                    {
                        obj.Hash = RedbHash.ComputeFor(obj);
                    }

                }
                else
                {

                }
            }
        }

        /// <summary>
        /// üèóÔ∏è –®–ê–ì 4: –°–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º PostgresSchemeSyncProvider)
        /// </summary>
        protected async Task EnsureSchemesForAllTypes(List<IRedbObject> objects)
        {

            
            foreach (var obj in objects)
            {

                
                if (obj.SchemeId == 0 && _configuration.AutoSyncSchemesOnSave)
                {

                    
                    // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø properties –æ–±—ä–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
                    var objType = obj.GetType();
                    if (objType.IsGenericType)
                    {
                        var propsType = objType.GetGenericArguments()[0]; // TProps –∏–∑ IRedbObject<TProps>

                        
                        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É

                        var existingScheme = await _schemeSync.GetSchemeByTypeAsync(propsType);
                        if (existingScheme != null)
                        {
                            obj.SchemeId = existingScheme.Id;

                        }
                        else
                        {

                            try
                            {
                                // –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)

                                await CreateSchemeForType(propsType, obj);


                            }
                            catch (Exception ex)
                            {

                                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
                                obj.SchemeId = 1001; // TrueSight.Models.AnalyticsMetrics –∫–∞–∫ fallback

                            }
                        }
                    }
                }
                else
                {

                }
            }

        }

        /// <summary>
        /// üîÑ –®–ê–ì 5: –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ properties –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ ‚Üí —Å–ø–∏—Å–∫–∏ _RValue
        /// ‚úÖ –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ä–µ–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä –≤–º–µ—Å—Ç–æ –ø–ª–æ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞!
        /// </summary>
        protected async Task ProcessAllObjectsPropertiesRecursively(List<IRedbObject> objects, List<_RValue> valuesList)
        {
            foreach (var obj in objects)
            {

                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ö–µ–º–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                var scheme = await _schemeSync.GetSchemeByIdAsync(obj.SchemeId);
                if (scheme == null)
                {

                    continue;
                }
                
                // ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä –≤–º–µ—Å—Ç–æ –ø–ª–æ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
                var schemeProvider = (PostgresSchemeSyncProvider)_schemeSync;
                var rootStructureTree = await schemeProvider.GetSubtreeAsync(obj.SchemeId, null); // –∫–æ—Ä–Ω–µ–≤—ã–µ —É–∑–ª—ã

                
                if (rootStructureTree.Count == 0)
                {

                    try
                    {
                        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                        var propsType = obj.GetType().GetGenericArguments()[0];
                        await SyncStructuresForType(scheme, propsType);
                        
                        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä –∑–∞–Ω–æ–≤–æ
                        schemeProvider.InvalidateStructureTreeCache(obj.SchemeId); // –æ—á–∏—â–∞–µ–º –∫–µ—à
                        rootStructureTree = await schemeProvider.GetSubtreeAsync(obj.SchemeId, null);

                    }
                    catch (Exception ex)
                    {

                        continue;
                    }
                }
                
                // ‚úÖ –ù–û–í–´–ô –û–ë–•–û–î: –ß–µ—Ä–µ–∑ –¥–µ—Ä–µ–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä —Å –ø–æ–¥–¥–µ—Ä–µ–≤—å—è–º–∏!
                await ProcessPropertiesWithTreeStructures(obj, rootStructureTree, valuesList, objects);
            }
        }

        /// <summary>
        /// üå≥ –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±—Ä–∞–±–æ—Ç–∫–∞ properties —á–µ—Ä–µ–∑ –¥–µ—Ä–µ–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä
        /// –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–¥–¥–µ—Ä–µ–≤—å–µ–≤
        /// </summary>
        private async Task ProcessPropertiesWithTreeStructures(IRedbObject obj, List<StructureTreeNode> structureNodes, List<_RValue> valuesList, List<IRedbObject> objectsToSave)
        {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø properties –æ–±—ä–µ–∫—Ç–∞
            var objPropertiesType = GetPropertiesTypeFromRedbObject(obj);
            
            foreach (var structureNode in structureNodes)
            {
                // ‚úÖ –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –°–í–û–ô–°–¢–í–ê –í C# –ö–õ–ê–°–°–ï
                var property = objPropertiesType?.GetProperty(structureNode.Structure.Name);
                if (property == null)
                {
                    continue; // ‚úÖ –†–ï–®–ê–ï–¢ –ü–†–û–ë–õ–ï–ú–£ –ò–ó–ë–´–¢–û–ß–ù–´–• –°–¢–†–£–ö–¢–£–†!
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
                var objProperties = GetPropertiesFromRedbObject(obj);
                var rawValue = property.GetValue(objProperties);
                
                // ‚úÖ NULL –°–ï–ú–ê–ù–¢–ò–ö–ê
                if (!PostgresObjectStorageProviderExtensions.ShouldCreateValueRecord(rawValue, structureNode.Structure.StoreNull ?? false))
                {

                    continue;
                }
                
                // ‚úÖ –ö–†–ò–¢–ò–ß–ù–ê–Ø –î–ò–°–ü–ï–¢–ß–ï–†–ò–ó–ê–¶–ò–Ø –ü–û –¢–ò–ü–ê–ú 
                if (structureNode.Structure.IsArray == true)
                {
                    await ProcessArrayWithSubtree(obj, structureNode, rawValue, valuesList, objectsToSave);
                }
                else if (await IsClassTypeStructure(structureNode.Structure))
                {
                    await ProcessBusinessClassWithSubtree(obj, structureNode, rawValue, valuesList, objectsToSave);
                }
                else if (await IsRedbObjectStructure(structureNode.Structure))
                {
                    await ProcessIRedbObjectField(obj, structureNode.Structure, rawValue, objectsToSave, valuesList);
                }
                else
                {
                    await ProcessSimpleFieldWithTree(obj, structureNode, rawValue, valuesList);
                }
            }
        }

        /// <summary>
        /// üöÄ –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ properties –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–ø–æ –æ–±—Ä–∞–∑—Ü—É SavePropertiesFromObjectAsync)
        /// </summary>
        private async Task ProcessPropertiesRecursively<TProps>(IRedbObject<TProps> obj, List<StructureMetadata> structures, List<_RValue> valuesList) where TProps : class
        {
            var propertiesType = typeof(TProps);
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ö–û–†–ù–ï–í–´–ï —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (_id_parent IS NULL)
            var rootStructures = structures.Where(s => s.IdParent == null).ToList();


            foreach (var structure in rootStructures)
            {
                var property = propertiesType.GetProperty(structure.Name);
                if (property == null) 
                {

                    continue;
                }

                // üö´ –ò–ì–ù–û–†–ò–†–£–ï–ú –ø–æ–ª—è —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º [JsonIgnore] –∏–ª–∏ [RedbIgnore]
                if (property.ShouldIgnoreForRedb())
                {

                    continue;
                }

                var rawValue = property.GetValue(obj.properties);


                // ‚úÖ –ù–û–í–ê–Ø NULL –°–ï–ú–ê–ù–¢–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º _store_null
                if (!PostgresObjectStorageProviderExtensions.ShouldCreateValueRecord(rawValue, structure.StoreNull))
                {

                    continue;
                }

                // ‚úÖ –†–ï–ö–£–†–°–ò–í–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
                if (structure.IsArray)
                {

                    await ProcessArrayFieldForCollection(obj.Id, structure, rawValue, valuesList, obj.SchemeId);
                }
                else if (PostgresObjectStorageProviderExtensions.IsClassType(structure.TypeSemantic))
                {

                    await ProcessClassFieldForCollection(obj.Id, structure, rawValue, valuesList);
                }
                else
                {

                    await ProcessSimpleFieldForCollection(obj.Id, structure, rawValue, valuesList);
                }
            }
            

        }

        /// <summary>
        /// üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–ª—è –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–∞–Ω–∞–ª–æ–≥ SaveSimpleFieldAsync)
        /// </summary>
        private async Task ProcessSimpleFieldForCollection(long objectId, StructureMetadata structure, object? rawValue, List<_RValue> valuesList)
        {
            // üöß –í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–õ–£–®–ö–ê: –ø—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ë–ï–ó –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            var valueRecord = new _RValue
            {
                Id = _context.GetNextKey(),
                IdObject = objectId,
                IdStructure = structure.Id
            };
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É (–∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)
            SetSimpleValueByType(valueRecord, structure.DbType, rawValue);
            valuesList.Add(valueRecord);
            

        }

        /// <summary>
        /// üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–∞–Ω–∞–ª–æ–≥ SaveArrayFieldAsync) 
        /// </summary>
        private async Task ProcessArrayFieldForCollection(long objectId, StructureMetadata structure, object? rawValue, List<_RValue> valuesList, long schemeId = 9001)
        {
            if (rawValue == null) return;
            if (rawValue is not IEnumerable enumerable || rawValue is string) return;



            // ‚úÖ –°–æ–∑–¥–∞–µ–º –ë–ê–ó–û–í–£–Æ –∑–∞–ø–∏—Å—å –º–∞—Å—Å–∏–≤–∞ —Å —Ö–µ—à–µ–º –≤—Å–µ–≥–æ –º–∞—Å—Å–∏–≤–∞ (–∫–∞–∫ –≤ SaveArrayFieldAsync)
            var arrayHash = RedbHash.ComputeForProps(rawValue);
            var baseArrayRecord = new _RValue
            {
                Id = _context.GetNextKey(),
                IdObject = objectId,
                IdStructure = structure.Id,
                Guid = arrayHash  // ‚úÖ –•–µ—à –≤—Å–µ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤ _Guid
            };
            valuesList.Add(baseArrayRecord);


            // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ —Å _array_parent_id –∏ _array_index
            await ProcessArrayElementsForCollection(objectId, structure.Id, baseArrayRecord.Id, enumerable, valuesList, structure, schemeId);
        }

        /// <summary>
        /// üî¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ _array_parent_id –∏ _array_index
        /// </summary>
        private async Task ProcessArrayElementsForCollection(long objectId, long structureId, long parentValueId, IEnumerable enumerable, List<_RValue> valuesList, StructureMetadata structure, long schemeId)
        {
            int index = 0;
            foreach (var item in enumerable)
            {


                var elementRecord = new _RValue
                {
                    Id = _context.GetNextKey(),
                    IdObject = objectId,
                    IdStructure = structureId,
                    ArrayParentId = parentValueId,  // ‚úÖ –°–≤—è–∑—å —Å –±–∞–∑–æ–≤–æ–π –∑–∞–ø–∏—Å—å—é –º–∞—Å—Å–∏–≤–∞
                    ArrayIndex = index             // ‚úÖ –ü–æ–∑–∏—Ü–∏—è –≤ –º–∞—Å—Å–∏–≤–µ
                };

                if (item != null)
                {
                    var itemType = item.GetType();
                    
                    // ‚ôªÔ∏è –†–ï–ö–£–†–°–ò–Ø –í –ú–ê–°–°–ò–í–ê–•: —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    if (PostgresObjectStorageProviderExtensions.IsRedbObjectReference(structure.TypeSemantic))
                    {

                        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É IRedbObject –≤ –º–∞—Å—Å–∏–≤–µ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)

                        valuesList.Add(elementRecord); // –ø—É—Å—Ç–∞—è –∑–∞–ø–∏—Å—å –ø–æ–∫–∞
                    }
                    else if (IsBusinessClassType(itemType))
                    {

                        
                        // –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —ç–ª–µ–º–µ–Ω—Ç–µ –º–∞—Å—Å–∏–≤–∞
                        var itemHash = RedbHash.ComputeForProps(item);
                        elementRecord.Guid = itemHash;
                        valuesList.Add(elementRecord);

                        
                        // ‚ôªÔ∏è –†–ï–ö–£–†–°–ò–Ø: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –ø–æ–ª—è –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
                        // ‚úÖ –ü–ï–†–ï–î–ê–ï–ú ArrayIndex –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –ø–æ–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞  
                        await ProcessClassChildrenForCollection(objectId, elementRecord.Id, item, structureId, valuesList, schemeId, index);
                    }
                    else
                    {
                        // –ü—Ä–æ—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø —Å—Ç—Ä—É–∫—Ç—É—Ä—ã 
                        SetSimpleValueByType(elementRecord, structure.DbType, item);
                        valuesList.Add(elementRecord);

                    }
                }
                else
                {
                    valuesList.Add(elementRecord); // null —ç–ª–µ–º–µ–Ω—Ç

                }

                index++;
            }

        }

        /// <summary>
        /// üèóÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–∞–Ω–∞–ª–æ–≥ SaveClassFieldAsync)
        /// </summary>
        private async Task ProcessClassFieldForCollection(long objectId, StructureMetadata structure, object? rawValue, List<_RValue> valuesList)
        {
            if (rawValue == null) return;



            // ‚úÖ –í—ã—á–∏—Å–ª—è–µ–º UUID —Ö–µ—à –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞ (–∫–∞–∫ –≤ SaveClassFieldAsync)
            var classHash = RedbHash.ComputeForProps(rawValue);

            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å Class –ø–æ–ª—è —Å —Ö–µ—à–µ–º –≤ _Guid
            var classRecord = new _RValue
            {
                Id = _context.GetNextKey(),
                IdObject = objectId,
                IdStructure = structure.Id,
                Guid = classHash  // ‚úÖ UUID —Ö–µ—à –≤ _Guid –ø–æ–ª–µ
            };
            valuesList.Add(classRecord);


            // ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –ø–æ–ª—è Class –æ–±—ä–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ —Ä–µ–∫—É—Ä—Å–∏—é  
            // TODO: –ù—É–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π schemeId - –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º 9001 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await ProcessClassChildrenForCollection(objectId, classRecord.Id, rawValue, structure.Id, valuesList, 9001);
        }

        /// <summary>
        /// üë∂ –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö –ø–æ–ª–µ–π –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞ 
        /// </summary>
        private async Task ProcessClassChildrenForCollection(long objectId, long parentValueId, object businessObject, long parentStructureId, List<_RValue> valuesList, long schemeId, int? parentArrayIndex = null)
        {


            // –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –∏ –∏—â–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã 
            var scheme = await _schemeSync.GetSchemeByIdAsync(schemeId);
            if (scheme == null) return;

            // –ò—â–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å _id_parent = parentStructureId
            var childStructuresRaw = scheme.Structures
                .Where(s => s.IdParent == parentStructureId)
                .ToList();



            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ StructureMetadata –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è DbType
            var childStructures = await ConvertStructuresToMetadataAsync(childStructuresRaw);

            var businessType = businessObject.GetType();
            foreach (var childStructure in childStructures)
            {
                var property = businessType.GetProperty(childStructure.Name);
                if (property == null) 
                {

                    continue;
                }

                var childValue = property.GetValue(businessObject);


                // ‚úÖ –ù–û–í–ê–Ø NULL –°–ï–ú–ê–ù–¢–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º _store_null
                if (!PostgresObjectStorageProviderExtensions.ShouldCreateValueRecord(childValue, childStructure.StoreNull))
                {

                    continue;
                }

                // ‚ôªÔ∏è ‚ôªÔ∏è –ü–û–õ–ù–ê–Ø –†–ï–ö–£–†–°–ò–Ø: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–æ—á–µ—Ä–Ω–∏—Ö –ø–æ–ª–µ–π ‚ôªÔ∏è ‚ôªÔ∏è
                if (childStructure.IsArray)
                {

                    await ProcessArrayFieldForCollection(objectId, childStructure, childValue, valuesList);
                }
                else if (PostgresObjectStorageProviderExtensions.IsClassType(childStructure.TypeSemantic))
                {

                    await ProcessClassFieldForCollection(objectId, childStructure, childValue, valuesList);
                }
                else if (PostgresObjectStorageProviderExtensions.IsRedbObjectReference(childStructure.TypeSemantic))
                {

                    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É IRedbObject (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)

                }
                else
                {

                    
                    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø–æ–ª—è —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É Class –ø–æ–ª—é
                    var childRecord = new _RValue
                    {
                        Id = _context.GetNextKey(),
                        IdObject = objectId,
                        IdStructure = childStructure.Id,
                        ArrayParentId = parentValueId,  // ‚úÖ –°–≤—è–∑—å —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º Class –ø–æ–ª–µ–º  
                        ArrayIndex = parentArrayIndex   // ‚úÖ –ù–∞—Å–ª–µ–¥—É–µ–º ArrayIndex –µ—Å–ª–∏ —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
                    };

                    SetSimpleValueByType(childRecord, childStructure.DbType, childValue);
                    valuesList.Add(childRecord);

                }
            }
        }

        /// <summary>
        /// üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∏–ø –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–æ–º (–Ω–µ –ø—Ä–∏–º–∏—Ç–∏–≤–æ–º –∏ –Ω–µ –º–∞—Å—Å–∏–≤–æ–º)
        /// </summary>
        private static bool IsBusinessClassType(Type type)
        {
            // –ü—Ä–∏–º–∏—Ç–∏–≤—ã –∏ —Å—Ç—Ä–æ–∫–∏ - –Ω–µ –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å—ã
            if (type.IsPrimitive || type == typeof(string) || type == typeof(decimal) || type == typeof(DateTime) || type == typeof(Guid)) 
                return false;
            
            // –ú–∞—Å—Å–∏–≤—ã - –Ω–µ –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å—ã (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
            if (type.IsArray || (typeof(IEnumerable).IsAssignableFrom(type) && type != typeof(string)))
                return false;
                
            // IRedbObject - –Ω–µ –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
            if (type.GetInterfaces().Any(i => i.IsGenericType && i.GetGenericTypeDefinition().Name.Contains("IRedbObject")))
                return false;
                
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã - –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å—ã
            return type.IsClass;
        }

        /// <summary>
        /// üîß –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–ª—è –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
        /// </summary>
        private async Task SyncStructuresForType(IRedbScheme scheme, Type propsType)
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è –≤—ã–∑–æ–≤–∞ generic –º–µ—Ç–æ–¥–∞ SyncStructuresFromTypeAsync<TProps>
            var method = typeof(PostgresSchemeSyncProvider)
                .GetMethod("SyncStructuresFromTypeAsync", System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
            
            if (method != null)
            {
                var genericMethod = method.MakeGenericMethod(propsType);
                var result = await (Task<List<IRedbStructure>>)genericMethod.Invoke(_schemeSync, new object[] { scheme, true })!;

            }
            else
            {
                // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                var allMethods = typeof(PostgresSchemeSyncProvider).GetMethods(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance);
                var syncMethods = allMethods.Where(m => m.Name.Contains("Sync")).ToList();

                foreach (var m in syncMethods)
                {

                }
                throw new InvalidOperationException($"–ú–µ—Ç–æ–¥ SyncStructuresFromTypeAsync –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PostgresSchemeSyncProvider");
            }
        }

        // ===== üå≥ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ï–†–ï–í–û–ú –°–¢–†–£–ö–¢–£–† =====
        
        /// <summary>
        /// üîß –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–ª–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–µ—Ä–µ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä
        /// </summary>
        private async Task ProcessSimpleFieldWithTree(IRedbObject obj, StructureTreeNode structureNode, object? rawValue, List<_RValue> valuesList)
        {
            var valueRecord = new _RValue
            {
                Id = _context.GetNextKey(),
                IdObject = obj.Id,
                IdStructure = structureNode.Structure.Id
            };
            
            var dbType = await GetStructureDbType(structureNode.Structure);
            SetSimpleValueByType(valueRecord, dbType, rawValue);
            valuesList.Add(valueRecord);
            

        }
        
        /// <summary>
        /// üìä –ú–∞—Å—Å–∏–≤ —Å –ø–æ–¥–¥–µ—Ä–µ–≤–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä
        /// </summary>
        private async Task ProcessArrayWithSubtree(IRedbObject obj, StructureTreeNode arrayStructureNode, object? rawValue, List<_RValue> valuesList, List<IRedbObject> objectsToSave, long? parentValueId = null, int? parentArrayIndex = null)
        {
            if (rawValue == null) 
            {
                return;
            }
            if (rawValue is not IEnumerable enumerable || rawValue is string) 
            {
                return;
            }

            // üéØ –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            var strategy = _configuration.EavSaveStrategy;
            var arrayHash = RedbHash.ComputeForProps(rawValue);
            _RValue baseArrayRecord;
            
            if (strategy == EavSaveStrategy.ChangeTracking && obj.Id != 0)
            {
                // üéØ ChangeTracking + —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç: –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å
                // TODO: –ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è ArrayParentId (ID –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –≤ ProcessArrayElementsChangeTracking)
                baseArrayRecord = new _RValue
                {
                    Id = 0, // —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π ID
                    IdObject = obj.Id,
                    IdStructure = arrayStructureNode.Structure.Id,
                    Guid = arrayHash
                };
                // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤ valuesList!
            }
            else
            {
                // üÜï –ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –ò–õ–ò DeleteInsert: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å
                baseArrayRecord = new _RValue
            {
                Id = _context.GetNextKey(),
                IdObject = obj.Id,
                IdStructure = arrayStructureNode.Structure.Id,
                ArrayParentId = parentValueId,      // ‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É Class –ø–æ–ª—é
                ArrayIndex = parentArrayIndex,      // ‚úÖ –ù–∞—Å–ª–µ–¥—É–µ–º ArrayIndex –æ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
                Guid = arrayHash
            };
                
            valuesList.Add(baseArrayRecord);
            }


            // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–¥–¥–µ—Ä–µ–≤–æ–º
            await ProcessArrayElementsWithSubtree(obj, arrayStructureNode, baseArrayRecord.Id, enumerable, valuesList, objectsToSave);
        }
        
        /// <summary>
        /// üî¢ –≠–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ —Å –ø–æ–¥–¥–µ—Ä–µ–≤–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä
        /// </summary>
        private async Task ProcessArrayElementsWithSubtree(IRedbObject obj, StructureTreeNode arrayStructureNode, long parentValueId, IEnumerable enumerable, List<_RValue> valuesList, List<IRedbObject> objectsToSave)
        {
            // üéØ –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ parentValueId == 0, —Ç–æ —ç—Ç–æ ChangeTracking —Å—Ü–µ–Ω–∞—Ä–∏–π
            // –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å –º–∞—Å—Å–∏–≤–∞ –≤ –ë–î
            long actualParentId = parentValueId;
            
            if (parentValueId == 0 && obj.Id != 0) // ChangeTracking —Å—Ü–µ–Ω–∞—Ä–∏–π
            {
                // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å –º–∞—Å—Å–∏–≤–∞ –≤ –ë–î
                var existingBaseRecord = await _context.Set<_RValue>()
                    .FirstOrDefaultAsync(v => v.IdObject == obj.Id && 
                                             v.IdStructure == arrayStructureNode.Structure.Id && 
                                             !v.ArrayIndex.HasValue);
                
                if (existingBaseRecord != null)
                {
                    actualParentId = existingBaseRecord.Id;
                }
                else
                {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    var arrayHash = RedbHash.ComputeForProps((object)enumerable);
                    var newBaseRecord = new _RValue
                    {
                        Id = _context.GetNextKey(),
                        IdObject = obj.Id,
                        IdStructure = arrayStructureNode.Structure.Id,
                        Guid = arrayHash
                    };
                    valuesList.Add(newBaseRecord);
                    actualParentId = newBaseRecord.Id;
                }
            }
            
            int index = 0;
            foreach (var item in enumerable)
            {
                var elementRecord = new _RValue
                {
                    Id = _context.GetNextKey(),
                    IdObject = obj.Id,
                    IdStructure = arrayStructureNode.Structure.Id,
                    ArrayParentId = actualParentId, // üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π ID
                    ArrayIndex = index
                };

                if (item != null)
                {
                    var itemType = item.GetType();
                    
                    // ‚ôªÔ∏è –†–ï–ö–£–†–°–ò–Ø –° –ü–û–î–î–ï–†–ï–í–¨–Ø–ú–ò: —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    if (await IsRedbObjectStructure(arrayStructureNode.Structure))
                    {
                        // üîó IRedbObject —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ - BULK –°–¢–†–ê–¢–ï–ì–ò–Ø: –±–µ—Ä–µ–º ID –Ω–∞–ø—Ä—è–º—É—é 
                        var redbObj = (IRedbObject)item;
                        var objectId = redbObj.Id;
                        
                        elementRecord.Long = objectId;
                        valuesList.Add(elementRecord);

                    }
                    else if (IsBusinessClassType(itemType))
                    {
                        // üèóÔ∏è –ë–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
                        var itemHash = RedbHash.ComputeForProps(item);
                        elementRecord.Guid = itemHash;
                        valuesList.Add(elementRecord);

                        
                        // ‚ôªÔ∏è –†–ï–ö–£–†–°–ò–Ø: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –ø–æ–ª—è —Å –ø–æ–¥–¥–µ—Ä–µ–≤–æ–º  
                        await ProcessBusinessClassChildrenWithSubtree(obj, elementRecord.Id, item, arrayStructureNode.Children, valuesList, objectsToSave, index);
                    }
                    else
                    {
                        // –ü—Ä–æ—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
                        var elementDbType = await GetStructureDbType(arrayStructureNode.Structure);
                        SetSimpleValueByType(elementRecord, elementDbType, item);
                        valuesList.Add(elementRecord);

                    }
                }
                else
                {
                    valuesList.Add(elementRecord); // null —ç–ª–µ–º–µ–Ω—Ç

                }

                index++;
            }

        }
        
        /// <summary>
        /// üèóÔ∏è –ë–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å —Å –ø–æ–¥–¥–µ—Ä–µ–≤–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä
        /// </summary>
        private async Task ProcessBusinessClassWithSubtree(IRedbObject obj, StructureTreeNode classStructureNode, object? rawValue, List<_RValue> valuesList, List<IRedbObject> objectsToSave)
        {

            if (rawValue == null) 
            {
                return;
            }

            // ‚úÖ –í—ã—á–∏—Å–ª—è–µ–º UUID —Ö–µ—à –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞
            var classHash = RedbHash.ComputeForProps(rawValue);

            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å Class –ø–æ–ª—è —Å —Ö–µ—à–µ–º –≤ _Guid
            var classRecord = new _RValue
            {
                Id = _context.GetNextKey(),
                IdObject = obj.Id,
                IdStructure = classStructureNode.Structure.Id,
                Guid = classHash
            };
            
            valuesList.Add(classRecord);

            // ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –ø–æ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–¥–¥–µ—Ä–µ–≤–æ–º!
            await ProcessBusinessClassChildrenWithSubtree(obj, classRecord.Id, rawValue, classStructureNode.Children, valuesList, objectsToSave);
        }
        
        /// <summary>
        /// üë∂ –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö –ø–æ–ª–µ–π –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–µ–≤–æ–º
        /// </summary>
        private async Task ProcessBusinessClassChildrenWithSubtree(IRedbObject obj, long parentValueId, object businessObject, List<StructureTreeNode> childrenSubtree, List<_RValue> valuesList, List<IRedbObject> objectsToSave, int? parentArrayIndex = null)
        {
            var businessType = businessObject.GetType();
            foreach (var childStructureNode in childrenSubtree)
            {
                // ‚úÖ –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –°–í–û–ô–°–¢–í–ê –í C# –ö–õ–ê–°–°–ï  
                var property = businessType.GetProperty(childStructureNode.Structure.Name);
                if (property == null)
                {

                    
                    // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ø–æ–∫–∞–∂–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
                    var allProperties = businessType.GetProperties().Select(p => p.Name).ToArray();

                    continue;
                }

                var childValue = property.GetValue(businessObject);


                // ‚úÖ NULL –°–ï–ú–ê–ù–¢–ò–ö–ê  
                if (!PostgresObjectStorageProviderExtensions.ShouldCreateValueRecord(childValue, childStructureNode.Structure.StoreNull ?? false))
                {

                    continue;
                }

                // ‚ôªÔ∏è –†–ï–ö–£–†–°–ò–í–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–¥–¥–µ—Ä–µ–≤—å—è–º–∏
                if (childStructureNode.Structure.IsArray == true)
                {
                    await ProcessArrayWithSubtree(obj, childStructureNode, childValue, valuesList, objectsToSave, parentValueId, parentArrayIndex);
                }
                else if (await IsClassTypeStructure(childStructureNode.Structure))
                {
                    await ProcessBusinessClassWithSubtree(obj, childStructureNode, childValue, valuesList, objectsToSave);
                }
                else if (await IsRedbObjectStructure(childStructureNode.Structure))
                {
                    await ProcessIRedbObjectField(obj, childStructureNode.Structure, childValue, objectsToSave, valuesList);
                }
                else
                {
                    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ø–æ–ª—è —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É Class –ø–æ–ª—é
                    var childRecord = new _RValue
                    {
                        Id = _context.GetNextKey(),
                        IdObject = obj.Id,
                        IdStructure = childStructureNode.Structure.Id,
                        ArrayParentId = parentValueId,
                        ArrayIndex = parentArrayIndex   // ‚úÖ –ù–∞—Å–ª–µ–¥—É–µ–º ArrayIndex –µ—Å–ª–∏ —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
                    };

                    var childDbType = await GetStructureDbType(childStructureNode.Structure);
                    SetSimpleValueByType(childRecord, childDbType, childValue);
                    valuesList.Add(childRecord);

                }
            }
        }
        
        /// <summary>
        /// üîó –û–±—Ä–∞–±–æ—Ç–∫–∞ IRedbObject –ø–æ–ª—è —Å –ø–æ–∏—Å–∫–æ–º ID –≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–µ –æ–±—ä–µ–∫—Ç–æ–≤
        /// </summary>
        private async Task ProcessIRedbObjectField(IRedbObject obj, IRedbStructure structure, object? redbObjectValue, List<IRedbObject> objectsToSave, List<_RValue> valuesList)
        {

            
            if (structure.IsArray == true)
            {
                // –ú–ê–°–°–ò–í IRedbObject
                await ProcessIRedbObjectArray(obj, structure, (IEnumerable)redbObjectValue!, objectsToSave, valuesList);
            }
            else
            {
                // –û–î–ò–ù–û–ß–ù–´–ô IRedbObject
                await ProcessSingleIRedbObject(obj, structure, (IRedbObject)redbObjectValue!, objectsToSave, valuesList);
            }
        }
        
        /// <summary>
        /// üîó –û–¥–∏–Ω–æ—á–Ω—ã–π IRedbObject —Å –ø–æ–∏—Å–∫–æ–º ID –≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–µ
        /// </summary>
        private async Task ProcessSingleIRedbObject(IRedbObject obj, IRedbStructure structure, IRedbObject redbObjectValue, List<IRedbObject> objectsToSave, List<_RValue> valuesList)
        {
            // üéØ BULK –°–¢–†–ê–¢–ï–ì–ò–Ø: –ë–µ—Ä–µ–º ID –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ–±—ä–µ–∫—Ç–∞ (—É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)
            var objectId = redbObjectValue.Id;
            
            var record = new _RValue
            {
                Id = _context.GetNextKey(),
                IdObject = obj.Id,
                IdStructure = structure.Id,
                Long = objectId  // ‚úÖ –†–ï–ê–õ–¨–ù–´–ô ID –≤–º–µ—Å—Ç–æ NULL!
            };
            
            valuesList.Add(record);

        }
        
        /// <summary>
        /// üìä –ú–∞—Å—Å–∏–≤ IRedbObject —Å –ø–æ–∏—Å–∫–æ–º ID –≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–µ
        /// </summary>
        private async Task ProcessIRedbObjectArray(IRedbObject obj, IRedbStructure structure, IEnumerable redbObjectArray, List<IRedbObject> objectsToSave, List<_RValue> valuesList)
        {
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å –º–∞—Å—Å–∏–≤–∞
            var arrayHash = RedbHash.ComputeForProps((object)redbObjectArray);
            var baseArrayRecord = new _RValue
            {
                Id = _context.GetNextKey(),
                IdObject = obj.Id,
                IdStructure = structure.Id,
                Guid = arrayHash
            };
            valuesList.Add(baseArrayRecord);


            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞
            int index = 0;
            foreach (var item in redbObjectArray)
            {
                if (item != null && IsRedbObjectType(item.GetType()))
                {
                    // üéØ BULK –°–¢–†–ê–¢–ï–ì–ò–Ø: –ë–µ—Ä–µ–º ID –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ–±—ä–µ–∫—Ç–∞ (—É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)
                    var redbObj = (IRedbObject)item;
                    var objectId = redbObj.Id;
                    
                    var elementRecord = new _RValue
                    {
                        Id = _context.GetNextKey(),
                        IdObject = obj.Id,
                        IdStructure = structure.Id,
                        ArrayParentId = baseArrayRecord.Id,
                        ArrayIndex = index,
                        Long = objectId  // ‚úÖ –†–ï–ê–õ–¨–ù–´–ô ID!
                    };
                    
                    valuesList.Add(elementRecord);

                }
                index++;
            }
        }
        
        /// <summary>
        /// üîç –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–∞ –≤ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–µ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
        /// </summary>
        private IRedbObject? FindObjectInCollector(IRedbObject target, List<IRedbObject> objectsToSave)
        {
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
            var byReference = objectsToSave.FirstOrDefault(o => ReferenceEquals(o, target));
            if (byReference != null)
            {

                return byReference;
            }
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ Name + Type
            var byNameAndType = objectsToSave.FirstOrDefault(o => 
                o.Name == target.Name && 
                o.GetType() == target.GetType());
            if (byNameAndType != null)
            {

                return byNameAndType;
            }
            
            // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ Hash (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
            if (target.Hash.HasValue)
            {
                var byHash = objectsToSave.FirstOrDefault(o => o.Hash == target.Hash);
                if (byHash != null)
                {

                    return byHash;
                }
            }
            

            return null;
        }

        // SetSimpleValueByType —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ PostgresObjectStorageProvider.cs

        /// <summary>
        /// üéØ –®–ê–ì 6: –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ values –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        /// </summary>
        private async Task PrepareValuesByStrategy(List<IRedbObject> objects, List<_RValue> valuesList)
        {
            var strategy = _configuration.EavSaveStrategy;


            switch (strategy)
            {
                case EavSaveStrategy.DeleteInsert:
                    await PrepareValuesWithTreeDeleteInsert(objects, valuesList);
                    break;

                case EavSaveStrategy.ChangeTracking:
                    await PrepareValuesWithTreeChangeTracking(objects, valuesList);
                    break;

                default:
                    throw new NotSupportedException($"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ TreeBased SaveAsync");
            }
        }

        /// <summary>
        /// üóëÔ∏è –®–ê–ì 6A: Tree-based Delete/Insert —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è _RValue (–ø—Ä–æ—Å—Ç–∞—è, –Ω–∞–¥–µ–∂–Ω–∞—è)
        /// </summary>
        private async Task PrepareValuesWithTreeDeleteInsert(List<IRedbObject> objects, List<_RValue> valuesList)
        {

            
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ values –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ (–ø—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)
            var objectIds = objects.Where(o => o.Id != 0).Select(o => o.Id).ToList();
            if (objectIds.Any())
            {
                var existingValues = await _context.Set<_RValue>()
                    .Where(v => objectIds.Contains(v.IdObject))
                    .ToListAsync();
                _context.Set<_RValue>().RemoveRange(existingValues);

            }
            else
            {

            }
            
            // –î–ª—è DeleteInsert —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ - valuesList –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ CommitAllChangesBatch

        }

        /// <summary>
        /// ‚ö° –®–ê–ì 6B: Tree-based ChangeTracking —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è _RValue (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è)
        /// –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ values, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ
        /// </summary>
        private async Task PrepareValuesWithTreeChangeTracking(List<IRedbObject> objects, List<_RValue> valuesList)
        {

            
            // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
            var existingObjectIds = objects.Where(o => o.Id != 0).Select(o => o.Id).ToList();
            
            if (!existingObjectIds.Any())
            {
                // ‚úÖ –¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –±–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π


                return; // valuesList —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ values –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            }



            // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ values –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            var existingValues = await _context.Set<_RValue>()
                .Where(v => existingObjectIds.Contains(v.IdObject))
                .ToListAsync();
            

            
            // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö values
            if (existingValues.Count > 0)
            {

                foreach (var ev in existingValues.Take(10))
                {

                }
            }

            // 3. –°–æ–∑–¥–∞–µ–º –±—ã—Å—Ç—Ä—ã–π Dictionary –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö values
            // üéØ ArrayParentId –¢–û–õ–¨–ö–û –î–õ–Ø –≠–õ–ï–ú–ï–ù–¢–û–í –ú–ê–°–°–ò–í–û–í! –û–±—ã—á–Ω—ã–µ –ø–æ–ª—è - –ë–ï–ó ArrayParentId!
            var existingValuesDict = existingValues.ToDictionary(
                v => v.ArrayIndex.HasValue 
                    ? $"{v.IdObject}|{v.IdStructure}|{v.ArrayIndex}"  // –î–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–æ–≤ - —Å ArrayIndex
                    : $"{v.IdObject}|{v.IdStructure}", // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π - –ë–ï–ó ArrayParentId!
                v => v
            );

            // 4. –ü–æ–ª—É—á–∞–µ–º –ü–û–õ–ù–£–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö (DbType + IsArray + StoreNull)
            var structureIds = valuesList.Select(v => v.IdStructure).Distinct().ToList();
            var structuresFullInfo = await GetStructuresFullInfo(structureIds);
            var structuresInfo = structuresFullInfo.ToDictionary(x => x.Key, x => x.Value.DbType); // Legacy —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å

            // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –Ω–æ–≤—ã—Ö values

            foreach (var nv in valuesList.Take(10))
            {

            }

            // 5. üéØ –†–ê–ó–î–ï–õ–Ø–ï–ú –ù–ê –û–ë–´–ß–ù–´–ï –ü–û–õ–Ø –ò –≠–õ–ï–ú–ï–ù–¢–´ –ú–ê–°–°–ò–í–û–í –î–û –û–ë–†–ê–ë–û–¢–ö–ò
            var regularFields = valuesList.Where(v => !v.ArrayIndex.HasValue).ToList();
            var arrayElements = valuesList.Where(v => v.ArrayIndex.HasValue).ToList();
            




            // 6. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—è
            var valuesToInsert = new List<_RValue>();
            var valuesToDelete = new List<_RValue>();
            var statsUpdated = 0;
            var statsInserted = 0;
            var statsSkipped = 0;


            foreach (var newValue in regularFields)
            {
                // Values –¥–ª—è –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ INSERT
                if (!existingObjectIds.Contains(newValue.IdObject))
                {
                    valuesToInsert.Add(newValue);
                    statsInserted++;
                    continue;
                }

                // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ value
                // üéØ –¢–û–õ–¨–ö–û –û–ë–´–ß–ù–´–ï –ü–û–õ–Ø (ArrayParentId –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø!)
                var uniqueKey = $"{newValue.IdObject}|{newValue.IdStructure}";
                
                if (existingValuesDict.TryGetValue(uniqueKey, out var existingValue))
                {
                    // Value —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –∑–Ω–∞—á–∏–º–æ–º—É –ø–æ–ª—é (DbType)
                    var changed = await IsValueChanged(existingValue, newValue, structuresInfo);
                    if (changed)
                    {
                        // Value –∏–∑–º–µ–Ω–∏–ª—Å—è - UPDATE —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                        var dbType = structuresInfo.TryGetValue(newValue.IdStructure, out var dt) ? dt : "Unknown";


                        UpdateExistingValueFields(existingValue, newValue, structuresInfo);
                        
                        statsUpdated++;
                    }
                    else
                    {
                        // Value –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è - SKIP

                        statsSkipped++;
                    }
                    
                    // –£–±–∏—Ä–∞–µ–º –∏–∑ Dictionary (–æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π)
                    existingValuesDict.Remove(uniqueKey);
                }
                else
                {
                    // Value –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - INSERT

                    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï FK CONSTRAINT: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏—Ä–∞–µ–º ArrayParentId –¥–ª—è embedded –ø–æ–ª–µ–π
                    if (newValue.ArrayParentId.HasValue && !newValue.ArrayIndex.HasValue)
                    {
                        newValue.ArrayParentId = null; // embedded –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ñ–ª–∞—Ç—Ç–µ–Ω–Ω—ã–º–∏
                    }

                    valuesToInsert.Add(newValue);
                    statsInserted++;
                }
            }

            // 6. üéØ –°–ù–ê–ß–ê–õ–ê –£–î–ê–õ–Ø–ï–ú –≠–õ–ï–ú–ï–ù–¢–´ –ú–ê–°–°–ò–í–û–í –ò–ó existingValuesDict
            if (arrayElements.Any())
            {
                // üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —É–¥–∞–ª—è–µ–º –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–æ–≤ –∏–∑ existingValuesDict
                // —á—Ç–æ–±—ã –æ–Ω–∏ –ù–ï –ø–æ–ø–∞–ª–∏ –≤ remainingValues –∏ –ù–ï –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã!
                var arrayElementsToRemove = existingValues
                    .Where(v => v.ArrayIndex.HasValue)
                    .Select(v => $"{v.IdObject}|{v.IdStructure}|{v.ArrayIndex}")  // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ö–õ–Æ–ß!
                    .ToList();
                    
                foreach (var keyToRemove in arrayElementsToRemove)
                {
                    existingValuesDict.Remove(keyToRemove);
                }
                

            }

            // 7. –¢–ï–ü–ï–†–¨ remainingValues –ù–ï –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–æ–≤
            var remainingValues = existingValuesDict.Values.ToList();
            valuesToDelete.AddRange(remainingValues);
            



            
            if (valuesToDelete.Any())
            {

                foreach (var dv in valuesToDelete.Take(10))
                {
                    var type = dv.ArrayIndex.HasValue ? "ARRAY_ELEMENT" : "FIELD";

                }
            }

            // 8. üéØ –û–¢–î–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –≠–õ–ï–ú–ï–ù–¢–û–í –ú–ê–°–°–ò–í–û–í –ü–û –ò–ù–î–ï–ö–°–ê–ú
            
            if (arrayElements.Any())
            {
                
                var (arrayUpdated, arrayInserted, arraySkipped) = await ProcessArrayElementsChangeTracking(
                    arrayElements, existingValues, valuesToInsert, valuesToDelete, structuresFullInfo);
                statsUpdated += arrayUpdated;
                statsInserted += arrayInserted;
                statsSkipped += arraySkipped;
            }
            else
            {

            }
            
            // 9. –î–û–ë–ê–í–õ–Ø–ï–ú DELETE –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ EF –∫–æ–Ω—Ç–µ–∫—Å—Ç  
            if (valuesToDelete.Count > 0)
            {

                _context.Set<_RValue>().RemoveRange(valuesToDelete);
            }

            // 8. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π valuesList —Ç–æ–ª—å–∫–æ –∏–∑ –Ω–æ–≤—ã—Ö values –¥–ª—è INSERT
            valuesList.Clear();
            valuesList.AddRange(valuesToInsert);
            

            foreach (var iv in valuesToInsert.Take(10))
            {

            }






        }

        /// <summary>
        /// üî¢ –û–¢–î–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –≠–õ–ï–ú–ï–ù–¢–û–í –ú–ê–°–°–ò–í–û–í –ü–û –ò–ù–î–ï–ö–°–ê–ú
        /// –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º: element[0] —Å element[0], element[1] —Å element[1]
        /// </summary>
        private async Task<(int updated, int inserted, int skipped)> ProcessArrayElementsChangeTracking(
            List<_RValue> newArrayElements, 
            List<_RValue> existingValues, 
            List<_RValue> valuesToInsert, 
            List<_RValue> valuesToDelete, 
            Dictionary<long, StructureFullInfo> structuresFullInfo)
        {
            int localUpdated = 0, localInserted = 0, localSkipped = 0;
            
            // 1. üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–∞–∑–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –º–∞—Å—Å–∏–≤–æ–≤
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ArrayParentId
            var newElementsByStructure = newArrayElements
                .GroupBy(e => new { e.IdObject, e.IdStructure })
                .ToList();
                
            foreach (var structureGroup in newElementsByStructure)
            {
                var key = structureGroup.Key;
                var elementsInGroup = structureGroup.ToList();
                
                // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å –º–∞—Å—Å–∏–≤–∞
                var existingBaseField = existingValues
                    .FirstOrDefault(v => v.IdObject == key.IdObject && 
                                        v.IdStructure == key.IdStructure && 
                                        !v.ArrayIndex.HasValue);
                                        
                if (existingBaseField != null) 
                {
                    // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—É—é –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ valuesToInsert –∏ –£–î–ê–õ–Ø–ï–ú –µ—ë
                    var newBaseField = valuesToInsert
                        .FirstOrDefault(v => v.IdObject == key.IdObject && 
                                           v.IdStructure == key.IdStructure && 
                                           !v.ArrayIndex.HasValue);
                    
                    if (newBaseField != null)
                    {
                        valuesToInsert.Remove(newBaseField);
                        
                        foreach (var element in elementsInGroup)
                        {
                            element.ArrayParentId = existingBaseField.Id;
                        }
                    }
                }
            }
            
            // 2. üéØ –ì–†–£–ü–ü–ò–†–£–ï–ú –ü–û ArrayParentId (–ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
            var existingArraysDict = existingValues
                .Where(v => v.ArrayIndex.HasValue)
                .GroupBy(v => v.ArrayParentId)
                .ToDictionary(g => g.Key, g => g.OrderBy(x => x.ArrayIndex).ToList());
                
            var newArraysDict = newArrayElements
                .GroupBy(v => v.ArrayParentId)
                .ToDictionary(g => g.Key, g => g.OrderBy(x => x.ArrayIndex).ToList());
            
            // 3. üéØ –°–†–ê–í–ù–ò–í–ê–ï–ú –ü–û ArrayParentId
            var allArrayParentIds = existingArraysDict.Keys.Union(newArraysDict.Keys).ToList();

            foreach (var arrayParentId in allArrayParentIds)
            {
                var existingElements = existingArraysDict.GetValueOrDefault(arrayParentId) ?? new List<_RValue>();
                var newElements = newArraysDict.GetValueOrDefault(arrayParentId) ?? new List<_RValue>();
                
                // üéØ –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –¥–ª—è –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–æ–≤
                var (updated, inserted, skipped) = await CompareArrayElementsByIndex(existingElements, newElements, valuesToInsert, valuesToDelete, structuresFullInfo);
                localUpdated += updated;
                localInserted += inserted;
                localSkipped += skipped;
            }
            
            return (localUpdated, localInserted, localSkipped);
        }

        /// <summary>
        /// üéØ –°–†–ê–í–ù–ï–ù–ò–ï –≠–õ–ï–ú–ï–ù–¢–û–í –ú–ê–°–°–ò–í–ê –ü–û –ò–ù–î–ï–ö–°–ê–ú
        /// </summary>
        private async Task<(int updated, int inserted, int skipped)> CompareArrayElementsByIndex(
            List<_RValue> existingElements, 
            List<_RValue> newElements, 
            List<_RValue> valuesToInsert, 
            List<_RValue> valuesToDelete, 
            Dictionary<long, StructureFullInfo> structuresFullInfo)
        {
            int localUpdated = 0, localInserted = 0, localSkipped = 0;
            var maxIndex = Math.Max(existingElements.Count, newElements.Count);
            
            for (int i = 0; i < maxIndex; i++)
            {
                var existingElement = i < existingElements.Count ? existingElements[i] : null;
                var newElement = i < newElements.Count ? newElements[i] : null;
                
                if (existingElement != null && newElement != null)
                {
                    // –û–±–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—Å—Ç—å - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ DbType
                    var structInfo = structuresFullInfo[newElement.IdStructure];
                    var legacyStructuresInfo = new Dictionary<long, string> { { newElement.IdStructure, structInfo.DbType } };
                    
                    var changed = await IsValueChanged(existingElement, newElement, legacyStructuresInfo);
                    if (changed)
                    {
                        UpdateExistingValueFields(existingElement, newElement, legacyStructuresInfo);
                        localUpdated++;
                    }
                    else
                    {
                        localSkipped++;
                    }
                }
                else if (existingElement != null && newElement == null)
                {
                    valuesToDelete.Add(existingElement);
                }
                else if (existingElement == null && newElement != null)
                {
                    valuesToInsert.Add(newElement);
                    localInserted++;
                }
            }
            
            return (localUpdated, localInserted, localSkipped);
        }

        /// <summary>
        /// üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è ChangeTracking
        /// </summary>
        public class StructureFullInfo
        {
            public string DbType { get; set; } = "String";
            public bool IsArray { get; set; }
            public bool StoreNull { get; set; }
        }

        /// <summary>
        /// üìã –ü–æ–ª—É—á–∞–µ—Ç –ü–û–õ–ù–£–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö (DbType + IsArray + StoreNull)
        /// </summary>
        private async Task<Dictionary<long, StructureFullInfo>> GetStructuresFullInfo(List<long> structureIds)
        {
            return await _context.Structures
                .Where(s => structureIds.Contains(s.Id))
                .Join(_context.Types, s => s.IdType, t => t.Id, (s, t) => new { 
                    s.Id, 
                    DbType = t.DbType ?? "String",
                    s.IsArray,
                    s.StoreNull
                })
                .ToDictionaryAsync(x => x.Id, x => new StructureFullInfo 
                { 
                    DbType = x.DbType, 
                    IsArray = x.IsArray ?? false,
                    StoreNull = x.StoreNull ?? false
                });
        }

        /// <summary>
        /// üìã LEGACY: –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DbType –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        /// </summary>
        private async Task<Dictionary<long, string>> GetStructuresDbTypeInfo(List<long> structureIds)
        {
            var fullInfo = await GetStructuresFullInfo(structureIds);
            return fullInfo.ToDictionary(x => x.Key, x => x.Value.DbType);
        }

        /// <summary>
        /// üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ values —Ç–æ–ª—å–∫–æ –ø–æ –∑–Ω–∞—á–∏–º–æ–º—É –ø–æ–ª—é (–ø–æ DbType)
        /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–æ–≤ –º–∞—Å—Å–∏–≤–æ–≤
        /// </summary>
        private async Task<bool> IsValueChanged(_RValue oldValue, _RValue newValue, Dictionary<long, string> structuresInfo)
        {
            if (!structuresInfo.TryGetValue(newValue.IdStructure, out var dbType))
            {
                // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
                return true;
            }

            // üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –≠–õ–ï–ú–ï–ù–¢–û–í –ú–ê–°–°–ò–í–û–í –ë–ò–ó–ù–ï–°-–ö–õ–ê–°–°–û–í
            // –ï—Å–ª–∏ —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ (–∏–º–µ–µ—Ç ArrayIndex) –∏ –µ—Å—Ç—å Guid - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ Guid —Ö–µ—à—É
            if (oldValue.ArrayIndex.HasValue && newValue.ArrayIndex.HasValue && 
                (oldValue.Guid.HasValue || newValue.Guid.HasValue))
            {
                // –î–ª—è –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–æ–≤ –≤ –º–∞—Å—Å–∏–≤–∞—Ö - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Ö–µ—à—É –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ
                var oldGuid = oldValue.Guid;
                var newGuid = newValue.Guid;
                
                // –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ —Ö–µ—à–µ–π null - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
                if (!oldGuid.HasValue || !newGuid.HasValue)
                    return true;
                    
                return oldGuid != newGuid;
            }

            // üìù –°–¢–ê–ù–î–ê–†–¢–ù–ê–Ø –õ–û–ì–ò–ö–ê –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π
            return dbType switch
            {
                "String" => oldValue.String != newValue.String,
                "Long" => oldValue.Long != newValue.Long,
                "Double" => oldValue.Double != newValue.Double,
                "DateTime" => oldValue.DateTime != newValue.DateTime,
                "Boolean" => oldValue.Boolean != newValue.Boolean,
                "Guid" => oldValue.Guid != newValue.Guid,
                "ByteArray" => oldValue.ByteArray != newValue.ByteArray,
                _ => true // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø - —Å—á–∏—Ç–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º
            };
        }

        /// <summary>
        /// üîÑ –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ value –∏–∑ –Ω–æ–≤–æ–≥–æ value (—Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –ø–æ–ª—è)
        /// </summary>
        private void UpdateExistingValueFields(_RValue existingValue, _RValue newValue, Dictionary<long, string> structuresInfo)
        {
            if (!structuresInfo.TryGetValue(newValue.IdStructure, out var dbType))
            {
                return; // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø - –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º–æ–µ –ø–æ–ª–µ –ø–æ DbType
            switch (dbType)
            {
                case "String":
                    existingValue.String = newValue.String;
                    break;
                case "Long":
                    existingValue.Long = newValue.Long;
                    break;
                case "Double":
                    existingValue.Double = newValue.Double;
                    break;
                case "DateTime":
                    existingValue.DateTime = newValue.DateTime;
                    break;
                case "Boolean":
                    existingValue.Boolean = newValue.Boolean;
                    break;
                case "Guid":
                    existingValue.Guid = newValue.Guid;
                    break;
                case "ByteArray":
                    existingValue.ByteArray = newValue.ByteArray;
                    break;
            }
        }



        /// <summary>
        /// üíæ –®–ê–ì 7: Batch —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        /// </summary>
        private async Task CommitAllChangesBatch(List<IRedbObject> objects, List<_RValue> valuesList)
        {

            
            // –°–Ω–∞—á–∞–ª–∞ –æ–±—ä–µ–∫—Ç—ã (–º–æ–≥—É—Ç –±—ã—Ç—å –Ω–æ–≤—ã–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ)
            foreach (var obj in objects)
            {

                var existingObject = await _context.Objects.FindAsync(obj.Id);
                if (existingObject == null)
                {

                    // INSERT –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                    var objectRecord = new _RObject
                    {
                        Id = obj.Id,
                        IdParent = obj.ParentId,
                        IdScheme = obj.SchemeId,
                        IdOwner = obj.OwnerId,
                        IdWhoChange = obj.WhoChangeId,
                        DateCreate = obj.DateCreate,
                        DateModify = obj.DateModify,
                        DateBegin = obj.DateBegin,
                        DateComplete = obj.DateComplete,
                        Key = obj.Key,
                        CodeInt = obj.CodeInt,
                        CodeString = obj.CodeString,
                        CodeGuid = obj.CodeGuid,
                        Name = obj.Name,
                        Note = obj.Note,
                        Bool = obj.Bool,
                        Hash = obj.Hash
                    };
                    _context.Objects.Add(objectRecord);

                }
                else
                {

                    // UPDATE —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                    existingObject.IdParent = obj.ParentId;
                    existingObject.IdWhoChange = obj.WhoChangeId;
                    existingObject.DateModify = obj.DateModify;
                    existingObject.DateBegin = obj.DateBegin;
                    existingObject.DateComplete = obj.DateComplete;
                    existingObject.Key = obj.Key;
                    existingObject.CodeInt = obj.CodeInt;
                    existingObject.CodeString = obj.CodeString;
                    existingObject.CodeGuid = obj.CodeGuid;
                    existingObject.Name = obj.Name;
                    existingObject.Note = obj.Note;
                    existingObject.Bool = obj.Bool;
                    existingObject.Hash = obj.Hash;

                }
            }

            // –ü–æ—Ç–æ–º values (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π –≤ PrepareValuesByStrategy)
            // üéØ ChangeTracking —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∞–º–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç values –≤ EF –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if (valuesList.Count > 0)
            {

                _context.Set<_RValue>().AddRange(valuesList);
            }
            else
            {

            }

            // üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê EF CHANGE TRACKER

            var trackedEntities = _context.ChangeTracker.Entries().ToList();
            
            var addedEntities = trackedEntities.Where(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added).ToList();
            var modifiedEntities = trackedEntities.Where(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Modified).ToList();
            var deletedEntities = trackedEntities.Where(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted).ToList();
            




            
            // –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–û–†–Ø–î–û–ö –û–ü–ï–†–ê–¶–ò–ô

            foreach (var deleted in deletedEntities.Where(e => e.Entity is _RValue))
            {
                if (deleted.Entity is _RValue dv)
                {

                }
            }
            

            foreach (var modified in modifiedEntities.Where(e => e.Entity is _RValue))
            {
                if (modified.Entity is _RValue mv)
                {

                }
            }
            

            foreach (var added in addedEntities.Where(e => e.Entity is _RValue).Take(5))
            {
                if (added.Entity is _RValue av)
                {

                }
            }

            try
            {
                // üéØ –ö–†–ò–¢–ò–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç—è–º–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å FK constraint –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                
                // –®–ê–ì 1: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç—ã –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (UPDATE operations)
                var modifiedCount = _context.ChangeTracker.Entries().Count(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Modified);
                var deletedCount = _context.ChangeTracker.Entries().Count(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted && e.Entity is _RValue);
                var addedCount = _context.ChangeTracker.Entries().Count(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added && e.Entity is _RValue);
                
                
                if (modifiedCount > 0 || deletedCount > 0)
                {
                await _context.SaveChangesAsync();
                }
                
                if (addedCount > 0)
                {
                    await _context.SaveChangesAsync();
                }

            }
            catch (Exception ex)
            {
                throw;
            }
        }

        #region BULK DELETEINSERT OPTIMIZATION

        /// <summary>
        /// üöÄ OPTIMIZED BULK DELETEINSERT: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ bulk –æ–ø–µ—Ä–∞—Ü–∏–∏
        /// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —É—Ä–æ–≤–Ω—è
        /// </summary>
        private async Task<long> SaveAsyncDeleteInsertBulk<TProps>(IRedbObject<TProps> obj, IRedbUser user) where TProps : class, new()
        {
            // üéØ –ö–û–ù–¢–†–û–õ–¨ –£–†–û–í–ù–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ò: —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
            bool isTopLevel = _context.Database.CurrentTransaction == null;
            IDbContextTransaction? transaction = null;

            if (isTopLevel)
            {
                transaction = await _context.Database.BeginTransactionAsync();
            }

            try
            {
                // === –ü–û–î–ì–û–¢–û–í–ö–ê –û–ë–™–ï–ö–¢–ê ===
                if (obj.properties == null)
                {
                    throw new ArgumentException("–°–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å null", nameof(obj));
                }

                // –ü–µ—Ä–µ—Å—á–µ—Ç —Ö–µ—à–∞
                var currentHash = RedbHash.ComputeFor(obj);
                if (currentHash.HasValue)
                {
                    obj.Hash = currentHash.Value;
                }

                // === 1. –°–ù–ê–ß–ê–õ–ê —Å–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç –≤ _objects ===
                await EnsureMainObjectSaved(obj, user);

                // === 2. –¢–ï–ü–ï–†–¨ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï –≤–ª–æ–∂–µ–Ω–Ω—ã–µ RedbObject (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ParentId) ===
                await ProcessAllNestedRedbObjectsFirst(obj);

                // === 2.5. üéØ –ö–†–ò–¢–ò–ß–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º ID —Å—Å—ã–ª–æ–∫ –≤ properties –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ ===
                await SynchronizeNestedObjectIds(obj);

                // === 3. BULK DELETE —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö values (–∏—Å–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ RedbObject) ===
                if (obj.Id != 0)
                {
                    await BulkDeleteExistingValues(obj.Id);
                }

                // === 4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è BULK INSERT ===
                var valuesList = new List<_RValue>();
                await PrepareAllValuesForInsert(obj, valuesList);

                // === 5. BULK INSERT –≤—Å–µ—Ö values –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π ===
                if (valuesList.Any())
                {
                    var bulkConfig = new EFCore.BulkExtensions.BulkConfig
                    {
                        SetOutputIdentity = true,   // –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
                        BatchSize = 1000,           // –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
                        BulkCopyTimeout = 30,       // –¢–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                        PreserveInsertOrder = true  // –í–∞–∂–Ω–æ –¥–ª—è ArrayIndex
                    };
                    await _context.BulkInsertAsync(valuesList, bulkConfig);
                }

                // === 6. COMMIT —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ ===
                if (isTopLevel && transaction != null)
                {
                    await transaction.CommitAsync();
                }

                return obj.Id;
            }
            catch (Exception ex)
            {
                if (isTopLevel && transaction != null)
                {
                    await transaction.RollbackAsync();
                }
                throw;
            }
            finally
            {
                transaction?.Dispose();
            }
        }

        /// <summary>
        /// üîó –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö RedbObject –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ bulk –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ —Ç–æ–π –∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö ID –¥–ª—è —Å—Å—ã–ª–æ–∫
        /// </summary>
        private async Task ProcessAllNestedRedbObjectsFirst<TProps>(IRedbObject<TProps> obj) where TProps : class, new()
        {
            if (obj.properties == null) return;
            
            var nestedObjects = new List<IRedbObject>();
            
            // üîç –ü–û–ò–°–ö –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö RedbObject –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö –æ–±—ä–µ–∫—Ç–∞
            await ExtractNestedRedbObjects(obj.properties, nestedObjects);
            
            if (!nestedObjects.Any())
            {
                return;
            }
            
            // üöÄ –†–ï–ö–£–†–°–ò–í–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –∫–∞–∂–¥–æ–≥–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            foreach (var nestedObj in nestedObjects)
            {
                if (nestedObj.Id == 0)
                {
                    // üÜï –ù–æ–≤—ã–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç - —Å–æ–∑–¥–∞–µ–º —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º
                    if (nestedObj.ParentId == 0 || nestedObj.ParentId == null)
                    {
                        nestedObj.ParentId = obj.Id;
                    }

                    nestedObj.Id = await SaveAsync((dynamic)nestedObj); // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ - –ø–æ–ø–∞–¥–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ bulk —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                }
                else
                {
                    // üîÑ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º
                    await SaveAsync((dynamic)nestedObj); // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
                }
            }
        }
        
        /// <summary>
        /// üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö RedbObject –∏–∑ properties –æ–±—ä–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
        /// </summary>
        private async Task ExtractNestedRedbObjects(object properties, List<IRedbObject> nestedObjects)
        {
            if (properties == null) return;
            
            var propertiesType = properties.GetType();
            var allProperties = propertiesType.GetProperties(BindingFlags.Public | BindingFlags.Instance);
            
            foreach (var prop in allProperties)
            {
                try 
                {
                    var value = prop.GetValue(properties);
                    if (value == null) continue;
                    
                    var valueType = value.GetType();
                    
                    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π RedbObject
                    if (IsRedbObjectType(valueType))
                    {
                        var redbObj = (IRedbObject)value;
                        nestedObjects.Add(redbObj);
                    }
                    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Å–∏–≤ RedbObject
                    else if (valueType.IsArray || (valueType.IsGenericType && valueType.GetGenericTypeDefinition() == typeof(IEnumerable<>)))
                    {
                        if (value is IEnumerable enumerable)
                        {
                            foreach (var item in enumerable)
                            {
                                if (item != null && IsRedbObjectType(item.GetType()))
                                {
                                    var redbObj = (IRedbObject)item;
                                    nestedObjects.Add(redbObj);
                                }
                            }
                        }
                    }
                    // üîç –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–æ–≤
                    else if (IsBusinessClassType(valueType))
                    {
                        await ExtractNestedRedbObjects(value, nestedObjects);
                    }
                    // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤ –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–æ–≤
                    else if (valueType.IsArray && IsBusinessClassType(valueType.GetElementType()!))
                    {
                        if (value is IEnumerable enumerable)
                        {
                            foreach (var item in enumerable)
                            {
                                if (item != null)
                                {
                                    await ExtractNestedRedbObjects(item, nestedObjects);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {

                }
            }
        }
        
        /// <summary>
        /// üîß –ö–†–ò–¢–ò–ß–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª—è–µ—Ç ID —Å—Å—ã–ª–æ–∫ –≤ properties –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        /// –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤ _values –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ID —Å—Å—ã–ª–∫–∏
        /// </summary>
        private async Task SynchronizeNestedObjectIds<TProps>(IRedbObject<TProps> obj) where TProps : class, new()
        {
            if (obj.properties == null) return;
            
            await SynchronizeNestedIdsInProperties(obj.properties);
        }
        
        /// <summary>
        /// üîÑ –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ID –≤–æ –≤—Å–µ—Ö properties –æ–±—ä–µ–∫—Ç–∞
        /// </summary>
        private async Task SynchronizeNestedIdsInProperties(object properties)
        {
            if (properties == null) return;
            
            var propertiesType = properties.GetType();
            var allProperties = propertiesType.GetProperties(BindingFlags.Public | BindingFlags.Instance);
            
            foreach (var prop in allProperties)
            {
                try 
                {
                    var value = prop.GetValue(properties);
                    if (value == null) continue;
                    
                    var valueType = value.GetType();
                    
                    // üîç –û–¥–∏–Ω–æ—á–Ω—ã–π RedbObject - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ID –∞–∫—Ç—É–∞–ª—å–Ω—ã–π
                    if (IsRedbObjectType(valueType))
                    {
                        var redbObj = (IRedbObject)value;
                    }
                    // üîç –ú–∞—Å—Å–∏–≤ RedbObject
                    else if (valueType.IsArray || (valueType.IsGenericType && typeof(IEnumerable).IsAssignableFrom(valueType)))
                    {
                        if (value is IEnumerable enumerable)
                        {
                            var index = 0;
                            foreach (var item in enumerable)
                            {
                                if (item != null && IsRedbObjectType(item.GetType()))
                                {
                                    var redbObj = (IRedbObject)item;

                                    index++;
                                }
                            }
                        }
                    }
                    // üîç –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞—Ö
                    else if (IsBusinessClassType(valueType))
                    {
                        await SynchronizeNestedIdsInProperties(value);
                    }
                    // üîç –ú–∞—Å—Å–∏–≤—ã –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–æ–≤
                    else if (valueType.IsArray && IsBusinessClassType(valueType.GetElementType()!))
                    {
                        if (value is IEnumerable enumerable)
                        {
                            foreach (var item in enumerable)
                            {
                                if (item != null)
                                {
                                    await SynchronizeNestedIdsInProperties(item);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    
                }
            }
        }
        
        /// <summary>
        /// üóëÔ∏è –£–ú–ù–´–ô BULK DELETE: –£–¥–∞–ª—è–µ—Ç values –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∏—Å–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ RedbObject
        /// –û–¥–∏–Ω SQL –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ EF –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        /// </summary>
        private async Task BulkDeleteExistingValues(long objectId)
        {
            try
            {
                var deleteSql = @"
                    DELETE FROM _values 
                    WHERE _id_object = @objectId 
                      AND _id_object NOT IN (
                          -- üõ°Ô∏è –ó–ê–©–ò–¢–ê: –∏—Å–∫–ª—é—á–∞–µ–º values –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö RedbObject
                          SELECT _id FROM _objects WHERE _id_parent = @objectId
                      )";
                
                var parameterId = new Npgsql.NpgsqlParameter("@objectId", objectId);
                var rowsDeleted = await _context.Database.ExecuteSqlRawAsync(deleteSql, parameterId);
                
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        
        /// <summary>
        /// üè¢ –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ _objects
        /// </summary>
        private async Task EnsureMainObjectSaved<TProps>(IRedbObject<TProps> obj, IRedbUser user) where TProps : class, new()
        {
            try
            {
                if (obj.Id == 0)
                {
                    // üÜï –ù–û–í–´–ô –û–ë–™–ï–ö–¢ - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ _objects
                    var newObjectRecord = new _RObject
                    {
                        Id = _context.GetNextKey(),
                        IdScheme = (await _schemeSync.SyncSchemeAsync<TProps>()).Id,
                        Name = obj.Name ?? "",
                        Note = obj.Note,
                        DateCreate = DateTime.Now,
                        DateModify = DateTime.Now,
                        IdOwner = obj.OwnerId > 0 ? obj.OwnerId : user.Id,
                        IdWhoChange = user.Id,
                        IdParent = obj.ParentId,
                        Hash = obj.Hash
                    };
                    
                    _context.Objects.Add(newObjectRecord);
                    await _context.SaveChangesAsync(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
                    
                    obj.Id = newObjectRecord.Id;
                }
                else
                {
                    // üîÑ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –û–ë–™–ï–ö–¢ - –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ _objects
                    var existingObject = await _context.Objects.FirstOrDefaultAsync(o => o.Id == obj.Id);
                    if (existingObject == null)
                    {
                        throw new InvalidOperationException($"–û–±—ä–µ–∫—Ç —Å ID {obj.Id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                    existingObject.Name = obj.Name ?? existingObject.Name;
                    existingObject.Note = obj.Note ?? existingObject.Note;
                    existingObject.DateModify = DateTime.Now;
                    existingObject.IdWhoChange = user.Id;
                    existingObject.Hash = obj.Hash;
                    
                    await _context.SaveChangesAsync();
                }
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        
        /// <summary>
        /// üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Å–µ—Ö values –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è bulk insert –æ–ø–µ—Ä–∞—Ü–∏–∏
        /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é tree-based –ª–æ–≥–∏–∫—É –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        /// </summary>
        private async Task PrepareAllValuesForInsert<TProps>(IRedbObject<TProps> obj, List<_RValue> valuesList) where TProps : class, new()
        {
            try
            {
                // üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–£–Æ –õ–û–ì–ò–ö–£: ProcessPropertiesWithTreeStructures
                // –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–µ–∫—É—â–µ–π tree-based –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
                
                // –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –∏ –¥–µ—Ä–µ–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä
                var scheme = await _schemeSync.GetSchemeByIdAsync(obj.SchemeId);
                if (scheme == null)
                {
                    scheme = await _schemeSync.SyncSchemeAsync<TProps>();
                    obj.SchemeId = scheme.Id;
                }
                
                var schemeProvider = (PostgresSchemeSyncProvider)_schemeSync;
                var structureNodes = await schemeProvider.GetSubtreeAsync(obj.SchemeId, null);
                
                // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —á–∏—Å—Ç–æ–π –≤—Å—Ç–∞–≤–∫–∏
                valuesList.Clear();
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏ —Å–æ–±–∏—Ä–∞–µ–º values
                await ProcessPropertiesWithTreeStructures(obj, structureNodes, valuesList, new List<IRedbObject>());
                
                
                // üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú –°–°–´–õ–ö–ò –ù–ê –û–ë–™–ï–ö–¢: –≤—Å–µ values –¥–æ–ª–∂–Ω—ã —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
                foreach (var value in valuesList)
                {
                    if (value.IdObject == 0)
                    {
                        value.IdObject = obj.Id;
                    }
                }
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        #endregion
    }
}
