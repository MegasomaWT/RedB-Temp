using redb.Core.Providers;
using redb.Core.DBModels;
using Microsoft.EntityFrameworkCore;
using System.Reflection;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using redb.Core.Models.Attributes;
using redb.Core.Models.Entities;
using redb.Core.Models.Configuration;
using redb.Core.Models.Contracts;
using redb.Core.Caching;
using System;
using System.Collections.Concurrent;
using System.Text.Json.Serialization;
using System.Text.Json;

namespace redb.Core.Postgres.Providers
{
    /// <summary>
    /// PostgreSQL —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ö–µ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞
    /// </summary>
    public class PostgresSchemeSyncProvider : ISchemeSyncProvider, ISchemeCacheProvider
    {
        private readonly RedbContext _context;
        private readonly RedbServiceConfiguration _configuration;
        
        // üå≥ –ö–ï–® –î–ï–†–ï–í–ê –°–¢–†–£–ö–¢–£–† –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–µ—Ä–∞—Ä—Ö–∏–∏
        private static readonly ConcurrentDictionary<long, List<StructureTreeNode>> _structureTreeCache = new();
        private static readonly ConcurrentDictionary<(long, long?), List<StructureTreeNode>> _subtreeCache = new();
        
        public PostgresSchemeSyncProvider(RedbContext context, RedbServiceConfiguration? configuration = null)
        {
            _context = context;
            _configuration = configuration ?? new RedbServiceConfiguration();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à —Å –Ω–∞—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            GlobalMetadataCache.Initialize(_configuration);
        }

        public async Task<IRedbScheme> EnsureSchemeFromTypeAsync<TProps>() where TProps : class
        {
            return await EnsureSchemeFromTypeAsync(typeof(TProps).Name, GetSchemeAliasForType<TProps>());
        }

        private async Task<IRedbScheme> EnsureSchemeFromTypeAsync(string? schemeName = null, string? alias = null) 
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞, –µ—Å–ª–∏ schemeName –Ω–µ —É–∫–∞–∑–∞–Ω–æ
            var actualSchemeName = schemeName;
            
            if (string.IsNullOrEmpty(actualSchemeName))
            {
                throw new ArgumentException("–ò–º—è —Å—Ö–µ–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ EnsureSchemeFromTypeAsync<TProps>() –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ —Ç–∏–ø—É.");
            }
            
            // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É –ø–æ –∏–º–µ–Ω–∏
            var existingScheme = await _context.Schemes
                .FirstOrDefaultAsync(s => s.Name == actualSchemeName);

            if (existingScheme != null)
            {
                return RedbScheme.FromEntity(existingScheme);
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã
            var newScheme = new _RScheme
            {
                Id = _context.GetNextKey(),
                Name = actualSchemeName,
                Alias = alias
            };

            _context.Schemes.Add(newScheme);
            await _context.SaveChangesAsync();

            return RedbScheme.FromEntity(newScheme);
        }

        public async Task<List<IRedbStructure>> SyncStructuresFromTypeAsync<TProps>(IRedbScheme scheme, bool strictDeleteExtra = true) where TProps : class
        {

            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä —Å—Ö–µ–º—ã
            var existingStructures = await _context.Structures
                .Where(s => s.IdScheme == scheme.Id)
                .ToListAsync();

            var structuresToKeep = new List<long>();

            // ‚úÖ –ù–û–í–ê–Ø –ü–ê–†–ê–î–ò–ì–ú–ê: –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–∫–ª—é—á–∞—è –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å—ã  
            await SyncStructuresRecursively(typeof(TProps), scheme.Id, null, existingStructures, structuresToKeep);

            // –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä (–µ—Å–ª–∏ strictDeleteExtra = true)
            if (strictDeleteExtra)
            {
                var structuresToDelete = existingStructures
                    .Where(s => !structuresToKeep.Contains(s.Id))
                    .ToList();

                _context.Structures.RemoveRange(structuresToDelete);
            }

            await _context.SaveChangesAsync();
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä
            var updatedStructures = await _context.Structures
                .Where(s => s.IdScheme == scheme.Id)
                .ToListAsync();
            
            return updatedStructures.Select(s => (IRedbStructure)RedbStructure.FromEntity(s)).ToList();
        }

        /// <summary>
        /// ‚úÖ –ù–û–í–ê–Ø –ü–ê–†–ê–î–ò–ì–ú–ê: –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π –≤–∫–ª—é—á–∞—è –¥–æ—á–µ—Ä–Ω–∏–µ –ø–æ–ª—è –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–æ–≤
        /// </summary>
        private async Task SyncStructuresRecursively(Type type, long schemeId, long? parentId, List<_RStructure> existingStructures, List<long> structuresToKeep, HashSet<Type>? visitedTypes = null)
        {
            // –ó–∞—â–∏—Ç–∞ –æ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
            visitedTypes ??= new HashSet<Type>();
            if (visitedTypes.Contains(type)) return;
            visitedTypes.Add(type);

            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ —Ç–∏–ø–∞ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é (–∏—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—è —Å [JsonIgnore])
            var properties = type.GetProperties(BindingFlags.Public | BindingFlags.Instance)
                .Where(p => !p.GetCustomAttributes(typeof(JsonIgnoreAttribute), false).Any())
                .ToArray();
            var nullabilityContext = new NullabilityInfoContext();

            foreach (var property in properties)
            {
                var nullabilityInfo = nullabilityContext.Create(property);
                var isArray = IsArrayType(property.PropertyType);
                var baseType = isArray ? GetArrayElementType(property.PropertyType) : property.PropertyType;
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –Ω–µ nullable –∏ –Ω–µ –∏–º–µ–µ—Ç Nullable<T>
                var isRequired = nullabilityInfo.WriteState != NullabilityState.Nullable && 
                                Nullable.GetUnderlyingType(baseType) == null;
                
                var typeId = await GetTypeIdForTypeAsync(baseType);
                var structureName = property.Name; // ‚úÖ –ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞ - —Ç–æ–ª—å–∫–æ –∏–º—è —Å–≤–æ–π—Å—Ç–≤–∞

                // –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å —É—á–µ—Ç–æ–º —Ä–æ–¥–∏—Ç–µ–ª—è
                var existingStructure = existingStructures
                    .FirstOrDefault(s => s.Name == structureName && s.IdParent == parentId);

                if (existingStructure != null)
                {
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    existingStructure.IdType = typeId;
                    existingStructure.AllowNotNull = isRequired;
                    existingStructure.IsArray = isArray;
                    structuresToKeep.Add(existingStructure.Id);
                }
                else
                {
                    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    var newStructure = new _RStructure
                    {
                        Id = _context.GetNextKey(),
                        IdScheme = schemeId,
                        IdParent = parentId,  // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π parentId
                        Name = structureName,
                        IdType = typeId,
                        AllowNotNull = isRequired,
                        IsArray = isArray,
                        Order = properties.ToList().IndexOf(property)
                    };

                    _context.Structures.Add(newStructure);
                    existingStructures.Add(newStructure); // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞
                    structuresToKeep.Add(newStructure.Id);
                }

                // ‚úÖ –†–ï–ö–£–†–°–ò–Ø: –ï—Å–ª–∏ —ç—Ç–æ –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏—Ö –ø–æ–ª–µ–π
                if (IsBusinessClass(baseType))
                {
                    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–∞–∫ parentId
                    var currentStructureId = existingStructure?.Id ?? 
                        existingStructures.Last(s => s.Name == structureName && s.IdParent == parentId).Id;
                    
                    await SyncStructuresRecursively(baseType, schemeId, currentStructureId, existingStructures, structuresToKeep, visitedTypes);
                }
            }
            
            visitedTypes.Remove(type);
        }

        private async Task<IRedbScheme> SyncSchemeAsync<TProps>(string? schemeName = null, string? alias = null, bool strictDeleteExtra = true) where TProps : class
        {
            var scheme = await EnsureSchemeFromTypeAsync(schemeName, alias);
            await SyncStructuresFromTypeAsync<TProps>(scheme, strictDeleteExtra);
            return scheme;
        }

        public async Task<IRedbScheme> SyncSchemeAsync<TProps>() where TProps : class
        {
            // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–ª–∏–∞—Å–∞ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ RedbSchemeAttribute
            // –ò–º—è —Å—Ö–µ–º—ã –≤—Å–µ–≥–¥–∞ = –∏–º—è –∫–ª–∞—Å—Å–∞
            var attr = GetRedbSchemeAttribute<TProps>();
            var alias = attr?.Alias;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞ –∫–∞–∫ –∏–º—è —Å—Ö–µ–º—ã, strictDeleteExtra = true
            return await SyncSchemeAsync<TProps>(typeof(TProps).Name, alias: alias, strictDeleteExtra: true);
        }

        /// <summary>
        /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—Ç—Ä–∏–±—É—Ç RedbSchemeAttribute –∏–∑ —Ç–∏–ø–∞
        /// </summary>
        private static RedbSchemeAttribute? GetRedbSchemeAttribute<TProps>() where TProps : class
        {
            return typeof(TProps).GetCustomAttribute<RedbSchemeAttribute>();
        }

        /// <summary>
        /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—Ç—Ä–∏–±—É—Ç RedbSchemeAttribute –∏–∑ —Ç–∏–ø–∞
        /// </summary>
        private static RedbSchemeAttribute? GetRedbSchemeAttribute(Type type)
        {
            return type.GetCustomAttribute<RedbSchemeAttribute>();
        }

        private static bool IsArrayType(Type type)
        {
            return type.IsArray || 
                   (type.IsGenericType && 
                    (type.GetGenericTypeDefinition() == typeof(List<>) ||
                     type.GetGenericTypeDefinition() == typeof(IList<>) ||
                     type.GetGenericTypeDefinition() == typeof(ICollection<>) ||
                     type.GetGenericTypeDefinition() == typeof(IEnumerable<>)));
        }

        private static Type GetArrayElementType(Type arrayType)
        {
            if (arrayType.IsArray)
                return arrayType.GetElementType()!;
            
            if (arrayType.IsGenericType)
                return arrayType.GetGenericArguments()[0];
            
            return arrayType;
        }

        private async Task<long> GetTypeIdForTypeAsync(Type type)
        {
            // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–∏–ø –¥–ª—è nullable —Ç–∏–ø–æ–≤
            var underlyingType = Nullable.GetUnderlyingType(type) ?? type;
            
            // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ C# —Ç–∏–ø–æ–≤ –Ω–∞ –∏–º–µ–Ω–∞ —Ç–∏–ø–æ–≤ REDB –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            var typeName = await MapCSharpTypeToRedbTypeAsync(underlyingType);
            
            // === –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø ===
            var cachedId = GlobalMetadataCache.GetTypeId(typeName);
            if (cachedId.HasValue)
                return cachedId.Value;
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ë–î
            var typeEntity = await _context.Set<_RType>()
                .FirstOrDefaultAsync(t => t.Name == typeName);
            
            if (typeEntity == null)
            {
                throw new InvalidOperationException($"–¢–∏–ø '{typeName}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ _types. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ö–µ–º—É –ë–î.");
            }
            
            // === –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø ===
            GlobalMetadataCache.CacheType(typeName, typeEntity.Id);
            return typeEntity.Id;
        }

        private static Dictionary<Type, string>? _csharpToRedbTypeCache;
        
        private async Task<string> MapCSharpTypeToRedbTypeAsync(Type csharpType)
        {

            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–µ—à –º–∞–ø–ø–∏–Ω–≥–∞ –∏–∑ –ë–î –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
            if (_csharpToRedbTypeCache == null)
            {

                await InitializeCSharpToRedbTypeMappingAsync();
            }

            // üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤ RedbObject<>
            if (csharpType.IsGenericType && csharpType.GetGenericTypeDefinition() == typeof(RedbObject<>))
            {

                return "Object";
            }

            // ‚úÖ –ù–û–í–ê–Ø –ü–ê–†–ê–î–ò–ì–ú–ê: –ë–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å—ã (–Ω–µ –ø—Ä–∏–º–∏—Ç–∏–≤—ã) –º–∞–ø–ø–∏–º –≤ "Class"  
            if (IsBusinessClass(csharpType))
            {

                return "Class";
            }

            // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ü–û–°–õ–ï –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
            if (_csharpToRedbTypeCache!.TryGetValue(csharpType, out var exactMatch))
            {

                return exactMatch;
            }

            // –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º String –∫–∞–∫ fallback

            return "String";
        }

        private async Task InitializeCSharpToRedbTypeMappingAsync()
        {
            var allTypes = await _context.Set<_RType>().ToListAsync();
            _csharpToRedbTypeCache = new Dictionary<Type, string>();

            foreach (var dbType in allTypes)
            {
                var dotNetTypeName = dbType.Type1; // –ò—Å–ø–æ–ª—å–∑—É–µ–º Type1 –∏–∑ –º–æ–¥–µ–ª–∏
                if (string.IsNullOrEmpty(dotNetTypeName))
                    continue;

                // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π —Ç–∏–ø–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ C# —Ç–∏–ø—ã
                var csharpType = MapStringToType(dotNetTypeName);
                if (csharpType != null)
                {
                    _csharpToRedbTypeCache[csharpType] = dbType.Name;
                }
            }
        }

        private static Type? MapStringToType(string typeName)
        {
            return typeName switch
            {
                "string" => typeof(string),
                "int" => typeof(int),
                "long" => typeof(long),
                "short" => typeof(short),
                "byte" => typeof(byte),
                "double" => typeof(double),
                "float" => typeof(float),
                "decimal" => typeof(decimal),
                "boolean" => typeof(bool),
                "DateTime" => typeof(DateTime),
                "Guid" => typeof(Guid),
                "byte[]" => typeof(byte[]),
                "char" => typeof(char),
                "TimeSpan" => typeof(TimeSpan),
#if NET6_0_OR_GREATER
                "DateOnly" => typeof(DateOnly),
                "TimeOnly" => typeof(TimeOnly),
#endif
                "_RObject" => typeof(RedbObject<>),
                "_RListItem" => null, // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø, –Ω–µ –º–∞–ø–ø–∏—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
                "Enum" => typeof(Enum),
                _ => null // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø
            };
        }

        /// <summary>
        /// ‚úÖ –ù–û–í–ê–Ø –ü–ê–†–ê–î–ò–ì–ú–ê: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∏–ø –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–æ–º (Class —Ç–∏–ø)
        /// </summary>
        private static bool IsBusinessClass(Type csharpType)
        {
            // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê

            
            // –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã - –ù–ï –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å—ã
            if (csharpType.IsPrimitive || csharpType == typeof(string) || csharpType == typeof(decimal)) 
            {

                return false;
            }

            // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç–∏–ø—ã - –ù–ï –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å—ã  
            if (csharpType == typeof(DateTime) || csharpType == typeof(Guid) || csharpType == typeof(TimeSpan) || csharpType == typeof(byte[]))
            {

                return false;
            }

            // Nullable —Ç–∏–ø—ã - –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–π —Ç–∏–ø
            if (Nullable.GetUnderlyingType(csharpType) != null)
            {

                return false;
            }

            // –ú–∞—Å—Å–∏–≤—ã –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ - –ù–ï –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å—ã
            if (csharpType.IsArray || IsArrayType(csharpType))
            {

                return false;
            }

            // RedbObject<> - –ù–ï –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å (—ç—Ç–æ —Å—Å—ã–ª–∫–∞) 
            if (csharpType.IsGenericType && csharpType.GetGenericTypeDefinition() == typeof(RedbObject<>))
            {

                return false;
            }

            // –ï–Ω—É–º—ã - –ù–ï –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å—ã
            if (csharpType.IsEnum)
            {

                return false;
            }

            // –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–µ–π–º—Å–ø–µ–π—Å—ã - –ù–ï –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å—ã
            if (csharpType.Namespace?.StartsWith("System") == true)
            {

                return false;
            }

            // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–ª–∞—Å—Å—ã - –≠–¢–û –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å—ã
            bool result = csharpType.IsClass;

            return result;
        }

        // ===== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –ò–ó –ö–û–ù–¢–†–ê–ö–¢–ê =====

        public async Task<IRedbScheme?> GetSchemeByTypeAsync<TProps>() where TProps : class
        {
            var schemeName = typeof(TProps).Name;
            var scheme = await _context.Schemes
                .FirstOrDefaultAsync(s => s.Name == schemeName);
            return scheme != null ? RedbScheme.FromEntity(scheme) : null;
        }

        public async Task<IRedbScheme?> GetSchemeByTypeAsync(Type type)
        {
            var schemeName = type.Name;
            var scheme = await _context.Schemes
                .FirstOrDefaultAsync(s => s.Name == schemeName);
            return scheme != null ? RedbScheme.FromEntity(scheme) : null;
        }

        public async Task<IRedbScheme> LoadSchemeByTypeAsync<TProps>() where TProps : class
        {
            var scheme = await GetSchemeByTypeAsync<TProps>();
            if (scheme == null)
                throw new ArgumentException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
            return scheme;
        }

        public async Task<IRedbScheme> LoadSchemeByTypeAsync(Type type)
        {
            var scheme = await GetSchemeByTypeAsync(type);
            if (scheme == null)
                throw new ArgumentException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{type.Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
            return scheme;
        }

        public async Task<List<IRedbStructure>> GetStructuresByTypeAsync<TProps>() where TProps : class
        {
            var scheme = await GetSchemeByTypeAsync<TProps>();
            if (scheme == null)
                return new List<IRedbStructure>();

            var structures = await _context.Structures
                .Where(s => s.IdScheme == scheme.Id)
                .ToListAsync();

            return structures.Select(s => RedbStructure.FromEntity(s)).Cast<IRedbStructure>().ToList();
        }

        public async Task<List<IRedbStructure>> GetStructuresByTypeAsync(Type type)
        {
            var scheme = await GetSchemeByTypeAsync(type);
            if (scheme == null)
                return new List<IRedbStructure>();

            var structures = await _context.Structures
                .Where(s => s.IdScheme == scheme.Id)
                .ToListAsync();

            return structures.Select(s => RedbStructure.FromEntity(s)).Cast<IRedbStructure>().ToList();
        }

        public async Task<bool> SchemeExistsForTypeAsync<TProps>() where TProps : class
        {
            var schemeName = typeof(TProps).Name;
            return await _context.Schemes.AnyAsync(s => s.Name == schemeName);
        }

        public async Task<bool> SchemeExistsForTypeAsync(Type type)
        {
            var schemeName = type.Name;
            return await _context.Schemes.AnyAsync(s => s.Name == schemeName);
        }

        public async Task<bool> SchemeExistsByNameAsync(string schemeName)
        {
            return await _context.Schemes.AnyAsync(s => s.Name == schemeName);
        }

        public string GetSchemeNameForType<TProps>() where TProps : class
        {
            return typeof(TProps).Name;
        }

        public string GetSchemeNameForType(Type type)
        {
            return type.Name;
        }

        public string? GetSchemeAliasForType<TProps>() where TProps : class
        {
            var attribute = GetRedbSchemeAttribute<TProps>();
            return attribute?.Alias;
        }

        public string? GetSchemeAliasForType(Type type)
        {
            var attribute = GetRedbSchemeAttribute(type);
            return attribute?.Alias;
        }

        // ===== –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ú–ï–¢–û–î–´ –ò–ó –ö–û–ù–¢–†–ê–ö–¢–ê =====
        
        public async Task<IRedbScheme?> GetSchemeByIdAsync(long schemeId)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à
            var cachedScheme = GlobalMetadataCache.GetScheme(schemeId);
            if (cachedScheme != null)
                return cachedScheme;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
            var scheme = await _context.Schemes
                .Include(s => s.Structures)
                    .ThenInclude(str => str.TypeNavigation)
                .FirstOrDefaultAsync(s => s.Id == schemeId);
                
            if (scheme == null)
                return null;
                
            var result = RedbScheme.FromEntity(scheme);
            
            // –ö–µ—à–∏—Ä—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –∫–µ—à–µ
            GlobalMetadataCache.CacheScheme(result);
            
            return result;
        }
        
        public async Task<IRedbScheme?> GetSchemeByNameAsync(string schemeName)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à
            var cachedScheme = GlobalMetadataCache.GetScheme(schemeName);
            if (cachedScheme != null)
                return cachedScheme;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
            var scheme = await _context.Schemes
                .Include(s => s.Structures)
                    .ThenInclude(str => str.TypeNavigation)
                .FirstOrDefaultAsync(s => s.Name == schemeName);
                
            if (scheme == null)
                return null;
                
            var result = RedbScheme.FromEntity(scheme);
            
            // –ö–µ—à–∏—Ä—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –∫–µ—à–µ
            GlobalMetadataCache.CacheScheme(result);
            
            return result;
        }
        
        public async Task<List<IRedbScheme>> GetSchemesAsync()
        {
            var schemes = await _context.Schemes.ToListAsync();
            return schemes.Select(s => (IRedbScheme)RedbScheme.FromEntity(s)).ToList();
        }
        
        public async Task<List<IRedbStructure>> GetStructuresAsync(IRedbScheme scheme)
        {
            // –¢–µ–ø–µ—Ä—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å—Ö–µ–º–µ, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
            // –ï—Å–ª–∏ —Å—Ö–µ–º–∞ –∏–∑ –∫–µ—à–∞ - —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            // –ï—Å–ª–∏ —Å—Ö–µ–º–∞ –∏–∑ –ë–î - —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ Include –≤ GetSchemeByXXXAsync
            return scheme.Structures.ToList();
        }

        // ===== LEGACY –ú–ï–¢–û–î–´ (–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è) =====

        /*
        public async Task<long> EnsureSchemeFromTypeAsync<TProps>(string? schemeName = null, string? alias = null) where TProps : class
        {
            var scheme = await EnsureSchemeFromTypeAsync<TProps>(schemeName, alias);
            return scheme.Id;
        }

        public async Task SyncStructuresFromTypeAsync<TProps>(long schemeId, bool strictDeleteExtra = true) where TProps : class
        {

            var scheme = await _context.Schemes.FirstAsync(s => s.Id == schemeId);
            await SyncStructuresFromTypeAsync<TProps>(RedbScheme.FromEntity(scheme), strictDeleteExtra);
        }

        public async Task<long> SyncSchemeAsync<TProps>(string? schemeName = null, string? alias = null, bool strictDeleteExtra = true) where TProps : class
        {
            var scheme = await SyncSchemeAsync<TProps>(schemeName, alias, strictDeleteExtra);
            return scheme.Id;
        }

        public async Task<long> SyncSchemeAsync<TProps>() where TProps : class
        {
            var scheme = await SyncSchemeAsync<TProps>();
            return scheme.Id;
        }
        */
        
        // ===== –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø ISchemeCacheProvider =====
        
        /// <summary>
        /// –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ª–µ—Ç—É (hot toggle)
        /// </summary>
        public void SetCacheEnabled(bool enabled)
        {
            GlobalMetadataCache.SetEnabled(enabled);
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        /// </summary>
        public bool IsCacheEnabled => GlobalMetadataCache.IsEnabled;
        
        /// <summary>
        /// –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–µ—à–µ–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        /// </summary>
        public void InvalidateCache()
        {
            GlobalMetadataCache.Clear();
        }
        
        /// <summary>
        /// –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ C#
        /// </summary>
        public void InvalidateSchemeCache<TProps>() where TProps : class
        {
            GlobalMetadataCache.InvalidateScheme<TProps>();
        }
        
        /// <summary>
        /// –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ö–µ–º—ã –ø–æ ID
        /// </summary>
        public void InvalidateSchemeCache(long schemeId)
        {
            GlobalMetadataCache.InvalidateScheme(schemeId);
        }
        
        /// <summary>
        /// –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ö–µ–º—ã –ø–æ –∏–º–µ–Ω–∏
        /// </summary>
        public void InvalidateSchemeCache(string schemeName)
        {
            GlobalMetadataCache.InvalidateScheme(schemeName);
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –∫–µ—à–∞
        /// </summary>
        public CacheStatistics GetCacheStatistics()
        {
            return GlobalMetadataCache.GetStatistics();
        }
        
        /// <summary>
        /// –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞ (–æ–±–Ω—É–ª–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏)
        /// </summary>
        public void ResetCacheStatistics()
        {
            GlobalMetadataCache.ResetStatistics();
        }
        
        /// <summary>
        /// –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ C#
        /// </summary>
        public async Task WarmupCacheAsync<TProps>() where TProps : class
        {
            await GlobalMetadataCache.WarmupAsync<TProps>(async type =>
            {
                return await GetSchemeByTypeAsync(type);
            });
        }
        
        /// <summary>
        /// –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Ç–∏–ø–æ–≤ C#
        /// </summary>
        public async Task WarmupCacheAsync(Type[] types)
        {
            await GlobalMetadataCache.WarmupAsync(types, async type =>
            {
                return await GetSchemeByTypeAsync(type);
            });
        }
        
        /// <summary>
        /// –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ö–µ–º
        /// </summary>
        public async Task WarmupAllSchemesAsync()
        {
            var allSchemes = await _context.Schemes
                .Include(s => s.Structures)
                    .ThenInclude(str => str.TypeNavigation)
                .ToListAsync();
                
            foreach (var scheme in allSchemes)
            {
                var redbScheme = RedbScheme.FromEntity(scheme);
                GlobalMetadataCache.CacheScheme(redbScheme);
            }
        }
        
        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–µ—à–∞
        /// </summary>
        public CacheDiagnosticInfo GetCacheDiagnosticInfo()
        {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            var diagnosticText = GlobalMetadataCache.GetDiagnosticInfo();
            return new CacheDiagnosticInfo
            {
                Issues = new List<string> { diagnosticText },
                Recommendations = new List<string>()
            };
        }
        
        /// <summary>
        /// –û—Ü–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∫–µ—à–µ–º –≤ –±–∞–π—Ç–∞—Ö
        /// </summary>
        public long EstimateMemoryUsage()
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –∏–∑ GlobalMetadataCache
            var schemeCount = GlobalMetadataCache.GetStatistics().SchemeHits + GlobalMetadataCache.GetStatistics().SchemeMisses;
            var typeCount = GlobalMetadataCache.GetStatistics().TypeHits + GlobalMetadataCache.GetStatistics().TypeMisses;
            
            // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: —Å—Ö–µ–º–∞ ~2KB, —Ç–∏–ø ~100B
            return schemeCount * 2048 + typeCount * 100;
        }
        
        // ===== üå≥ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ï–†–ï–í–û–ú –°–¢–†–£–ö–¢–£–† =====
        
        /// <summary>
        /// üå≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä —Å—Ö–µ–º—ã
        /// </summary>
        public async Task<List<StructureTreeNode>> GetStructureTreeAsync(long schemeId)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            if (_structureTreeCache.TryGetValue(schemeId, out var cachedTree))
            {
                return cachedTree;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏
            var scheme = await GetSchemeByIdAsync(schemeId);
            if (scheme == null)
            {
                return new List<StructureTreeNode>();
            }
            
            // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –∏–∑ –ø–ª–æ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞
            var tree = StructureTreeBuilder.BuildFromFlat(scheme.Structures.ToList());
            
            // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            _structureTreeCache.TryAdd(schemeId, tree);
            
            return tree;
        }
        
        /// <summary>
        /// üåø –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–µ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
        /// </summary>
        public async Task<List<StructureTreeNode>> GetSubtreeAsync(long schemeId, long? parentStructureId)
        {
            var cacheKey = (schemeId, parentStructureId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –ø–æ–¥–¥–µ—Ä–µ–≤—å–µ–≤
            if (_subtreeCache.TryGetValue(cacheKey, out var cachedSubtree))
            {
                return cachedSubtree;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
            var fullTree = await GetStructureTreeAsync(schemeId);
            
            List<StructureTreeNode> subtree;
            
            if (parentStructureId == null)
            {
                // –ö–æ—Ä–Ω–µ–≤—ã–µ —É–∑–ª—ã
                subtree = fullTree.Where(n => n.IsRoot).ToList();
            }
            else
            {
                // –ò—â–µ–º –ø–æ–¥–¥–µ—Ä–µ–≤–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
                var allNodes = StructureTreeBuilder.FlattenTree(fullTree);
                var parentNode = allNodes.FirstOrDefault(n => n.Structure.Id == parentStructureId);
                subtree = parentNode?.Children ?? new List<StructureTreeNode>();
            }
            
            // –ö–µ—à–∏—Ä—É–µ–º –ø–æ–¥–¥–µ—Ä–µ–≤–æ
            _subtreeCache.TryAdd(cacheKey, subtree);
            
            return subtree;
        }
        
        /// <summary>
        /// üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä (–ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫)
        /// </summary>
        public async Task<List<IRedbStructure>> GetChildrenStructuresAsync(long schemeId, long parentStructureId)
        {
            var subtree = await GetSubtreeAsync(schemeId, parentStructureId);
            return subtree.Select(n => n.Structure).ToList();
        }
        
        /// <summary>
        /// üîç –ü–æ–∏—Å–∫ —É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞ –ø–æ ID —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        /// </summary>
        public async Task<StructureTreeNode?> FindStructureNodeAsync(long schemeId, long structureId)
        {
            var tree = await GetStructureTreeAsync(schemeId);
            var allNodes = StructureTreeBuilder.FlattenTree(tree);
            return allNodes.FirstOrDefault(n => n.Structure.Id == structureId);
        }
        
        /// <summary>
        /// üîç –ü–æ–∏—Å–∫ —É–∑–ª–∞ –¥–µ—Ä–µ–≤–∞ –ø–æ –ø—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä "Address1.Details.Floor")
        /// </summary>
        public async Task<StructureTreeNode?> FindStructureByPathAsync(long schemeId, string path)
        {
            var tree = await GetStructureTreeAsync(schemeId);
            return StructureTreeBuilder.FindNodeByPath(tree, path);
        }
        
        /// <summary>
        /// üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        /// </summary>
        public async Task<JsonElement> GetStructureTreeJsonAsync(long schemeId)
        {
            var sql = "SELECT get_scheme_structure_tree(@schemeId)";
            var result = await _context.Database.SqlQueryRaw<string>(sql, 
                new { schemeId }).FirstOrDefaultAsync();
                
            if (string.IsNullOrEmpty(result))
            {
                return JsonSerializer.SerializeToElement("[]");
            }
            
            return JsonSerializer.SerializeToElement(result);
        }
        
        /// <summary>
        /// üß™ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ C# —Ç–∏–ø—É
        /// </summary>
        public async Task<TreeDiagnosticReport> ValidateStructureTreeAsync<TProps>(long schemeId) where TProps : class
        {
            var tree = await GetStructureTreeAsync(schemeId);
            return StructureTreeBuilder.DiagnoseTree(tree, typeof(TProps));
        }
        
        /// <summary>
        /// üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–µ—Ä–µ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä
        /// </summary>
        public void InvalidateStructureTreeCache(long schemeId)
        {
            _structureTreeCache.TryRemove(schemeId, out _);
            
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ–¥–¥–µ—Ä–µ–≤—å—è
            var keysToRemove = _subtreeCache.Keys.Where(k => k.Item1 == schemeId).ToList();
            foreach (var key in keysToRemove)
            {
                _subtreeCache.TryRemove(key, out _);
            }
        }
        
        /// <summary>
        /// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞ –¥–µ—Ä–µ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä
        /// </summary>
        public (int TreesCount, int SubtreesCount, long MemoryEstimate) GetStructureTreeCacheStats()
        {
            var treesCount = _structureTreeCache.Count;
            var subtreesCount = _subtreeCache.Count;
            
            // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: –∫–∞–∂–¥–æ–µ –¥–µ—Ä–µ–≤–æ ~1KB, –∫–∞–∂–¥–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ ~200B
            var memoryEstimate = treesCount * 1024 + subtreesCount * 200;
            
            return (treesCount, subtreesCount, memoryEstimate);
        }
        
        /// <summary>
        /// üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–æ—á–µ—Ä–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
        /// </summary>
        public async Task<bool> HasChildrenStructuresAsync(long schemeId, long structureId)
        {
            var children = await GetSubtreeAsync(schemeId, structureId);
            return children.Any();
        }
    }
}
