using redb.Core.Providers;
using redb.Core.Query;
using redb.Core.Query.QueryExpressions;
using redb.Core.Postgres.Query;
using redb.Core.Serialization;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using redb.Core.Models.Contracts;
using redb.Core.Models.Configuration;
using redb.Core.Models.Security;

namespace redb.Core.Postgres.Providers
{
    /// <summary>
    /// PostgreSQL —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ LINQ-–∑–∞–ø—Ä–æ—Å–æ–≤
    /// </summary>
    public class PostgresQueryableProvider : IQueryableProvider
    {
        private readonly RedbContext _context;
        private readonly IRedbObjectSerializer _serializer;
        private readonly ISchemeSyncProvider _schemeSync;
        private readonly ILogger? _logger;
        private readonly IRedbSecurityContext _securityContext;
        private readonly RedbServiceConfiguration _configuration;

        public PostgresQueryableProvider(
            RedbContext context,
            IRedbObjectSerializer serializer,
            ISchemeSyncProvider schemeSync,
            IRedbSecurityContext securityContext,
            RedbServiceConfiguration? configuration = null,
            ILogger? logger = null)
        {
            _context = context;
            _serializer = serializer;
            _schemeSync = schemeSync;
            _securityContext = securityContext;
            _configuration = configuration ?? new RedbServiceConfiguration();
            _logger = logger;
        }

        // ===== –ú–ï–¢–û–î–´ –ò–ó –ö–û–ù–¢–†–ê–ö–¢–ê IQueryableProvider =====

        // ===== –î–†–ï–í–û–í–ò–î–ù–´–ï LINQ-–ó–ê–ü–†–û–°–´ =====

        public async Task<ITreeQueryable<TProps>> TreeQueryAsync<TProps>() where TProps : class, new()
        {
            var scheme = await _schemeSync.GetSchemeByTypeAsync<TProps>();
            if (scheme == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            var effectiveUser = _securityContext.GetEffectiveUser();
            return TreeQueryPrivate<TProps>(scheme.Id, effectiveUser.Id, _configuration.DefaultCheckPermissionsOnQuery);
        }

        public async Task<ITreeQueryable<TProps>> TreeQueryAsync<TProps>(IRedbUser user) where TProps : class, new()
        {
            var scheme = await _schemeSync.GetSchemeByTypeAsync<TProps>();
            if (scheme == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            return TreeQueryPrivate<TProps>(scheme.Id, user.Id, _configuration.DefaultCheckPermissionsOnQuery);
        }

        public ITreeQueryable<TProps> TreeQuery<TProps>() where TProps : class, new()
        {
            var scheme = _schemeSync.GetSchemeByTypeAsync<TProps>().Result;
            if (scheme == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            var effectiveUser = _securityContext.GetEffectiveUser();
            return TreeQueryPrivate<TProps>(scheme.Id, effectiveUser.Id, _configuration.DefaultCheckPermissionsOnQuery);
        }

        public ITreeQueryable<TProps> TreeQuery<TProps>(IRedbUser user) where TProps : class, new()
        {
            var scheme = _schemeSync.GetSchemeByTypeAsync<TProps>().Result;
            if (scheme == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            return TreeQueryPrivate<TProps>(scheme.Id, user.Id, _configuration.DefaultCheckPermissionsOnQuery);
        }

        // ===== –î–†–ï–í–û–í–ò–î–ù–´–ï LINQ –° –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï–ú –ü–û–î–î–ï–†–ï–í–ê =====

        public async Task<ITreeQueryable<TProps>> TreeQueryAsync<TProps>(long rootObjectId, int? maxDepth = null) where TProps : class, new()
        {
            var scheme = await _schemeSync.GetSchemeByTypeAsync<TProps>();
            if (scheme == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            var effectiveUser = _securityContext.GetEffectiveUser();
            return TreeQueryPrivate<TProps>(scheme.Id, effectiveUser.Id, _configuration.DefaultCheckPermissionsOnQuery, rootObjectId, maxDepth);
        }

        /// <summary>
        /// üöÄ –ó–ê–ö–ê–ó–ß–ò–ö: TreeQuery —Å nullable rootObject - —É–¥–æ–±–Ω–µ–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –∫–æ–¥–∞
        /// </summary>
        public async Task<ITreeQueryable<TProps>> TreeQueryAsync<TProps>(IRedbObject? rootObject, int? maxDepth = null) where TProps : class, new()
        {
            // –ï—Å–ª–∏ rootObject = null, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π queryable (—É–¥–æ–±–Ω–µ–µ —á–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
            if (rootObject == null)
            {
                var scheme = await _schemeSync.GetSchemeByTypeAsync<TProps>();
                if (scheme == null)
                    throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

                var effectiveUser = _securityContext.GetEffectiveUser();
                return CreateEmptyTreeQuery<TProps>(scheme.Id, effectiveUser.Id, _configuration.DefaultCheckPermissionsOnQuery);
            }

            var schemeResolved = await _schemeSync.GetSchemeByTypeAsync<TProps>();
            if (schemeResolved == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            var effectiveUserResolved = _securityContext.GetEffectiveUser();
            return TreeQueryPrivate<TProps>(schemeResolved.Id, effectiveUserResolved.Id, _configuration.DefaultCheckPermissionsOnQuery, rootObject.Id, maxDepth);
        }

        /// <summary>
        /// üöÄ –ó–ê–ö–ê–ó–ß–ò–ö: TreeQuery —Å —Å–ø–∏—Å–∫–æ–º rootObjects - –ø–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –ø–æ—Ç–æ–º–∫–æ–≤ –õ–Æ–ë–û–ì–û –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤
        /// </summary>
        public async Task<ITreeQueryable<TProps>> TreeQueryAsync<TProps>(IEnumerable<IRedbObject> rootObjects, int? maxDepth = null) where TProps : class, new()
        {
            var rootList = rootObjects?.ToList() ?? new List<IRedbObject>();
            
            // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π queryable (—É–¥–æ–±–Ω–µ–µ —á–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
            if (!rootList.Any())
            {
                var scheme = await _schemeSync.GetSchemeByTypeAsync<TProps>();
                if (scheme == null)
                    throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

                var effectiveUser = _securityContext.GetEffectiveUser();
                return CreateEmptyTreeQuery<TProps>(scheme.Id, effectiveUser.Id, _configuration.DefaultCheckPermissionsOnQuery);
            }

            // –ï—Å–ª–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π TreeQuery  
            if (rootList.Count == 1)
            {
                return await TreeQueryAsync<TProps>(rootList.First(), maxDepth);
            }

            // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤, —Å—Ç—Ä–æ–∏–º $or —Ñ–∏–ª—å—Ç—Ä —Å $descendantsOf –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
            var schemeResolved = await _schemeSync.GetSchemeByTypeAsync<TProps>();
            if (schemeResolved == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            var effectiveUserResolved = _securityContext.GetEffectiveUser();
            return CreateMultiRootTreeQuery<TProps>(schemeResolved.Id, effectiveUserResolved.Id, _configuration.DefaultCheckPermissionsOnQuery, rootList, maxDepth);
        }

        public async Task<ITreeQueryable<TProps>> TreeQueryAsync<TProps>(long rootObjectId, IRedbUser user, int? maxDepth = null) where TProps : class, new()
        {
            var scheme = await _schemeSync.GetSchemeByTypeAsync<TProps>();
            if (scheme == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            return TreeQueryPrivate<TProps>(scheme.Id, user.Id, _configuration.DefaultCheckPermissionsOnQuery, rootObjectId, maxDepth);
        }

        /// <summary>
        /// üöÄ –ó–ê–ö–ê–ó–ß–ò–ö: TreeQuery —Å nullable rootObject –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        /// </summary>
        public async Task<ITreeQueryable<TProps>> TreeQueryAsync<TProps>(IRedbObject? rootObject, IRedbUser user, int? maxDepth = null) where TProps : class, new()
        {
            // –ï—Å–ª–∏ rootObject = null, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π queryable
            if (rootObject == null)
            {
                var scheme = await _schemeSync.GetSchemeByTypeAsync<TProps>();
                if (scheme == null)
                    throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

                return CreateEmptyTreeQuery<TProps>(scheme.Id, user.Id, _configuration.DefaultCheckPermissionsOnQuery);
            }

            var schemeResolved = await _schemeSync.GetSchemeByTypeAsync<TProps>();
            if (schemeResolved == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            return TreeQueryPrivate<TProps>(schemeResolved.Id, user.Id, _configuration.DefaultCheckPermissionsOnQuery, rootObject.Id, maxDepth);
        }

        /// <summary>
        /// üöÄ –ó–ê–ö–ê–ó–ß–ò–ö: TreeQuery —Å —Å–ø–∏—Å–∫–æ–º rootObjects –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        /// </summary>
        public async Task<ITreeQueryable<TProps>> TreeQueryAsync<TProps>(IEnumerable<IRedbObject> rootObjects, IRedbUser user, int? maxDepth = null) where TProps : class, new()
        {
            var rootList = rootObjects?.ToList() ?? new List<IRedbObject>();
            
            // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π queryable
            if (!rootList.Any())
            {
                var scheme = await _schemeSync.GetSchemeByTypeAsync<TProps>();
                if (scheme == null)
                    throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

                return CreateEmptyTreeQuery<TProps>(scheme.Id, user.Id, _configuration.DefaultCheckPermissionsOnQuery);
            }

            // –ï—Å–ª–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π TreeQuery  
            if (rootList.Count == 1)
            {
                return await TreeQueryAsync<TProps>(rootList.First(), user, maxDepth);
            }

            // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤, —Å—Ç—Ä–æ–∏–º —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
            var schemeResolved = await _schemeSync.GetSchemeByTypeAsync<TProps>();
            if (schemeResolved == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            return CreateMultiRootTreeQuery<TProps>(schemeResolved.Id, user.Id, _configuration.DefaultCheckPermissionsOnQuery, rootList, maxDepth);
        }

        // ===== –°–ò–ù–•–†–û–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –î–†–ï–í–û–í–ò–î–ù–´–• LINQ –° –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï–ú –ü–û–î–î–ï–†–ï–í–ê =====

        public ITreeQueryable<TProps> TreeQuery<TProps>(long rootObjectId, int? maxDepth = null) where TProps : class, new()
        {
            var scheme = _schemeSync.GetSchemeByTypeAsync<TProps>().Result;
            if (scheme == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            var effectiveUser = _securityContext.GetEffectiveUser();
            return TreeQueryPrivate<TProps>(scheme.Id, effectiveUser.Id, _configuration.DefaultCheckPermissionsOnQuery, rootObjectId, maxDepth);
        }

                /// <summary>
        /// üöÄ –ó–ê–ö–ê–ó–ß–ò–ö: –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π TreeQuery —Å nullable rootObject
        /// </summary>
        public ITreeQueryable<TProps> TreeQuery<TProps>(IRedbObject? rootObject, int? maxDepth = null) where TProps : class, new()
        {
            // –ï—Å–ª–∏ rootObject = null, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π queryable
            if (rootObject == null)
            {
                var scheme = _schemeSync.GetSchemeByTypeAsync<TProps>().Result;
                if (scheme == null)
                    throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

                var effectiveUser = _securityContext.GetEffectiveUser();
                return CreateEmptyTreeQuery<TProps>(scheme.Id, effectiveUser.Id, _configuration.DefaultCheckPermissionsOnQuery);
            }

            var schemeResolved = _schemeSync.GetSchemeByTypeAsync<TProps>().Result;
            if (schemeResolved == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            var effectiveUserResolved = _securityContext.GetEffectiveUser();
            return TreeQueryPrivate<TProps>(schemeResolved.Id, effectiveUserResolved.Id, _configuration.DefaultCheckPermissionsOnQuery, rootObject.Id, maxDepth);
        }

        /// <summary>
        /// üöÄ –ó–ê–ö–ê–ó–ß–ò–ö: –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π TreeQuery —Å —Å–ø–∏—Å–∫–æ–º rootObjects
        /// </summary>
        public ITreeQueryable<TProps> TreeQuery<TProps>(IEnumerable<IRedbObject> rootObjects, int? maxDepth = null) where TProps : class, new()
        {
            var rootList = rootObjects?.ToList() ?? new List<IRedbObject>();
            
            // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π queryable
            if (!rootList.Any())
            {
                var scheme = _schemeSync.GetSchemeByTypeAsync<TProps>().Result;
                if (scheme == null)
                    throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

                var effectiveUser = _securityContext.GetEffectiveUser();
                return CreateEmptyTreeQuery<TProps>(scheme.Id, effectiveUser.Id, _configuration.DefaultCheckPermissionsOnQuery);
            }

            // –ï—Å–ª–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π TreeQuery  
            if (rootList.Count == 1)
            {
                return TreeQuery<TProps>(rootList.First(), maxDepth);
            }

            // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤, —Å—Ç—Ä–æ–∏–º —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
            var schemeResolved = _schemeSync.GetSchemeByTypeAsync<TProps>().Result;
            if (schemeResolved == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            var effectiveUserResolved = _securityContext.GetEffectiveUser();
            return CreateMultiRootTreeQuery<TProps>(schemeResolved.Id, effectiveUserResolved.Id, _configuration.DefaultCheckPermissionsOnQuery, rootList, maxDepth);
        }

        public ITreeQueryable<TProps> TreeQuery<TProps>(long rootObjectId, IRedbUser user, int? maxDepth = null) where TProps : class, new()
        {
            var scheme = _schemeSync.GetSchemeByTypeAsync<TProps>().Result;
            if (scheme == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            return TreeQueryPrivate<TProps>(scheme.Id, user.Id, _configuration.DefaultCheckPermissionsOnQuery, rootObjectId, maxDepth);
        }

        /// <summary>
        /// üöÄ –ó–ê–ö–ê–ó–ß–ò–ö: –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π TreeQuery —Å nullable rootObject –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        /// </summary>
        public ITreeQueryable<TProps> TreeQuery<TProps>(IRedbObject? rootObject, IRedbUser user, int? maxDepth = null) where TProps : class, new()
        {
            // –ï—Å–ª–∏ rootObject = null, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π queryable
            if (rootObject == null)
            {
                var scheme = _schemeSync.GetSchemeByTypeAsync<TProps>().Result;
                if (scheme == null)
                    throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

                return CreateEmptyTreeQuery<TProps>(scheme.Id, user.Id, _configuration.DefaultCheckPermissionsOnQuery);
            }

            var schemeResolved = _schemeSync.GetSchemeByTypeAsync<TProps>().Result;
            if (schemeResolved == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            return TreeQueryPrivate<TProps>(schemeResolved.Id, user.Id, _configuration.DefaultCheckPermissionsOnQuery, rootObject.Id, maxDepth);
        }

        /// <summary>
        /// üöÄ –ó–ê–ö–ê–ó–ß–ò–ö: –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π TreeQuery —Å —Å–ø–∏—Å–∫–æ–º rootObjects –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        /// </summary>
        public ITreeQueryable<TProps> TreeQuery<TProps>(IEnumerable<IRedbObject> rootObjects, IRedbUser user, int? maxDepth = null) where TProps : class, new()
        {
            var rootList = rootObjects?.ToList() ?? new List<IRedbObject>();
            
            // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π queryable
            if (!rootList.Any())
            {
                var scheme = _schemeSync.GetSchemeByTypeAsync<TProps>().Result;
                if (scheme == null)
                    throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

                return CreateEmptyTreeQuery<TProps>(scheme.Id, user.Id, _configuration.DefaultCheckPermissionsOnQuery);
            }

            // –ï—Å–ª–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π TreeQuery  
            if (rootList.Count == 1)
            {
                return TreeQuery<TProps>(rootList.First(), user, maxDepth);
            }

            // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤, —Å—Ç—Ä–æ–∏–º —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
            var schemeResolved = _schemeSync.GetSchemeByTypeAsync<TProps>().Result;
            if (schemeResolved == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            return CreateMultiRootTreeQuery<TProps>(schemeResolved.Id, user.Id, _configuration.DefaultCheckPermissionsOnQuery, rootList, maxDepth);
        }

        public async Task<IRedbQueryable<TProps>> QueryAsync<TProps>() where TProps : class, new()
        {
            var scheme = await _schemeSync.GetSchemeByTypeAsync<TProps>();
            if (scheme == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            var effectiveUser = _securityContext.GetEffectiveUser();
            return QueryPrivate<TProps>(scheme.Id, effectiveUser.Id, _configuration.DefaultCheckPermissionsOnQuery);
        }

        public async Task<IRedbQueryable<TProps>> QueryAsync<TProps>(IRedbUser user) where TProps : class, new()
        {
            var scheme = await _schemeSync.GetSchemeByTypeAsync<TProps>();
            if (scheme == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            return QueryPrivate<TProps>(scheme.Id, user.Id, _configuration.DefaultCheckPermissionsOnQuery);
        }

        public IRedbQueryable<TProps> Query<TProps>() where TProps : class, new()
        {
            var scheme = _schemeSync.GetSchemeByTypeAsync<TProps>().Result;
            if (scheme == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            var effectiveUser = _securityContext.GetEffectiveUser();
            return QueryPrivate<TProps>(scheme.Id, effectiveUser.Id, _configuration.DefaultCheckPermissionsOnQuery);
        }

        public IRedbQueryable<TProps> Query<TProps>(IRedbUser user) where TProps : class, new()
        {
            var scheme = _schemeSync.GetSchemeByTypeAsync<TProps>().Result;
            if (scheme == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ –¥–ª—è —Ç–∏–ø–∞ '{typeof(TProps).Name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            return QueryPrivate<TProps>(scheme.Id, user.Id, _configuration.DefaultCheckPermissionsOnQuery);
        }

        // ===== –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ (–Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –¥–æ—Å—Ç—É–ø) =====

        private IRedbQueryable<TProps> QueryPrivate<TProps>(long schemeId, long? userId = null, bool checkPermissions = false) where TProps : class, new()
        {
            var queryProvider = new PostgresQueryProvider(_context, _serializer, _logger);
            return queryProvider.CreateQuery<TProps>(schemeId, userId, checkPermissions);
        }

        private async Task<IRedbQueryable<TProps>> QueryAsyncPrivate<TProps>(long? userId = null, bool checkPermissions = false) where TProps : class, new()
        {
            var scheme = await _schemeSync.EnsureSchemeFromTypeAsync<TProps>();
            return QueryPrivate<TProps>(scheme.Id, userId, checkPermissions);
        }

        // ===== –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –î–†–ï–í–û–í–ò–î–ù–´–• LINQ =====

        private ITreeQueryable<TProps> TreeQueryPrivate<TProps>(long schemeId, long? userId = null, bool checkPermissions = false, long? rootObjectId = null, int? maxDepth = null) where TProps : class, new()
        {
            var treeQueryProvider = new PostgresTreeQueryProvider(_context, _serializer, _logger);
            return treeQueryProvider.CreateTreeQuery<TProps>(schemeId, userId, checkPermissions, rootObjectId, maxDepth);
        }

        /// <summary>
        /// üöÄ –ó–ê–ö–ê–ó–ß–ò–ö: –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π TreeQueryable (—É–¥–æ–±–Ω–æ –∫–æ–≥–¥–∞ rootObject = null)
        /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç queryable –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞—Å—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        /// </summary>
        private ITreeQueryable<TProps> CreateEmptyTreeQuery<TProps>(long schemeId, long? userId = null, bool checkPermissions = false) where TProps : class, new()
        {
            var treeQueryProvider = new PostgresTreeQueryProvider(_context, _serializer, _logger);
            
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π TreeQueryable –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –±–µ–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ç–∏–ø–æ–≤
            var emptyTreeQuery = treeQueryProvider.CreateTreeQuery<TProps>(schemeId, userId, checkPermissions);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ—Ç–æ—Ä—ã–π –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: WHERE 1=0
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Where() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç IRedbQueryable, –ø—Ä–∏–≤–æ–¥–∏–º –∫ ITreeQueryable
            var emptyQueryWithFilter = emptyTreeQuery.Where(x => false);
            return (ITreeQueryable<TProps>)emptyQueryWithFilter;
        }

        /// <summary>
        /// üöÄ –ó–ê–ö–ê–ó–ß–ò–ö: –°–æ–∑–¥–∞—Ç—å TreeQueryable –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ä–µ–¥–∏ –ø–æ—Ç–æ–º–∫–æ–≤ –õ–Æ–ë–û–ì–û –∏–∑ —Å–ø–∏—Å–∫–∞ rootObjects
        /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç $or —Ñ–∏–ª—å—Ç—Ä —Å $descendantsOf –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        /// </summary>
        private ITreeQueryable<TProps> CreateMultiRootTreeQuery<TProps>(long schemeId, long? userId, bool checkPermissions, List<IRedbObject> rootObjects, int? maxDepth) where TProps : class, new()
        {
            var treeQueryProvider = new PostgresTreeQueryProvider(_context, _serializer, _logger);
            
            // ‚úÖ –ü–û–õ–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑—É–µ–º ParentIds –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π
            var parentIds = rootObjects.Select(obj => obj.Id).ToArray();
            
            // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏
            var multiRootContext = new TreeQueryContext<TProps>(schemeId, userId, checkPermissions, null, maxDepth)
            {
                ParentIds = parentIds  // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–û–ï –ü–û–õ–ï ParentIds[]
            };
            
            // –°–æ–∑–¥–∞–µ–º TreeQueryable —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π
            var filterParser = new PostgresFilterExpressionParser();
            var orderingParser = new PostgresOrderingExpressionParser();
            
            return new PostgresTreeQueryable<TProps>(treeQueryProvider, multiRootContext, filterParser, orderingParser);
        }

    }
}
