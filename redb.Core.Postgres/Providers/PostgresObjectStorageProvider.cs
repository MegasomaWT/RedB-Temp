using redb.Core.Providers;
using redb.Core.DBModels;
using redb.Core.Utils;
using redb.Core.Serialization;
using Microsoft.EntityFrameworkCore;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
using redb.Core.Models.Contracts;
using redb.Core.Models.Entities;
using redb.Core.Models.Configuration;
using System.Reflection;
using System.Collections.Generic;
using System.Linq;
using EFCore.BulkExtensions;
using System;


namespace redb.Core.Postgres.Providers
{
    /// <summary>
    /// PostgreSQL —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏
    /// </summary>
    public partial class PostgresObjectStorageProvider : IObjectStorageProvider
    {
        private readonly RedbContext _context;
        private readonly IRedbObjectSerializer _serializer;
        private readonly IPermissionProvider _permissionProvider;
        private readonly IRedbSecurityContext _securityContext;
        private readonly ISchemeSyncProvider _schemeSync;
        private readonly RedbServiceConfiguration _configuration;

        public PostgresObjectStorageProvider(
            RedbContext context,
            IRedbObjectSerializer serializer,
            IPermissionProvider permissionProvider,
            IRedbSecurityContext securityContext,
            ISchemeSyncProvider schemeSync,
            RedbServiceConfiguration configuration)
        {
            _context = context;
            _serializer = serializer;
            _permissionProvider = permissionProvider;
            _securityContext = securityContext;
            _schemeSync = schemeSync;
            _configuration = configuration ?? new RedbServiceConfiguration();
        }

        // ===== –ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç _securityContext –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é) =====

        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—ä–µ–∫—Ç –∏–∑ EAV –ø–æ ID (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç _securityContext –∏ config.DefaultCheckPermissionsOnLoad)
        /// </summary>
        public async Task<RedbObject<TProps>> LoadAsync<TProps>(long objectId, int depth = 10) where TProps : class, new()
        {
            var effectiveUser = _securityContext.GetEffectiveUser();
            return await LoadAsync<TProps>(objectId, effectiveUser, depth);
        }

        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—ä–µ–∫—Ç –∏–∑ EAV (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç _securityContext –∏ config.DefaultCheckPermissionsOnLoad)
        /// </summary>
        public async Task<RedbObject<TProps>> LoadAsync<TProps>(IRedbObject obj, int depth = 10) where TProps : class, new()
        {
            var effectiveUser = _securityContext.GetEffectiveUser();
            return await LoadAsync<TProps>(obj.Id, effectiveUser, depth);
        }

        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—ä–µ–∫—Ç –∏–∑ EAV —Å —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç config.DefaultCheckPermissionsOnLoad)
        /// </summary>
        public async Task<RedbObject<TProps>> LoadAsync<TProps>(IRedbObject obj, IRedbUser user, int depth = 10) where TProps : class, new()
        {
            return await LoadAsync<TProps>(obj.Id, user, depth);
        }

        // ===== –ü–ï–†–ï–ì–†–£–ó–ö–ò –° –Ø–í–ù–´–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú =====

        /// <summary>
        /// –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –∑–∞–≥—Ä—É–∑–∫–∏ - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ LoadAsync –µ–≥–æ –≤—ã–∑—ã–≤–∞—é—Ç
        /// </summary>
        public async Task<RedbObject<TProps>> LoadAsync<TProps>(long objectId, IRedbUser user, int depth = 10) where TProps : class, new()
        {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if (_configuration.DefaultCheckPermissionsOnLoad)
            {
                var canRead = await _permissionProvider.CanUserSelectObject(objectId, user.Id);
                if (!canRead)
                {
                    throw new UnauthorizedAccessException($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.Id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ {objectId}");
                }
            }

            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ PostgreSQL —Ñ—É–Ω–∫—Ü–∏–∏ get_object_json –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            var json = await _context.Database.SqlQueryRaw<string>(
                "SELECT get_object_json({0}, {1})::text AS \"Value\"", objectId, depth
            ).FirstOrDefaultAsync();

            if (string.IsNullOrEmpty(json))
            {
                throw new InvalidOperationException($"–û–±—ä–µ–∫—Ç —Å ID {objectId} –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }

            // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON –≤ RedbObject<TProps> —á–µ—Ä–µ–∑ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
            return _serializer.Deserialize<TProps>(json);
        }


        public async Task<long> SaveAsync<TProps>(IRedbObject<TProps> obj) where TProps : class, new()
        {
            var effectiveUser = _securityContext.GetEffectiveUser();
            return await SaveAsync(obj, effectiveUser);
        }


        public async Task<bool> DeleteAsync<TProps>(IRedbObject<TProps> obj) where TProps : class, new()
        {
            var effectiveUser = _securityContext.GetEffectiveUser();
            return await DeleteAsync(obj, effectiveUser);
        }

        public async Task<bool> DeleteAsync<TProps>(IRedbObject<TProps> obj, IRedbUser user) where TProps : class, new()
        {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if (_configuration.DefaultCheckPermissionsOnDelete)
            {
                var canDelete = await _permissionProvider.CanUserDeleteObject(obj, user);
                if (!canDelete)
                {
                    throw new UnauthorizedAccessException($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.Id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ {obj.Id}");
                }
            }

            var objToDelete = await _context.Objects.FindAsync(obj.Id);
            if (objToDelete == null)
            {
                return false;
            }

            _context.Objects.Remove(objToDelete);
            await _context.SaveChangesAsync();

            // === –°–¢–†–ê–¢–ï–ì–ò–Ø –°–ë–†–û–°–ê ID ===
            if (_configuration.IdResetStrategy == Models.Configuration.ObjectIdResetStrategy.AutoResetOnDelete)
            {
                obj.ResetId(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º ID
            }

            return true;
        }


        public async Task<long> SaveAsync<TProps>(IRedbObject<TProps> obj, IRedbUser user) where TProps : class, new()
        {
            // üöÄ –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–Ø–ï–ú –ù–ê –ù–û–í–´–ô SaveAsync —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
            return await SaveAsyncNew(obj, user);
        }

        /// <summary>
        /// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        /// </summary>
        private async Task SavePropertiesAsync<TProps>(long objectId, long schemeId, TProps properties) where TProps : class
        {
            var strategy = _configuration.EavSaveStrategy;

            switch (strategy)
            {
                case EavSaveStrategy.DeleteInsert:
                    await SavePropertiesWithDeleteInsert(objectId, schemeId, properties);
                    break;

                case EavSaveStrategy.ChangeTracking:
                    await SavePropertiesWithChangeTracking(objectId, schemeId, properties);
                    break;

                default:
                    throw new NotSupportedException($"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
            }
        }

        /// <summary>
        /// –°—Ç—Ä–∞—Ç–µ–≥–∏—è DELETE + INSERT - —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ values –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ
        /// </summary>
        private async Task SavePropertiesWithDeleteInsert<TProps>(long objectId, long schemeId, TProps properties) where TProps : class
        {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä —Å—Ö–µ–º—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤–∫–ª—é—á–∞—è _store_null
            var structures = await GetStructuresWithMetadataAsync(schemeId);

            // –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            await DeleteExistingValuesAsync(objectId);

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            await SavePropertiesFromObjectAsync(objectId, schemeId, structures, properties);
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ö–µ–º—ã —Å –ø–æ–ª–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –≤–∫–ª—é—á–∞—è _store_null
        /// </summary>
        private async Task<List<StructureMetadata>> GetStructuresWithMetadataAsync(long schemeId)
        {
            return await _context.Structures
                .Where(s => s.IdScheme == schemeId)
                .Select(s => new StructureMetadata
                {
                    Id = s.Id,
                    IdParent = s.IdParent,  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º IdParent
                    Name = s.Name,
                    DbType = s.TypeNavigation.DbType ?? "String",
                    IsArray = s.IsArray ?? false,
                    StoreNull = s.StoreNull ?? false,
                    TypeSemantic = s.TypeNavigation.Type1 ?? "string"
                })
                .ToListAsync();
        }

        /// <summary>
        /// –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ values –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
        /// </summary>
        private async Task DeleteExistingValuesAsync(long objectId)
        {
            var existingValues = await _context.Set<_RValue>()
                .Where(v => v.IdObject == objectId)
                .ToListAsync();
            _context.Set<_RValue>().RemoveRange(existingValues);
        }

        /// <summary>
        /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å properties –æ–±—ä–µ–∫—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º —Å—Ö–µ–º—ã
        /// </summary>
        private async Task SavePropertiesFromObjectAsync<TProps>(long objectId, long schemeId, List<StructureMetadata> structures, TProps properties) where TProps : class
        {
            var propertiesType = typeof(TProps);

            foreach (var structure in structures)
            {
                var property = propertiesType.GetProperty(structure.Name);
                if (property == null) continue;

                // üö´ –ò–ì–ù–û–†–ò–†–£–ï–ú –ø–æ–ª—è —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º [JsonIgnore]
                if (property.GetCustomAttributes(typeof(JsonIgnoreAttribute), false).Any()) continue;

                var rawValue = property.GetValue(properties);

                // ‚úÖ –ù–û–í–ê–Ø NULL –°–ï–ú–ê–ù–¢–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º _store_null
                if (!PostgresObjectStorageProviderExtensions.ShouldCreateValueRecord(rawValue, structure.StoreNull))
                    continue;

                // ‚úÖ –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π
                if (structure.IsArray)
                {
                    await SaveArrayFieldAsync(objectId, structure, rawValue, schemeId);
                }
                else if (PostgresObjectStorageProviderExtensions.IsClassType(structure.TypeSemantic))
                {
                    await SaveClassFieldAsync(objectId, structure, rawValue, schemeId);
                }
                else
                {
                    await SaveSimpleFieldAsync(objectId, structure, rawValue);
                }
            }
        }

        /// <summary>
        /// –°—Ç—Ä–∞—Ç–µ–≥–∏—è ChangeTracking - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å –ë–î –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ properties
        /// </summary>
        private async Task SavePropertiesWithChangeTracking<TProps>(long objectId, long schemeId, TProps properties) where TProps : class
        {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä —Å—Ö–µ–º—ã –∏–∑ –∫–µ—à–∞
            var scheme = await _schemeSync.GetSchemeByIdAsync(schemeId);
            if (scheme == null)
                throw new InvalidOperationException($"–°—Ö–µ–º–∞ —Å ID {schemeId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ values –∏–∑ –ë–î
            var existingValues = await LoadExistingValuesAsync(objectId, scheme.Structures);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞
            var currentProperties = await ExtractCurrentPropertiesAsync(properties, scheme.Structures);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
            await ApplyPropertyChangesAsync(objectId, existingValues, currentProperties);
        }

        /// <summary>
        /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ values –∏–∑ –ë–î –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
        /// </summary>
        private async Task<Dictionary<string, ExistingValueInfo>> LoadExistingValuesAsync(long objectId, IReadOnlyCollection<IRedbStructure> structures)
        {
            var structureIds = structures.Select(s => s.Id).ToList();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ values —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–ø–∞—Ö (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ SavePropertiesWithDeleteInsert)
            var existingValuesWithTypes = await (from v in _context.Set<_RValue>()
                                                 join s in _context.Structures on v.IdStructure equals s.Id
                                                 join t in _context.Types on s.IdType equals t.Id
                                                 where v.IdObject == objectId && structureIds.Contains(v.IdStructure)
                                                 select new { Value = v, Structure = s, DbType = t.DbType })
                                                .ToListAsync();

            var result = new Dictionary<string, ExistingValueInfo>();

            foreach (var item in existingValuesWithTypes)
            {
                var structure = structures.First(s => s.Id == item.Value.IdStructure);

                result[structure.Name] = new ExistingValueInfo
                {
                    ValueRecord = item.Value,
                    StructureId = structure.Id,
                    DbType = item.DbType,
                    IsArray = structure.IsArray ?? false,
                    ExtractedValue = ExtractValueFromRecord(item.Value, item.DbType, structure.IsArray ?? false)
                };
            }

            return result;
        }

        /// <summary>
        /// –ò–∑–≤–ª–µ—á—å —Ç–µ–∫—É—â–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
        /// </summary>
        private async Task<Dictionary<string, CurrentPropertyInfo>> ExtractCurrentPropertiesAsync<TProps>(TProps properties, IReadOnlyCollection<IRedbStructure> structures) where TProps : class
        {
            var result = new Dictionary<string, CurrentPropertyInfo>();
            var propertiesType = typeof(TProps);

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∞—Ö –∏–∑ –ë–î –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
            var structureIds = structures.Select(s => s.Id).ToList();
            var structureTypes = await (from s in _context.Structures
                                        join t in _context.Types on s.IdType equals t.Id
                                        where structureIds.Contains(s.Id)
                                        select new { StructureId = s.Id, DbType = t.DbType })
                                      .ToDictionaryAsync(x => x.StructureId, x => x.DbType);

            foreach (var structure in structures)
            {
                var property = propertiesType.GetProperty(structure.Name);
                if (property == null) continue;

                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–ª—è —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º [JsonIgnore]
                if (property.GetCustomAttributes(typeof(JsonIgnoreAttribute), false).Any()) continue;

                var rawValue = property.GetValue(properties);
                var dbType = structureTypes.GetValueOrDefault(structure.Id, "String");

                result[structure.Name] = new CurrentPropertyInfo
                {
                    Value = rawValue,
                    StructureId = structure.Id,
                    DbType = dbType,
                    IsArray = structure.IsArray ?? false
                };
            }

            return result;
        }

        /// <summary>
        /// –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è - INSERT/UPDATE/DELETE —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤
        /// </summary>
        private async Task ApplyPropertyChangesAsync(long objectId, Dictionary<string, ExistingValueInfo> existing, Dictionary<string, CurrentPropertyInfo> current)
        {
            var allFieldNames = existing.Keys.Union(current.Keys).ToList();

            foreach (var fieldName in allFieldNames)
            {
                var hasExisting = existing.TryGetValue(fieldName, out var existingInfo);
                var hasCurrent = current.TryGetValue(fieldName, out var currentInfo);

                if (!hasExisting && hasCurrent && currentInfo.Value != null)
                {
                    // INSERT –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    await InsertNewValueAsync(objectId, currentInfo);
                }
                else if (hasExisting && (!hasCurrent || currentInfo.Value == null))
                {
                    // DELETE —É–¥–∞–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    _context.Set<_RValue>().Remove(existingInfo.ValueRecord);
                }
                else if (hasExisting && hasCurrent && currentInfo.Value != null && !ValuesAreEqual(existingInfo.ExtractedValue, currentInfo.Value))
                {
                    // UPDATE –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    await UpdateExistingValueAsync(existingInfo.ValueRecord, currentInfo);
                }
                // else: –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            }
        }

        /// <summary>
        /// INSERT –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ _values
        /// </summary>
        private async Task InsertNewValueAsync(long objectId, CurrentPropertyInfo currentInfo)
        {
            var valueRecord = new _RValue
            {
                Id = _context.GetNextKey(),
                IdObject = objectId,
                IdStructure = currentInfo.StructureId
            };

            var processedValue = await ProcessNestedObjectsAsync(currentInfo.Value, currentInfo.DbType ?? "String", currentInfo.IsArray, objectId);
            SetSimpleValueByType(valueRecord, currentInfo.DbType ?? "String", processedValue);

            _context.Set<_RValue>().Add(valueRecord);
        }

        /// <summary>
        /// UPDATE —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ _values
        /// </summary>
        private async Task UpdateExistingValueAsync(_RValue existingRecord, CurrentPropertyInfo currentInfo)
        {
            // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è
            ClearValueRecord(existingRecord);

            var processedValue = await ProcessNestedObjectsAsync(currentInfo.Value, currentInfo.DbType ?? "String", currentInfo.IsArray, existingRecord.IdObject);
            SetSimpleValueByType(existingRecord, currentInfo.DbType ?? "String", processedValue);
        }

        /// <summary>
        /// –°—Ä–∞–≤–Ω–∏—Ç—å –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
        /// </summary>
        private bool ValuesAreEqual(object? existing, object? current)
        {
            if (existing == null && current == null) return true;
            if (existing == null || current == null) return false;

            // –î–ª—è –º–∞—Å—Å–∏–≤–æ–≤ –¥–µ–ª–∞–µ–º –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            if (existing is Array arrayA && current is Array arrayB)
            {
                if (arrayA.Length != arrayB.Length) return false;

                for (int i = 0; i < arrayA.Length; i++)
                {
                    if (!Equals(arrayA.GetValue(i), arrayB.GetValue(i)))
                        return false;
                }
                return true;
            }

            return Equals(existing, current);
        }

        /// <summary>
        /// –ò–∑–≤–ª–µ—á—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ _RValue –∑–∞–ø–∏—Å–∏
        /// </summary>
        private object? ExtractValueFromRecord(_RValue valueRecord, string? dbType, bool isArray)
        {
            if (isArray)
                return null;  // ‚úÖ –ú–∞—Å—Å–∏–≤—ã —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω—è—Ç—Å—è —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ, –∞ –Ω–µ –≤ JSON

            return dbType switch
            {
                "String" => valueRecord.String,
                "Long" => valueRecord.Long,
                "Double" => valueRecord.Double,
                "Boolean" => valueRecord.Boolean,
                "DateTime" => valueRecord.DateTime,
                "Guid" => valueRecord.Guid,
                "ByteArray" => valueRecord.ByteArray,
                _ => valueRecord.String
            };
        }

        /// <summary>
        /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø–æ–ª—è _RValue –∑–∞–ø–∏—Å–∏
        /// </summary>
        private void ClearValueRecord(_RValue valueRecord)
        {
            valueRecord.String = null;
            valueRecord.Long = null;
            valueRecord.Guid = null;
            valueRecord.Double = null;
            valueRecord.DateTime = null;
            valueRecord.Boolean = null;
            valueRecord.ByteArray = null;

        }

        /// <summary>
        /// üöÄ –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ RedbObject, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Ö —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        /// </summary>
        private async Task<object?> ProcessNestedObjectsAsync(object rawValue, string dbType, bool isArray, long parentObjectId = 0)
        {
            if (rawValue == null) return null;



            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤
            if (isArray && rawValue is System.Collections.IEnumerable enumerable && rawValue is not string)
            {

                var processedList = new List<object>();
                foreach (var item in enumerable)
                {
                    if (IsRedbObjectWithoutId(item))
                    {
                        var nestedObj = (IRedbObject)item;
                        // üéØ –£–°–¢–ê–ù–û–í–ö–ê –†–û–î–ò–¢–ï–õ–Ø: –ï—Å–ª–∏ —É –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π
                        if ((nestedObj.ParentId == 0 || nestedObj.ParentId == null) && parentObjectId > 0)
                        {
                            nestedObj.ParentId = parentObjectId;
                        }
                        var savedId = await SaveAsync((dynamic)item);
                        processedList.Add((long)savedId);
                    }
                    else if (IsRedbObjectWithId(item))
                    {
                        processedList.Add(((IRedbObject)item).Id);
                    }
                    else
                    {
                        processedList.Add(item);
                    }
                }
                return processedList;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            if (IsRedbObjectWithoutId(rawValue))
            {
                var nestedObj = (IRedbObject)rawValue;
                // üéØ –£–°–¢–ê–ù–û–í–ö–ê –†–û–î–ò–¢–ï–õ–Ø: –ï—Å–ª–∏ —É –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π
                if ((nestedObj.ParentId == 0 || nestedObj.ParentId == null) && parentObjectId > 0)
                {
                    nestedObj.ParentId = parentObjectId;
                }
                var savedId = await SaveAsync((dynamic)rawValue);
                return (long)savedId;
            }

            if (IsRedbObjectWithId(rawValue))
            {
                return ((IRedbObject)rawValue).Id;
            }


            return rawValue;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –æ–±—ä–µ–∫—Ç —ç—Ç–æ IRedbObject —Å Id = 0 (–Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å)
        /// </summary>
        private static bool IsRedbObjectWithoutId(object? value)
        {
            if (value is IRedbObject redbObj)
            {
                return redbObj.Id == 0;
            }
            return false;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –æ–±—ä–µ–∫—Ç —ç—Ç–æ IRedbObject —Å Id != 0 (—É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω)
        /// </summary>
        private static bool IsRedbObjectWithId(object? value)
        {
            if (value is IRedbObject redbObj)
            {
                return redbObj.Id != 0;
            }
            return false;
        }

        /// <summary>
        /// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –£–±—Ä–∞–ª–∏ JSON –º–∞—Å—Å–∏–≤—ã, —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ —Ç–∏–ø—ã
        /// </summary>
        private static void SetSimpleValueByType(_RValue valueRecord, string dbType, object? processedValue)
        {
            if (processedValue == null) return;

            // ‚ùå –ú–ê–°–°–ò–í–´ –ù–ï –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú - –æ–Ω–∏ –∏–¥—É—Ç —á–µ—Ä–µ–∑ SaveArrayFieldAsync
            
            // –ü—Ä—è–º–æ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            switch (dbType)
            {
                case "String":
                case "Text":
                    valueRecord.String = processedValue?.ToString();
                    break;
                case "Long":
                case "bigint":
                    if (processedValue is long longVal)
                        valueRecord.Long = longVal;
                    else if (processedValue is int intVal)
                        valueRecord.Long = intVal;
                    else if (long.TryParse(processedValue?.ToString(), out var parsedLong))
                        valueRecord.Long = parsedLong;
                    break;
                case "Double":
                    if (processedValue is double doubleVal)
                        valueRecord.Double = doubleVal;
                    else if (processedValue is float floatVal)
                        valueRecord.Double = floatVal;
                    else if (double.TryParse(processedValue?.ToString(), out var parsedDouble))
                        valueRecord.Double = parsedDouble;
                    break;
                case "Boolean":
                    if (processedValue is bool boolVal)
                        valueRecord.Boolean = boolVal;
                    else if (bool.TryParse(processedValue?.ToString(), out var parsedBool))
                        valueRecord.Boolean = parsedBool;
                    break;
                case "DateTime":
                    if (processedValue is DateTime dateTime)
                        valueRecord.DateTime = dateTime;
                    else if (DateTime.TryParse(processedValue?.ToString(), out var parsedDate))
                        valueRecord.DateTime = parsedDate;
                    break;
                case "ByteArray":
                    if (processedValue is byte[] byteArray)
                        valueRecord.ByteArray = byteArray;
                    break;
                case "Object":
                case "ListItem":
                    // RedbObject —Å—Å—ã–ª–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ Long ID
                    if (processedValue is long objectId)
                        valueRecord.Long = objectId;
                    break;
                default:
                    valueRecord.String = processedValue?.ToString();
                    break;
            }
        }



        // ===== LEGACY –ú–ï–¢–û–î–´ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã) =====

        /*
        public async Task<int> DeleteSubtreeAsync(RedbObject parentObj, IRedbUser user, bool checkPermissions = true)
        {
            return await DeleteSubtreeAsync(parentObj.Id, user.Id, checkPermissions);
        }
        
        public async Task<int> DeleteSubtreeAsync(RedbObject parentObj, bool checkPermissions = true)
        {
            var effectiveUser = _securityContext.GetEffectiveUserWithPriority();
            return await DeleteSubtreeAsync(parentObj.Id, effectiveUser.UserId, effectiveUser.ShouldCheckPermissions && checkPermissions);
        }
        */

        // ===== üöÄ –ú–ê–°–°–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ PostgresObjectStorageProvider.AddNewObjects.cs ===== 

      
      
        /// <summary>
        /// üöÄ –ü–û–õ–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ properties (–º–∞—Å—Å–∏–≤—ã, –∫–ª–∞—Å—Å—ã, –æ–±—ä–µ–∫—Ç—ã) - GetNextKey –ø—Ä–æ–∑—Ä–∞—á–Ω–æ ASYNC!
        /// </summary>
      
        /// <summary>
        /// üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–ª—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏ (GetNextKey –ø—Ä–æ–∑—Ä–∞—á–Ω–æ)
        /// </summary>
      
  /// <summary>
  /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç IRedbStructure –≤ StructureMetadata —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–∞—Ö –∏–∑ –∫–µ—à–∞
  /// </summary>
  private async Task<List<StructureMetadata>> ConvertStructuresToMetadataAsync(IEnumerable<IRedbStructure> structures)
  {
      var result = new List<StructureMetadata>();

      foreach (var structure in structures)
      {
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –ø–æ IdType —á–µ—Ä–µ–∑ –∫–µ—à –∏–ª–∏ –ë–î
          var typeInfo = await GetTypeInfoAsync(structure.IdType);

          result.Add(new StructureMetadata
          {
              Id = structure.Id,
              IdParent = structure.IdParent,
              Name = structure.Name,
              DbType = typeInfo.DbType,
              IsArray = structure.IsArray ?? false,
              StoreNull = structure.StoreNull ?? false,
              TypeSemantic = typeInfo.TypeSemantic
          });
      }

      return result;
  }
        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –ø–æ IdType
        /// </summary>
        private async Task<(string DbType, string TypeSemantic)> GetTypeInfoAsync(long typeId)
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–ø–µ
            var typeEntity = await _context.Set<_RType>().FindAsync(typeId);

            return typeEntity != null
                ? (typeEntity.DbType ?? "String", typeEntity.Type1 ?? "string")
                : ("String", "string");
        }

    }

    /// <summary>
    /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–∏ –∏–∑ –ë–î
    /// </summary>
    internal class ExistingValueInfo
    {
        public _RValue ValueRecord { get; set; } = null!;
        public long StructureId { get; set; }
        public string? DbType { get; set; }
        public bool IsArray { get; set; }
        public object? ExtractedValue { get; set; }
    }

    /// <summary>
    /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–≤–æ–π—Å—Ç–≤–µ –æ–±—ä–µ–∫—Ç–∞
    /// </summary>
    internal class CurrentPropertyInfo
    {
        public object? Value { get; set; }
        public long StructureId { get; set; }
        public string? DbType { get; set; }
        public bool IsArray { get; set; }
    }

    /// <summary>
    /// –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤–∫–ª—é—á–∞—è _store_null
    /// </summary>
    internal class StructureMetadata
    {
        public long Id { get; set; }
        public long? IdParent { get; set; }  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä
        public string Name { get; set; } = string.Empty;
        public string DbType { get; set; } = "String";
        public bool IsArray { get; set; }
        public bool StoreNull { get; set; }
        public string TypeSemantic { get; set; } = "string";
    }
}