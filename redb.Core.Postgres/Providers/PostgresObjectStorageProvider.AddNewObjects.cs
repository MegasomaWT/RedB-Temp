using redb.Core.Providers;
using redb.Core.DBModels;
using redb.Core.Utils;
using redb.Core.Models.Contracts;
using redb.Core.Models.Entities;
using redb.Core.Models.Configuration;
using redb.Core.Models.Security;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System;
using Microsoft.EntityFrameworkCore;
using EFCore.BulkExtensions;

namespace redb.Core.Postgres.Providers
{
    /// <summary>
    /// üöÄ –ú–ê–°–°–û–í–ê–Ø –í–°–¢–ê–í–ö–ê - –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤
    /// </summary>
    public partial class PostgresObjectStorageProvider
    {
        /// <summary>
        /// üöÄ –ú–ê–°–°–û–í–ê–Ø –í–°–¢–ê–í–ö–ê: –°–æ–∑–¥–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞ –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é (–ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)
        /// –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ SaveAsyncNew + BulkInsert –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        /// </summary>
        public async Task<List<long>> AddNewObjectsAsync<TProps>(List<IRedbObject<TProps>> objects) where TProps : class, new()
        {
            return await AddNewObjectsAsync(objects, _securityContext.CurrentUser);
        }

        /// <summary>
        /// üöÄ –ú–ê–°–°–û–í–ê–Ø –í–°–¢–ê–í–ö–ê —Å —è–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: –°–æ–∑–¥–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)
        /// </summary>
        public async Task<List<long>> AddNewObjectsAsync<TProps>(List<IRedbObject<TProps>> objects, IRedbUser user) where TProps : class, new()
        {
            if (objects == null || !objects.Any())
            {
                return new List<long>();
            }




            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            foreach (var obj in objects)
            {
                if (obj.properties == null)
                {
                    throw new ArgumentException($"–°–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞ '{obj.Name}' –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å null", nameof(objects));
                }
            }

            // –ù–∞—á–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–µ—à–µ–π –∏ —Å—Ö–µ–º –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤

            foreach (var obj in objects)
            {
                // –ü–µ—Ä–µ—Å—á–µ—Ç —Ö–µ—à–∞ (–∏–∑ SaveAsyncNew)
                var currentHash = RedbHash.ComputeFor(obj);
                if (currentHash.HasValue)
                {
                    obj.Hash = currentHash.Value;
                }

                // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã (–∏–∑ SaveAsyncNew, –Ω–æ –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤)
                if (obj.SchemeId == 0 && _configuration.AutoSyncSchemesOnSave)
                {

                    var existingScheme = await _schemeSync.GetSchemeByTypeAsync<TProps>();
                    if (existingScheme != null)
                    {
                        obj.SchemeId = existingScheme.Id;

                    }
                    else if (_configuration.AutoSyncSchemesOnSave)
                    {

                        try
                        {
                            var scheme = await _schemeSync.SyncSchemeAsync<TProps>();
                            obj.SchemeId = scheme.Id;

                        }
                        catch (Exception ex)
                        {

                            throw;
                        }
                    }
                }
            }

            // === –ü–ï–†–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú –õ–û–ì–ò–ö–£ –ò–ó SaveAsyncNew ===

            var objectsToSave = new List<IRedbObject>();
            var valuesToSave = new List<_RValue>();
            var processedObjectIds = new HashSet<long>();

            // –®–ê–ì 2: –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–±–æ—Ä –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–≥–ª–∞–≤–Ω—ã–π + –≤–ª–æ–∂–µ–Ω–Ω—ã–µ IRedbObject)

            foreach (var obj in objects)
            {
                await CollectAllObjectsRecursively(obj, objectsToSave, processedObjectIds);
            }


            // –®–ê–ì 3: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ ID –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º –±–µ–∑ ID (—á–µ—Ä–µ–∑ GetNextKey)

            await AssignMissingIds(objectsToSave, user);
            
            // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ParentId –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ID
            var mainObjectIds = objects.Select(o => o.Id).ToHashSet();
            foreach (var obj in objectsToSave)
            {
                if (!mainObjectIds.Contains(obj.Id))
                {
                    // –≠—Ç–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ParentId = ID –≥–ª–∞–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                    obj.ParentId = objects.First().Id;

                }
            }

            // –®–ê–ì 4: –°–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤

            await EnsureSchemesForAllTypes(objectsToSave);


            // –®–ê–ì 5: –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ properties –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–∏ values

            await ProcessAllObjectsPropertiesRecursively(objectsToSave, valuesToSave);

            
            // –®–ê–ì 6: –ë–ï–ó Delete —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ - —ç—Ç–æ –ù–û–í–´–ï –æ–±—ä–µ–∫—Ç—ã


            // –®–ê–ì 7: BULK –í–°–¢–ê–í–ö–ê –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

            await CommitAllChangesBulk(objectsToSave, valuesToSave);


            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥–ª–∞–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            var resultIds = objects.Select(o => o.Id).ToList();

            
            return resultIds;
        }

        /// <summary>
        /// üöÄ –®–ê–ì 7 (BULK): –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å BulkInsert –≤–º–µ—Å—Ç–æ Add()
        /// </summary>
        private async Task CommitAllChangesBulk(List<IRedbObject> objects, List<_RValue> valuesList)
        {


            // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è BulkInsert
            var bulkConfig = new BulkConfig
            {
                BatchSize = 1000,           // –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏
                SetOutputIdentity = false,   // ID —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ GetNextKey
                PreserveInsertOrder = true,  // –≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫: –æ–±—ä–µ–∫—Ç—ã ‚Üí values
                BulkCopyTimeout = 60,        // –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
                UseTempDB = false            // –ü—Ä—è–º–æ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ë–î
            };

            try
            {
                // 1. BULK INSERT –æ–±—ä–µ–∫—Ç–æ–≤
                if (objects.Count > 0)
                {

                    
                    var objectRecords = objects.Select(obj =>
                    {
                        var record = new _RObject
                        {
                            Id = obj.Id,
                            IdScheme = obj.SchemeId,
                            IdParent = obj.ParentId,
                            IdOwner = obj.OwnerId,
                            IdWhoChange = obj.WhoChangeId,
                            Name = obj.Name,
                            Hash = obj.Hash,
                            
                            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
                            DateBegin = obj.DateBegin,        // ‚ùó –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª–µ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–ø–∞–¥–∞–ª–æ!
                            DateComplete = obj.DateComplete,
                            Key = obj.Key,
                            CodeInt = obj.CodeInt,
                            CodeString = obj.CodeString,
                            CodeGuid = obj.CodeGuid,
                            Bool = obj.Bool,
                            Note = obj.Note
                        };
                        
                        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AutoSetModifyDate –∫–∞–∫ –≤ SaveAsync
                        if (_configuration.AutoSetModifyDate)
                        {
                            record.DateCreate = DateTime.Now;
                            record.DateModify = DateTime.Now;
                        }
                        else
                        {
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞
                            record.DateCreate = obj.DateCreate;
                            record.DateModify = obj.DateModify;
                        }
                        
                        return record;
                    }).ToList();

                    await _context.BulkInsertAsync(objectRecords, bulkConfig);

                }

                // 2. BULK INSERT values
                if (valuesList.Count > 0)
                {

                    await _context.BulkInsertAsync(valuesList, bulkConfig);

                }


            }
            catch (Exception ex)
            {

                if (ex.InnerException != null)
                {

                }
                throw;
            }
        }
    }
}
