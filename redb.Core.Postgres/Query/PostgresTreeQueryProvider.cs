using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using redb.Core.Models.Entities;
using redb.Core.Query;
using redb.Core.Query.QueryExpressions;
using redb.Core.Serialization;

namespace redb.Core.Postgres.Query;

/// <summary>
/// PostgreSQL –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö LINQ-–∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ search_tree_objects_with_facets
/// –†–∞—Å—à–∏—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å PostgresQueryProvider –¥–æ–±–∞–≤–ª—è—è –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
/// </summary>
public class PostgresTreeQueryProvider : ITreeQueryProvider
{
    private readonly RedbContext _context;
    private readonly IRedbObjectSerializer _serializer;
    private readonly PostgresFilterExpressionParser _filterParser;
    private readonly PostgresOrderingExpressionParser _orderingParser;
    private readonly PostgresFacetFilterBuilder _facetBuilder;
    private readonly ILogger? _logger;

    public PostgresTreeQueryProvider(
        RedbContext context,
        IRedbObjectSerializer serializer,
        ILogger? logger = null)
    {
        _context = context;
        _serializer = serializer;
        _logger = logger;
        _filterParser = new PostgresFilterExpressionParser();
        _orderingParser = new PostgresOrderingExpressionParser();
        _facetBuilder = new PostgresFacetFilterBuilder(logger);
    }

    // ===== –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø IRedbQueryProvider (–ë–ê–ó–û–í–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨) =====
    
    public IRedbQueryable<TProps> CreateQuery<TProps>(long schemeId, long? userId = null, bool checkPermissions = false) 
        where TProps : class, new()
    {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π RedbQueryable
        // –û–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å search_objects_with_facets() —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π PostgresQueryProvider
        var baseProvider = new PostgresQueryProvider(_context, _serializer, _logger);
        return baseProvider.CreateQuery<TProps>(schemeId, userId, checkPermissions);
    }

    // ===== –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø ITreeQueryProvider (–î–†–ï–í–û–í–ò–î–ù–ê–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨) =====
    
    public ITreeQueryable<TProps> CreateTreeQuery<TProps>(
        long schemeId, 
        long? userId = null, 
        bool checkPermissions = false,
        long? rootObjectId = null,
        int? maxDepth = null
    ) where TProps : class, new()
    {
        var context = new TreeQueryContext<TProps>(schemeId, userId, checkPermissions, rootObjectId, maxDepth);
        return new PostgresTreeQueryable<TProps>(this, context, _filterParser, _orderingParser);
    }

    // ===== –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–ü–†–û–°–û–í =====
    
    public async Task<object> ExecuteAsync(Expression expression, Type elementType)
    {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        if (expression is ConstantExpression constantExpr && constantExpr.Value != null)
        {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ elementType
            if (elementType == typeof(int))
            {
                return await ExecuteCountAsyncGeneric(constantExpr.Value);
            }
            else if (elementType.IsGenericType)
            {
                var genericType = elementType.GetGenericTypeDefinition();
                if (genericType == typeof(List<>))
                {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (RedbObject –∏–ª–∏ TreeRedbObject)
                    var itemType = elementType.GetGenericArguments()[0];
                    if (itemType.IsGenericType && itemType.GetGenericTypeDefinition() == typeof(TreeRedbObject<>))
                    {
                        return await ExecuteTreeToListAsyncGeneric(constantExpr.Value);
                    }
                    else
                    {
                        return await ExecuteToListAsyncGeneric(constantExpr.Value);
                    }
                }
            }
        }

        throw new NotSupportedException($"Tree query expression type {expression.GetType().Name} with element type {elementType.Name} is not supported");
    }

    // ===== –í–´–ü–û–õ–ù–ï–ù–ò–ï COUNT –ó–ê–ü–†–û–°–û–í =====
    
    private async Task<int> ExecuteCountAsyncGeneric(object contextObj)
    {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
        var contextType = contextObj.GetType();
        
        if (contextType.IsGenericType && contextType.GetGenericTypeDefinition() == typeof(TreeQueryContext<>))
        {
            // –î—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            var propsType = contextType.GetGenericArguments()[0];
            var method = typeof(PostgresTreeQueryProvider).GetMethod(nameof(ExecuteTreeCountAsync), System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            var genericMethod = method!.MakeGenericMethod(propsType);
            var task = (Task<int>)genericMethod.Invoke(this, new[] { contextObj })!;
            return await task;
        }
        else if (contextType.IsGenericType && contextType.GetGenericTypeDefinition() == typeof(QueryContext<>))
        {
            // –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
            var baseProvider = new PostgresQueryProvider(_context, _serializer, _logger);
            return await (Task<int>)typeof(PostgresQueryProvider)
                .GetMethod("ExecuteCountAsyncGeneric", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)!
                .Invoke(baseProvider, new[] { contextObj })!;
        }
        
        throw new NotSupportedException($"Unsupported context type: {contextType.Name}");
    }

    // ===== –í–´–ü–û–õ–ù–ï–ù–ò–ï TOLIST –ó–ê–ü–†–û–°–û–í =====
    
    private async Task<object> ExecuteToListAsyncGeneric(object contextObj)
    {
        var contextType = contextObj.GetType();
        
        if (contextType.IsGenericType && contextType.GetGenericTypeDefinition() == typeof(QueryContext<>))
        {
            // –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
            var baseProvider = new PostgresQueryProvider(_context, _serializer, _logger);
            return await (Task<object>)typeof(PostgresQueryProvider)
                .GetMethod("ExecuteToListAsyncGeneric", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)!
                .Invoke(baseProvider, new[] { contextObj })!;
        }
        else if (contextType.IsGenericType && contextType.GetGenericTypeDefinition() == typeof(TreeQueryContext<>))
        {
            // –î—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –º–µ—Ç–æ–¥
            var propsType = contextType.GetGenericArguments()[0];
            var method = typeof(PostgresTreeQueryProvider).GetMethod(nameof(ExecuteTreeToListAsync), System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            var genericMethod = method!.MakeGenericMethod(propsType);
            var task = (Task<object>)genericMethod.Invoke(this, new[] { contextObj })!;
            return await task;
        }
        
        throw new NotSupportedException($"Unsupported context type for ToList: {contextType.Name}");
    }
    
    private async Task<object> ExecuteTreeToListAsyncGeneric(object contextObj)
    {
        var contextType = contextObj.GetType();
        
        if (contextType.IsGenericType && contextType.GetGenericTypeDefinition() == typeof(TreeQueryContext<>))
        {
            // –î—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            var propsType = contextType.GetGenericArguments()[0];
            var method = typeof(PostgresTreeQueryProvider).GetMethod(nameof(ExecuteTreeToListAsync), System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            var genericMethod = method!.MakeGenericMethod(propsType);
            var task = (Task<object>)genericMethod.Invoke(this, new[] { contextObj })!;
            return await task;
        }
        
        throw new NotSupportedException($"Unsupported context type for TreeToList: {contextType.Name}");
    }

    // ===== –î–†–ï–í–û–í–ò–î–ù–´–ï –ú–ï–¢–û–î–´ –í–´–ü–û–õ–ù–ï–ù–ò–Ø =====

    /// <summary>
    /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ COUNT –¥–ª—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ search_tree_objects_with_facets
    /// </summary>
    private async Task<int> ExecuteTreeCountAsync<TProps>(TreeQueryContext<TProps> context) where TProps : class, new()
    {
        try
        {
            // –°—Ç—Ä–æ–∏–º JSON —Ñ–∏–ª—å—Ç—Ä —Å –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
            var facetFilter = BuildTreeFacetFilter(context);
            var filterJson = facetFilter?.RootElement.ToString() ?? "{}";

            _logger?.LogDebug("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ COUNT –∑–∞–ø—Ä–æ—Å–∞: SchemeId={SchemeId}, Filter={Filter}", 
                context.SchemeId, filterJson);

            // –í—ã–∑—ã–≤–∞–µ–º search_tree_objects_with_facets —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è COUNT
            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: scheme_id, parent_id, facet_filters, limit, offset, order_by, max_depth, max_recursion_depth
            var sql = @"
                SELECT (result->>'total_count')::int as ""Value""
                FROM search_tree_objects_with_facets({0}, {1}, {2}::jsonb, 1, 0, NULL::jsonb, {3}, {4}) as result";

            int totalCount;
            
            // üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ rootObjectId=null, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤–æ –≤—Å–µ–π —Å—Ö–µ–º–µ
            if (!context.RootObjectId.HasValue)
            {
                // –ü–æ–∏—Å–∫ –≤–æ –í–°–ï–ô —Å—Ö–µ–º–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º search_objects_with_facets
                var allSchemeSql = @"
                    SELECT (result->>'total_count')::int as ""Value""
                    FROM search_objects_with_facets({0}, {1}::jsonb, 1, 0, NULL::jsonb, {2}) as result";
                
                totalCount = await _context.Database.SqlQueryRaw<int>(
                    allSchemeSql, 
                    context.SchemeId,
                    filterJson,
                    context.MaxRecursionDepth ?? 10  // max_recursion_depth
                ).FirstOrDefaultAsync();
            }
            else
            {
                // –ü–æ–∏—Å–∫ –≤ –ø–æ–¥–¥–µ—Ä–µ–≤–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º search_tree_objects_with_facets
                totalCount = await _context.Database.SqlQueryRaw<int>(
                sql, 
                context.SchemeId, 
                    context.RootObjectId.Value,  // parent_id - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç
                filterJson, 
                    context.MaxDepth ?? 50,
                    context.MaxRecursionDepth ?? 10  // max_recursion_depth
            ).FirstOrDefaultAsync();
            }

            _logger?.LogDebug("–î—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π COUNT —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {Count}", totalCount);
            return totalCount;
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ COUNT –∑–∞–ø—Ä–æ—Å–∞");
            throw;
        }
    }

    /// <summary>
    /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ToList –¥–ª—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ search_tree_objects_with_facets
    /// </summary>
    private async Task<object> ExecuteTreeToListAsync<TProps>(TreeQueryContext<TProps> context) where TProps : class, new()
    {
        try
        {
            // –°—Ç—Ä–æ–∏–º JSON —Ñ–∏–ª—å—Ç—Ä—ã
            var facetFilter = BuildTreeFacetFilter(context);
            var orderBy = BuildOrderByFilter(context);

            var filterJson = facetFilter?.RootElement.ToString() ?? "{}";
            var orderByJson = orderBy?.RootElement.ToString() ?? "null";

            _logger?.LogDebug("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ ToList –∑–∞–ø—Ä–æ—Å–∞: SchemeId={SchemeId}, Limit={Limit}, Offset={Offset}", 
                context.SchemeId, context.Limit, context.Offset);

            _logger?.LogDebug("Tree ToList Query: SchemeId={SchemeId}, RootObjectId={RootObjectId}, Filters={Filters}", 
                context.SchemeId, context.RootObjectId, filterJson);
                
            // üîç –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò JSON –ü–†–û–ë–õ–ï–ú–´
            _logger?.LogInformation($"üîç SQL PARAMETERS DEBUG:");
            _logger?.LogInformation($"   üìä SchemeId: {context.SchemeId} ({context.SchemeId.GetType().Name})");
            _logger?.LogInformation($"   üìä RootObjectId: {context.RootObjectId} ({context.RootObjectId?.GetType().Name})");
            _logger?.LogInformation($"   üìä FilterJson: {filterJson}");
            _logger?.LogInformation($"   üìä OrderByJson: {orderByJson}");
            _logger?.LogInformation($"   üìä Limit: {context.Limit?.ToString() ?? "NULL (–≤—Å–µ –∑–∞–ø–∏—Å–∏)"}");
            _logger?.LogInformation($"   üìä Offset: {context.Offset ?? 0}");
            _logger?.LogInformation($"   üìä MaxDepth: {context.MaxDepth ?? 50}");
            _logger?.LogInformation($"   üìä MaxRecursionDepth: {context.MaxRecursionDepth ?? 10}");

            // Tree DateTime —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ $descendantsOf

            // –í—ã–∑—ã–≤–∞–µ–º search_tree_objects_with_facets —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏  
            // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: scheme_id, parent_id, facet_filters, limit, offset, order_by, max_depth, max_recursion_depth
            var sql = @"
                SELECT result->>'objects' as ""Value""
                FROM search_tree_objects_with_facets({0}, {1}, {2}::jsonb, {3}, {4}, {5}::jsonb, {6}, {7}) as result";

            string objectsJson;
            
            // ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ ParentIds[]
            if (context.ParentIds != null && context.ParentIds.Length > 0)
            {
                // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—Ä–Ω–∏ - –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                var allResults = new List<List<TreeRedbObject<TProps>>>();
                
                foreach (var parentId in context.ParentIds)
                {
                    var singleParentSql = @"
                        SELECT result->>'objects' as ""Value""
                        FROM search_tree_objects_with_facets({0}, {1}, {2}::jsonb, {3}, {4}, {5}::jsonb, {6}, {7}) as result";
                    
                    var singleObjectsJson = await _context.Database.SqlQueryRaw<string>(
                        singleParentSql,
                        context.SchemeId,
                        parentId,                    // parent_id - —Ç–µ–∫—É—â–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å
                        filterJson,
                        context.Limit ?? int.MaxValue,  // ‚úÖ NULL ‚Üí int.MaxValue (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±–µ–∑ –ª–∏–º–∏—Ç–∞)  
                        0,                          // offset_count = 0 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                        orderByJson,                // order_by
                        context.MaxDepth ?? 50,     // max_depth
                        context.MaxRecursionDepth ?? 10  // max_recursion_depth
                    ).FirstOrDefaultAsync();
                    
                    if (!string.IsNullOrEmpty(singleObjectsJson))
                    {
                        var singleResults = DeserializeTreeObjects<TProps>(singleObjectsJson);
                        allResults.Add(singleResults);
                    }
                }
                
                // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                var combinedResults = allResults.SelectMany(r => r).ToList();
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—â–∏–µ –ª–∏–º–∏—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
                if (context.Offset.HasValue && context.Offset.Value > 0)
                {
                    combinedResults = combinedResults.Skip(context.Offset.Value).ToList();
                }
                
                if (context.Limit.HasValue)
                {
                    combinedResults = combinedResults.Take(context.Limit.Value).ToList();
                }
                
                _logger?.LogDebug("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª–∏: –Ω–∞–π–¥–µ–Ω–æ {Count} –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ {ParentCount} —Ä–æ–¥–∏—Ç–µ–ª–µ–π", 
                    combinedResults.Count, context.ParentIds.Length);
                
                return (object)combinedResults;
            }
            // üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ rootObjectId=null, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤–æ –≤—Å–µ–π —Å—Ö–µ–º–µ
            else if (!context.RootObjectId.HasValue)
            {
                // –ü–æ–∏—Å–∫ –≤–æ –í–°–ï–ô —Å—Ö–µ–º–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º search_objects_with_facets (–±–µ–∑ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
                var allSchemeSql = @"
                    SELECT result->>'objects' as ""Value""
                    FROM search_objects_with_facets({0}, {1}::jsonb, {2}, {3}, {4}::jsonb, {5}) as result";
                
                objectsJson = await _context.Database.SqlQueryRaw<string>(
                    allSchemeSql,
                    context.SchemeId,
                    filterJson,
                    context.Limit ?? 100,       // limit_count
                    context.Offset ?? 0,        // offset_count
                    orderByJson,                // order_by
                    context.MaxRecursionDepth ?? 10  // max_recursion_depth
                ).FirstOrDefaultAsync();
            }
            else
            {
                // –ü–æ–∏—Å–∫ –≤ –ø–æ–¥–¥–µ—Ä–µ–≤–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º search_tree_objects_with_facets
                objectsJson = await _context.Database.SqlQueryRaw<string>(
                sql,
                context.SchemeId,
                    context.RootObjectId.Value,  // parent_id - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç
                filterJson,
                    context.Limit ?? 100,       // limit_count
                    context.Offset ?? 0,        // offset_count
                    orderByJson,                // order_by
                    context.MaxDepth ?? 50,     // max_depth
                    context.MaxRecursionDepth ?? 10  // max_recursion_depth
            ).FirstOrDefaultAsync();
            }

            // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            var result = DeserializeTreeObjects<TProps>(objectsJson);
            
            _logger?.LogDebug("–î—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π ToList —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {Count} –æ–±—ä–µ–∫—Ç–æ–≤", result.Count);
            return (object)result;
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ ToList –∑–∞–ø—Ä–æ—Å–∞");
            throw;
        }
    }

    // ===== –ü–û–°–¢–†–û–ï–ù–ò–ï –§–ò–õ–¨–¢–†–û–í =====

    /// <summary>
    /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ JSON —Ñ–∞—Å–µ—Ç-—Ñ–∏–ª—å—Ç—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    /// </summary>
    private JsonDocument? BuildTreeFacetFilter<TProps>(TreeQueryContext<TProps> context) where TProps : class, new()
    {
        var filters = new Dictionary<string, object>();

        // 1. üöÄ –ú–û–©–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –§–ò–õ–¨–¢–†–û–í (–∏—Å–ø–æ–ª—å–∑—É–µ–º PostgresFacetFilterBuilder)
        if (context.Filter != null)
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –º–æ—â–Ω—É—é —Å–∏—Å—Ç–µ–º—É —á—Ç–æ –∏ –≤ –æ–±—ã—á–Ω–æ–º LINQ - –í–°–ï 25+ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤!
            var facetFiltersJson = _facetBuilder.BuildFacetFilters(context.Filter);
            
            // –ü–∞—Ä—Å–∏–º JSON –æ–±—Ä–∞—Ç–Ω–æ –≤ Dictionary –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å tree —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            if (facetFiltersJson != "{}")
            {
                var facetFiltersDict = JsonSerializer.Deserialize<Dictionary<string, object>>(facetFiltersJson);
                if (facetFiltersDict != null)
                {
                    foreach (var kvp in facetFiltersDict)
            {
                filters[kvp.Key] = kvp.Value;
                    }
                }
            }
        }

        // 2. üå≥ –î—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã (–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
        if (context.TreeFilters != null && context.TreeFilters.Any())
        {
            foreach (var treeFilter in context.TreeFilters)
            {
                AddTreeFilterToJson(filters, treeFilter);
            }
        }

        // 3. üå≥ –£–ë–†–ê–ù–û: –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º $descendantsOf –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å rootObjectId
        // –ü—Ä–∏—á–∏–Ω–∞: search_tree_objects_with_facets –£–ñ–ï –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø–æ parent_id
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π $descendantsOf —Å–æ–∑–¥–∞–µ—Ç –ö–û–ù–§–õ–ò–ö–¢ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!
        // if (context.RootObjectId.HasValue) - –£–î–ê–õ–ï–ù–û!

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –¥–æ–∫—É–º–µ–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
        if (!filters.Any()) return null;
        
        var jsonString = JsonSerializer.Serialize(filters, new JsonSerializerOptions { WriteIndented = false });
        return JsonDocument.Parse(jsonString);
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ JSON —Å–ª–æ–≤–∞—Ä—å
    /// </summary>
    private void AddTreeFilterToJson(Dictionary<string, object> filters, TreeFilter treeFilter)
    {
        switch (treeFilter.Operator)
        {
            case TreeFilterOperator.HasAncestor:
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º FilterConditions –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç 
                filters["$hasAncestor"] = treeFilter.FilterConditions ?? new Dictionary<string, object>();
                break;
            
            case TreeFilterOperator.HasDescendant:
                // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º FilterConditions –∫–∞–∫ –≤–ª–æ–∂–µ–Ω–Ω—ã–π JSON –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ—Ç–æ–º–∫–æ–≤
                filters["$hasDescendant"] = treeFilter.FilterConditions ?? new Dictionary<string, object>();
                break;
            
            case TreeFilterOperator.Level:
                if (treeFilter.Value is int level)
                {
                    filters["$level"] = level;
                }
                else if (treeFilter.FilterConditions != null)
                {
                    filters["$level"] = treeFilter.FilterConditions;
                }
                break;
            
            case TreeFilterOperator.IsRoot:
                filters["$isRoot"] = true;
                break;
            
            case TreeFilterOperator.IsLeaf:
                filters["$isLeaf"] = true;
                break;

            case TreeFilterOperator.ChildrenOf:
                filters["$childrenOf"] = treeFilter.Value;
                break;

            case TreeFilterOperator.DescendantsOf:
                filters["$descendantsOf"] = new { 
                    ancestor_id = treeFilter.Value,
                    max_depth = treeFilter.MaxDepth 
                };
                break;

            default:
                throw new NotSupportedException($"–î—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä {treeFilter.Operator} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
        }
    }



    /// <summary>
    /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ JSON –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –±–∞–∑–æ–≤–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É)
    /// </summary>
    private JsonDocument? BuildOrderByFilter<TProps>(TreeQueryContext<TProps> context) where TProps : class, new()
    {
        if (context.Orderings == null || !context.Orderings.Any())
            return null;

        var orderByArray = context.Orderings.Select(ordering => new
        {
            field = ordering.Property.Name,
            direction = ordering.Direction == SortDirection.Descending ? "DESC" : "ASC"
        }).ToArray();

        var jsonString = JsonSerializer.Serialize(orderByArray);
        return JsonDocument.Parse(jsonString);
    }

    // üíÄ ConvertFilterToFacets() –£–î–ê–õ–ï–ù! –ó–ê–ú–ï–ù–ï–ù –ù–ê PostgresFacetFilterBuilder!
    // –¢–µ–ø–µ—Ä—å Tree –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¢–£ –ñ–ï –ú–û–©–ù–£–Æ –°–ò–°–¢–ï–ú–£ —á—Ç–æ –∏ –æ–±—ã—á–Ω—ã–π LINQ - –í–°–ï 25+ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤!

    /// <summary>
    /// –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ TreeRedbObject
    /// </summary>
    private List<TreeRedbObject<TProps>> DeserializeTreeObjects<TProps>(string? objectsJson) where TProps : class, new()
    {
        if (string.IsNullOrEmpty(objectsJson) || objectsJson == "null")
            return new List<TreeRedbObject<TProps>>();

        try
        {
            // –ü–∞—Ä—Å–∏–º JSON –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
            var jsonArray = JsonSerializer.Deserialize<JsonElement[]>(objectsJson);
            var result = new List<TreeRedbObject<TProps>>();

            if (jsonArray == null) return result;

            foreach (var jsonElement in jsonArray)
            {
                try
                {
                    // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π RedbObject
                    var redbObj = _serializer.Deserialize<TProps>(jsonElement.GetRawText());
                    if (redbObj == null) continue;

                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ TreeRedbObject
                    var treeObj = ConvertToTreeObject(redbObj);
                    result.Add(treeObj);
                }
                catch (Exception ex)
                {
                    _logger?.LogWarning(ex, "–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ JSON");
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                }
            }

            return result;
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON –º–∞—Å—Å–∏–≤–∞ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤");
            return new List<TreeRedbObject<TProps>>();
        }
    }

    /// <summary>
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RedbObject –≤ TreeRedbObject
    /// </summary>
    private TreeRedbObject<TProps> ConvertToTreeObject<TProps>(RedbObject<TProps> source) where TProps : class, new()
    {
        return new TreeRedbObject<TProps>
        {
            id = source.id,
            parent_id = source.parent_id,
            scheme_id = source.scheme_id,
            owner_id = source.owner_id,
            who_change_id = source.who_change_id,
            date_create = source.date_create,
            date_modify = source.date_modify,
            date_begin = source.date_begin,
            date_complete = source.date_complete,
            key = source.key,
            code_int = source.code_int,
            code_string = source.code_string,
            code_guid = source.code_guid,
            name = source.name,
            note = source.note,
            @bool = source.@bool,
            hash = source.hash,
            properties = source.properties
        };
    }
}

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ö–õ–ê–°–°–´ =====

/// <summary>
/// –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ - —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ QueryContext —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
/// </summary>
public class TreeQueryContext<TProps> : QueryContext<TProps> where TProps : class, new()
{
    public long? RootObjectId { get; set; }               // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–µ–≤–æ–º
    public List<TreeFilter> TreeFilters { get; set; }     // –î—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: MaxDepth —Ç–µ–ø–µ—Ä—å –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ QueryContext

    public TreeQueryContext(long schemeId, long? userId, bool checkPermissions, long? rootObjectId, int? maxDepth) 
        : base(schemeId, userId, checkPermissions, null, maxDepth)  // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º maxDepth –≤ –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    {
        RootObjectId = rootObjectId;
        TreeFilters = new List<TreeFilter>();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    /// </summary>
    public new TreeQueryContext<TProps> Clone()
    {
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: MaxDepth —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        var clone = new TreeQueryContext<TProps>(SchemeId, UserId, CheckPermissions, RootObjectId, MaxDepth)
        {
            ParentIds = ParentIds,      // ‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: –∫–æ–ø–∏—Ä—É–µ–º batch –º–∞—Å—Å–∏–≤
            Filter = Filter,
            Orderings = new List<OrderingExpression>(Orderings),
            Limit = Limit,
            Offset = Offset,
            IsDistinct = IsDistinct,
            MaxRecursionDepth = MaxRecursionDepth,
            IsEmpty = IsEmpty           // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∫–æ–ø–∏—Ä—É–µ–º IsEmpty —Ñ–ª–∞–≥ –¥–ª—è TreeQueryContext
        };
        
        // –ö–æ–ø–∏—Ä—É–µ–º –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        clone.TreeFilters = new List<TreeFilter>(TreeFilters);
        return clone;
    }
}

/// <summary>
/// –î—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
/// </summary>
public class TreeFilter
{
    public TreeFilterOperator Operator { get; set; }
    public object? Value { get; set; }
    public int? MaxDepth { get; set; }
    public Dictionary<string, object>? FilterConditions { get; set; }  // –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ç–∏–ø–∞ $hasAncestor

    public TreeFilter(TreeFilterOperator op, object? value = null)
    {
        Operator = op;
        Value = value;
        FilterConditions = new Dictionary<string, object>();
    }
}

/// <summary>
/// –¢–∏–ø—ã –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç SQL –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –∏–∑ search_tree_objects_with_facets)
/// </summary>
public enum TreeFilterOperator
{
    HasAncestor,      // $hasAncestor - –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç—ã —Å –ø—Ä–µ–¥–∫–æ–º —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–º —É—Å–ª–æ–≤–∏—é
    HasDescendant,    // $hasDescendant - –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç—ã —Å –ø–æ—Ç–æ–º–∫–æ–º —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–º —É—Å–ª–æ–≤–∏—é  
    Level,            // $level - —Ñ–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é –≤ –¥–µ—Ä–µ–≤–µ
    IsRoot,           // $isRoot - —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
    IsLeaf,           // $isLeaf - —Ç–æ–ª—å–∫–æ –ª–∏—Å—Ç—å—è
    ChildrenOf,       // $childrenOf - –ø—Ä—è–º—ã–µ –¥–µ—Ç–∏ –æ–±—ä–µ–∫—Ç–∞
    DescendantsOf     // $descendantsOf - –≤—Å–µ –ø–æ—Ç–æ–º–∫–∏ –æ–±—ä–µ–∫—Ç–∞
}
