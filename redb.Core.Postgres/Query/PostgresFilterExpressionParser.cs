using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using redb.Core.Query.QueryExpressions;

namespace redb.Core.Postgres.Query;

/// <summary>
/// –ü–∞—Ä—Å–µ—Ä LINQ –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è PostgreSQL —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
/// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Where —É—Å–ª–æ–≤–∏—è –≤ FilterExpression
/// </summary>
public class PostgresFilterExpressionParser : IFilterExpressionParser
{
    public FilterExpression ParseFilter<TProps>(Expression<Func<TProps, bool>> predicate) where TProps : class
    {
        return VisitExpression(predicate.Body);
    }

    private FilterExpression VisitExpression(Expression expression)
    {
        return expression switch
        {
            BinaryExpression binary => VisitBinaryExpression(binary),
            UnaryExpression unary => VisitUnaryExpression(unary),
            MethodCallExpression method => VisitMethodCallExpression(method),
            ConstantExpression constant when constant.Type == typeof(bool) => 
                VisitConstantBooleanExpression(constant),
            _ => throw new NotSupportedException($"Expression type {expression.NodeType} is not supported")
        };
    }

    private FilterExpression VisitBinaryExpression(BinaryExpression binary)
    {
        switch (binary.NodeType)
        {
            case ExpressionType.AndAlso:
                return new LogicalExpression(
                    LogicalOperator.And,
                    new[] { VisitExpression(binary.Left), VisitExpression(binary.Right) }
                );

            case ExpressionType.OrElse:
                return new LogicalExpression(
                    LogicalOperator.Or,
                    new[] { VisitExpression(binary.Left), VisitExpression(binary.Right) }
                );

            case ExpressionType.Equal:
                return VisitComparisonExpression(binary, ComparisonOperator.Equal);

            case ExpressionType.NotEqual:
                return VisitComparisonExpression(binary, ComparisonOperator.NotEqual);

            case ExpressionType.GreaterThan:
                return VisitComparisonExpression(binary, ComparisonOperator.GreaterThan);

            case ExpressionType.GreaterThanOrEqual:
                return VisitComparisonExpression(binary, ComparisonOperator.GreaterThanOrEqual);

            case ExpressionType.LessThan:
                return VisitComparisonExpression(binary, ComparisonOperator.LessThan);

            case ExpressionType.LessThanOrEqual:
                return VisitComparisonExpression(binary, ComparisonOperator.LessThanOrEqual);

            default:
                throw new NotSupportedException($"Binary operator {binary.NodeType} is not supported");
        }
    }

    private FilterExpression VisitComparisonExpression(BinaryExpression binary, ComparisonOperator op)
    {
        var (property, value) = ExtractPropertyAndValue(binary);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ null
        if (value == null)
        {
            return new NullCheckExpression(property, op == ComparisonOperator.Equal);
        }

        return new ComparisonExpression(property, op, value);
    }

    private FilterExpression VisitUnaryExpression(UnaryExpression unary)
    {
        switch (unary.NodeType)
        {
            case ExpressionType.Not:
                var operand = VisitExpression(unary.Operand);
                return new LogicalExpression(LogicalOperator.Not, new[] { operand });

            default:
                throw new NotSupportedException($"Unary operator {unary.NodeType} is not supported");
        }
    }

    private FilterExpression VisitMethodCallExpression(MethodCallExpression method)
    {
        var methodName = method.Method.Name;
        var declaringType = method.Method.DeclaringType;
        
        // Contains –º–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ

        // String –º–µ—Ç–æ–¥—ã
        if (declaringType == typeof(string))
        {
            return methodName switch
            {
                "Contains" => VisitStringMethodWithComparison(method, ComparisonOperator.Contains, ComparisonOperator.ContainsIgnoreCase),
                "StartsWith" => VisitStringMethodWithComparison(method, ComparisonOperator.StartsWith, ComparisonOperator.StartsWithIgnoreCase),
                "EndsWith" => VisitStringMethodWithComparison(method, ComparisonOperator.EndsWith, ComparisonOperator.EndsWithIgnoreCase),
                _ => throw new NotSupportedException($"String method {methodName} is not supported")
            };
        }

        // Enumerable –º–µ—Ç–æ–¥—ã
        if (declaringType == typeof(Enumerable))
        {
            return methodName switch
            {
                "Contains" => VisitEnumerableContains(method),
                _ => throw new NotSupportedException($"Enumerable method {methodName} is not supported")
            };
        }

        // –ö–æ–ª–ª–µ–∫—Ü–∏–∏ (–º–∞—Å—Å–∏–≤—ã, List<T>, ICollection<T>, etc.)
        if (methodName == "Contains" && method.Object != null)
        {
            var objectType = method.Object.Type;
            
            // üöÄ –ú–ê–°–°–ò–í–´: string[], int[], etc.
            if (objectType.IsArray)
            {
                return VisitCollectionContains(method);
            }
            
            // üìã GENERIC –ö–û–õ–õ–ï–ö–¶–ò–ò: List<T>, ICollection<T>, etc.
            if (objectType.IsGenericType)
            {
                var genericDef = objectType.GetGenericTypeDefinition();
                if (genericDef == typeof(List<>) || 
                    genericDef == typeof(IList<>) ||
                    genericDef == typeof(ICollection<>) ||
                    genericDef == typeof(IEnumerable<>) ||
                    objectType.GetInterfaces().Any(i => i.IsGenericType && i.GetGenericTypeDefinition() == typeof(IEnumerable<>)))
                {
                    return VisitCollectionContains(method);
                }
            }
        }

        throw new NotSupportedException($"Method {declaringType?.Name}.{methodName} is not supported");
    }

    /// <summary>
    /// üéØ –ó–ê–ö–ê–ó–ß–ò–ö–û–í–ê –°–ï–ú–ê–ù–¢–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π StringComparison
    /// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: r.Article.Contains(filter, StringComparison.OrdinalIgnoreCase)
    /// </summary>
    private FilterExpression VisitStringMethodWithComparison(MethodCallExpression method, ComparisonOperator caseSensitiveOp, ComparisonOperator ignoreCaseOp)
    {
        if (method.Object == null)
            throw new ArgumentException("String method must have an object instance");

        var property = ExtractProperty(method.Object);
        var value = EvaluateExpression(method.Arguments[0]);

        // üöÄ –ü–†–û–í–ï–†–Ø–ï–ú –ö–û–õ–ò–ß–ï–°–¢–í–û –ê–†–ì–£–ú–ï–ù–¢–û–í
        if (method.Arguments.Count == 1)
        {
            // –û–±—ã—á–Ω–∞—è –≤–µ—Ä—Å–∏—è: Contains(value) - —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return new ComparisonExpression(property, caseSensitiveOp, value);
        }
        else if (method.Arguments.Count == 2)
        {
            // üéØ –ó–ê–ö–ê–ó–ß–ò–ö–û–í–ê –í–ï–†–°–ò–Ø: Contains(value, StringComparison)
            var comparisonArg = method.Arguments[1];
            var stringComparison = EvaluateStringComparison(comparisonArg);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ StringComparison
            var finalOperator = IsIgnoreCaseComparison(stringComparison) ? ignoreCaseOp : caseSensitiveOp;
            
            return new ComparisonExpression(property, finalOperator, value);
        }
        else
        {
            throw new NotSupportedException($"String method with {method.Arguments.Count} arguments is not supported");
        }
    }

    /// <summary>
    /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ StringComparison –∏–∑ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    /// </summary>
    private StringComparison EvaluateStringComparison(Expression comparisonExpression)
    {
        var value = EvaluateExpression(comparisonExpression);
        
        if (value is StringComparison comparison)
        {
            return comparison;
        }
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return StringComparison.Ordinal;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä
    /// </summary>
    private bool IsIgnoreCaseComparison(StringComparison comparison)
    {
        return comparison switch
        {
            StringComparison.CurrentCultureIgnoreCase => true,
            StringComparison.InvariantCultureIgnoreCase => true,
            StringComparison.OrdinalIgnoreCase => true,
            _ => false
        };
    }

    private FilterExpression VisitEnumerableContains(MethodCallExpression method)
    {
        // Enumerable.Contains(source, value)
        if (method.Arguments.Count != 2)
            throw new ArgumentException("Contains method must have exactly 2 arguments");

        var sourceExpression = method.Arguments[0];
        var valueExpression = method.Arguments[1];

        // üîç –°–õ–£–ß–ê–ô 1: source.Contains(property) - property IN source
        if (IsPropertyAccess(valueExpression))
        {
            var property = ExtractProperty(valueExpression);
            var values = EvaluateExpression(sourceExpression);

            if (values is System.Collections.IEnumerable enumerable)
            {
                var valuesList = enumerable.Cast<object>().ToList();
                return new InExpression(property, valuesList);
            }
        }
        // üöÄ –°–õ–£–ß–ê–ô 2: source.Contains(value) –≥–¥–µ source=property (–ú–ê–°–°–ò–í–´!)
        else if (IsPropertyAccess(sourceExpression))
        {
            // Enumerable.Contains(p.Tags1, "senior") ‚Üí p.Tags1 ArrayContains "senior"
            var arrayProperty = ExtractProperty(sourceExpression);
            var value = EvaluateExpression(valueExpression);
            
            // ArrayContains –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
            
            // üéØ –≠–¢–û –ú–ê–°–°–ò–í - –∏—Å–ø–æ–ª—å–∑—É–µ–º ArrayContains
            return new ComparisonExpression(arrayProperty, ComparisonOperator.ArrayContains, value);
        }

        throw new NotSupportedException("Unsupported Contains expression structure");
    }

    private FilterExpression VisitConstantBooleanExpression(ConstantExpression constant)
    {
        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–µ boolean –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (true/false)
        var value = (bool)constant.Value!;
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—Å–µ–≥–¥–∞ –∏—Å—Ç–∏–Ω–Ω–æ –∏–ª–∏ –ª–æ–∂–Ω–æ
        // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —É—Å–ª–æ–≤–∏–π —Ç–∏–ø–∞ Where(x => true) –∏–ª–∏ Where(x => false)
        var dummyProperty = new redb.Core.Query.QueryExpressions.PropertyInfo("__constant", typeof(bool));
        return new ComparisonExpression(dummyProperty, ComparisonOperator.Equal, value);
    }

    private (redb.Core.Query.QueryExpressions.PropertyInfo Property, object? Value) ExtractPropertyAndValue(BinaryExpression binary)
    {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ - —Å–≤–æ–π—Å—Ç–≤–æ, –∞ –∫–∞–∫–∞—è - –∑–Ω–∞—á–µ–Ω–∏–µ
        if (IsPropertyAccess(binary.Left))
        {
            var property = ExtractProperty(binary.Left);
            var value = EvaluateExpression(binary.Right);
            return (property, value);
        }
        else if (IsPropertyAccess(binary.Right))
        {
            var property = ExtractProperty(binary.Right);
            var value = EvaluateExpression(binary.Left);
            return (property, value);
        }
        else
        {
            throw new NotSupportedException("At least one side of comparison must be a property access");
        }
    }

    private bool IsPropertyAccess(Expression expression)
    {
        return expression is MemberExpression member && member.Member is System.Reflection.PropertyInfo;
    }

    /// <summary>
    /// üéØ –ó–ê–ö–ê–ó–ß–ò–ö–û–í–ê –°–ï–ú–ê–ù–¢–ò–ö–ê: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π nullable –ø–æ–ª–µ–π (r.Auction.Costs)
    /// </summary>
    private redb.Core.Query.QueryExpressions.PropertyInfo ExtractProperty(Expression expression)
    {
        if (expression is MemberExpression member && member.Member is System.Reflection.PropertyInfo propInfo)
        {
            // üöÄ –ü–û–î–î–ï–†–ñ–ö–ê –í–õ–û–ñ–ï–ù–ù–´–• –ü–û–õ–ï–ô –¥–ª—è nullable –æ–±—ä–µ–∫—Ç–æ–≤
            var fullPath = BuildPropertyPath(member);
            return new redb.Core.Query.QueryExpressions.PropertyInfo(fullPath, propInfo.PropertyType);
        }

        throw new ArgumentException($"Expression must be a property access, got {expression.GetType().Name}");
    }

    /// <summary>
    /// üéØ –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è nullable –ø–æ–ª–µ–π (Auction.Costs)
    /// </summary>
    private string BuildPropertyPath(MemberExpression memberExpression)
    {
        var pathParts = new List<string>();
        var current = memberExpression;

        // –û–±—Ö–æ–¥–∏–º —Ü–µ–ø–æ—á–∫—É —Å–≤–æ–π—Å—Ç–≤ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
        while (current != null && current.Member is System.Reflection.PropertyInfo)
        {
            pathParts.Add(current.Member.Name);
            
            if (current.Expression is MemberExpression parentMember)
            {
                current = parentMember;
            }
            else
            {
                // –î–æ—à–ª–∏ –¥–æ –∫–æ—Ä–Ω—è (–ø–∞—Ä–∞–º–µ—Ç—Ä–∞ r)
                break;
            }
        }

        // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ (–±—ã–ª —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö, –Ω—É–∂–µ–Ω —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
        pathParts.Reverse();
        
        // –î–ª—è —Å–ª—É—á–∞—è r.Auction.Costs –ø–æ–ª—É—á–∞–µ–º "Auction.Costs"
        return string.Join(".", pathParts);
    }

    private object? EvaluateExpression(Expression expression)
    {
        // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
        if (expression is ConstantExpression constant)
        {
            return constant.Value;
        }

        // –î–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º lambda
        var lambda = Expression.Lambda(expression);
        var compiled = lambda.Compile();
        return compiled.DynamicInvoke();
    }

    private FilterExpression VisitCollectionContains(MethodCallExpression method)
    {
        // VisitCollectionContains –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ collection.Contains(value)
        
        // collection.Contains(value)
        if (method.Arguments.Count != 1)
            throw new ArgumentException("Collection Contains method must have exactly 1 argument");

        var collectionExpression = method.Object!;
        var valueExpression = method.Arguments[0];
        
        // –ê–Ω–∞–ª–∏–∑ Collection.Contains() –≤—ã—Ä–∞–∂–µ–Ω–∏—è

        // üîç –°–õ–£–ß–ê–ô 1: collection.Contains(property) - property IN collection
        if (IsPropertyAccess(valueExpression))
        {
            var property = ExtractProperty(valueExpression);
            var values = EvaluateExpression(collectionExpression);

            if (values is System.Collections.IEnumerable enumerable)
            {
                var valuesList = enumerable.Cast<object>().ToList();
                return new InExpression(property, valuesList);
            }
            else
            {
                throw new ArgumentException("Collection expression must evaluate to IEnumerable");
            }
        }
        // üöÄ –°–õ–£–ß–ê–ô 2: property.Contains(value) - value IN property (–ú–ê–°–°–ò–í–´!)
        else if (IsPropertyAccess(collectionExpression))
        {
            var arrayProperty = ExtractProperty(collectionExpression);
            var value = EvaluateExpression(valueExpression);
            
            // üéØ –≠–¢–û –ú–ê–°–°–ò–í - –∏—Å–ø–æ–ª—å–∑—É–µ–º ArrayContains
            return new ComparisonExpression(arrayProperty, ComparisonOperator.ArrayContains, value);
        }
        else
        {
            throw new NotSupportedException("Unsupported Contains expression structure");
        }
    }
}
