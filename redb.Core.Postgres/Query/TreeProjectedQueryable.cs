using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using redb.Core.Models.Entities;
using redb.Core.Query;

namespace redb.Core.Postgres.Query;

/// <summary>
/// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ü–∏–π –¥–ª—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö LINQ-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ REDB
/// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è TreeRedbObject<TProps>
/// </summary>
public class TreeProjectedQueryable<TProps, TResult> : IRedbProjectedQueryable<TResult>
    where TProps : class, new()
{
    private readonly ITreeQueryable<TProps> _sourceQuery;
    private readonly Expression<Func<TreeRedbObject<TProps>, TResult>> _projection;
    
    // –¶–µ–ø–æ—á–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–æ–µ–∫—Ü–∏–∏
    private readonly List<Expression<Func<TResult, bool>>> _wherePredicates = new();
    private readonly List<(Expression KeySelector, bool IsDescending)> _orderByExpressions = new();

    public TreeProjectedQueryable(
        ITreeQueryable<TProps> sourceQuery,
        Expression<Func<TreeRedbObject<TProps>, TResult>> projection)
    {
        _sourceQuery = sourceQuery;
        _projection = projection;
    }
    
    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ø–∏–π —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    private TreeProjectedQueryable(
        ITreeQueryable<TProps> sourceQuery,
        Expression<Func<TreeRedbObject<TProps>, TResult>> projection,
        List<Expression<Func<TResult, bool>>> wherePredicates,
        List<(Expression KeySelector, bool IsDescending)> orderByExpressions)
    {
        _sourceQuery = sourceQuery;
        _projection = projection;
        _wherePredicates = new List<Expression<Func<TResult, bool>>>(wherePredicates);
        _orderByExpressions = new List<(Expression, bool)>(orderByExpressions);
    }

    public IRedbProjectedQueryable<TResult> Where(Expression<Func<TResult, bool>> predicate)
    {
        if (predicate == null)
            throw new ArgumentNullException(nameof(predicate));
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ —Ü–µ–ø–æ—á–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–π
        var newWherePredicates = new List<Expression<Func<TResult, bool>>>(_wherePredicates) { predicate };
        
        return new TreeProjectedQueryable<TProps, TResult>(
            _sourceQuery,
            _projection, 
            newWherePredicates, 
            _orderByExpressions);
    }

    public IRedbProjectedQueryable<TResult> OrderBy<TKey>(Expression<Func<TResult, TKey>> keySelector)
    {
        if (keySelector == null)
            throw new ArgumentNullException(nameof(keySelector));
        
        // –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        var newOrderByExpressions = new List<(Expression, bool)> { (keySelector, false) };
        
        return new TreeProjectedQueryable<TProps, TResult>(
            _sourceQuery,
            _projection,
            _wherePredicates,
            newOrderByExpressions);
    }

    public IRedbProjectedQueryable<TResult> OrderByDescending<TKey>(Expression<Func<TResult, TKey>> keySelector)
    {
        if (keySelector == null)
            throw new ArgumentNullException(nameof(keySelector));
        
        // –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        var newOrderByExpressions = new List<(Expression, bool)> { (keySelector, true) };
        
        return new TreeProjectedQueryable<TProps, TResult>(
            _sourceQuery,
            _projection,
            _wherePredicates,
            newOrderByExpressions);
    }

    public IRedbProjectedQueryable<TResult> Take(int count)
    {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º Take –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        var limitedSource = (ITreeQueryable<TProps>)_sourceQuery.Take(count);
        return new TreeProjectedQueryable<TProps, TResult>(limitedSource, _projection, _wherePredicates, _orderByExpressions);
    }

    public IRedbProjectedQueryable<TResult> Skip(int count)
    {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º Skip –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        var skippedSource = (ITreeQueryable<TProps>)_sourceQuery.Skip(count);
        return new TreeProjectedQueryable<TProps, TResult>(skippedSource, _projection, _wherePredicates, _orderByExpressions);
    }

    public IRedbProjectedQueryable<TResult> Distinct()
    {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º Distinct –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        var distinctSource = (ITreeQueryable<TProps>)_sourceQuery.Distinct();
        return new TreeProjectedQueryable<TProps, TResult>(distinctSource, _projection, _wherePredicates, _orderByExpressions);
    }

    public async Task<List<TResult>> ToListAsync()
    {
        // üö® –ö–†–ò–¢–ò–ß–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò - –í–°–ï –í –ü–ê–ú–Ø–¢–ò! 
        // TODO: –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ SQL-based –ø—Ä–æ–µ–∫—Ü–∏–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        // ‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç—ã –ö –ò–°–•–û–î–ù–û–ú–£ –ó–ê–ü–†–û–°–£ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        var optimizedSourceQuery = _sourceQuery;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ü–∏—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ - –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç—ã
        if (!_wherePredicates.Any() && !_orderByExpressions.Any())
        {
            // –ü—Ä–æ–µ–∫—Ü–∏—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –ª–∏–º–∏—Ç—ã
            var fullObjects = await optimizedSourceQuery.ToListAsync();
            var simpleProjection = _projection.Compile();
            return fullObjects.Select(redbObj => simpleProjection(redbObj)).ToList();
        }
        
        // üêå FALLBACK: –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
        // –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö!
        var allObjects = await optimizedSourceQuery.ToListAsync();
        var complexProjection = _projection.Compile();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ü–∏—é –∫ –∫–∞–∂–¥–æ–º—É –æ–±—ä–µ–∫—Ç—É
        var projectedResults = allObjects.Select(redbObj => complexProjection(redbObj));
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º Where —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ—Å–ª–µ –ø—Ä–æ–µ–∫—Ü–∏–∏
        foreach (var wherePredicate in _wherePredicates)
        {
            var compiledWhere = wherePredicate.Compile();
            projectedResults = projectedResults.Where(compiledWhere);
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–µ–∫—Ü–∏–∏
        IOrderedEnumerable<TResult>? orderedResults = null;
        foreach (var (keySelector, isDescending) in _orderByExpressions)
        {
            // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º expression –≤ delegate
            var compiledKeySelector = ((LambdaExpression)keySelector).Compile();
            
            if (orderedResults == null)
            {
                // –ü–µ—Ä–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                orderedResults = isDescending 
                    ? projectedResults.OrderByDescending(item => compiledKeySelector.DynamicInvoke(item))
                    : projectedResults.OrderBy(item => compiledKeySelector.DynamicInvoke(item));
            }
            else
            {
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                orderedResults = isDescending 
                    ? orderedResults.ThenByDescending(item => compiledKeySelector.DynamicInvoke(item))
                    : orderedResults.ThenBy(item => compiledKeySelector.DynamicInvoke(item));
            }
        }
        
        var finalResults = orderedResults?.AsEnumerable() ?? projectedResults;
        return finalResults.ToList();
    }

    public async Task<int> CountAsync()
    {
        var results = await ToListAsync();
        return results.Count;
    }

    public async Task<TResult?> FirstOrDefaultAsync()
    {
        var results = await ToListAsync();
        return results.FirstOrDefault();
    }
}
