using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using Microsoft.Extensions.Logging;
using redb.Core.Query.FacetFilters;
using redb.Core.Query.QueryExpressions;

namespace redb.Core.Postgres.Query;

/// <summary>
/// –ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å JSON —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ search_objects_with_facets
/// –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–π –ø–∞—Ä–∞–¥–∏–≥–º—ã - 25+ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, nullable –ø–æ–ª—è, Class –ø–æ–ª—è, –º–∞—Å—Å–∏–≤—ã
/// </summary>
public class PostgresFacetFilterBuilder : IFacetFilterBuilder
{
    private readonly JsonSerializerOptions _jsonOptions;
    private readonly ILogger? _logger;

    public PostgresFacetFilterBuilder(ILogger? logger = null)
    {
        _logger = logger;
        _jsonOptions = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            WriteIndented = false,
            Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
        };
    }

    public string BuildFacetFilters(FilterExpression? filter)
    {
        if (filter == null)
        {
            _logger?.LogDebug("LINQ Filter: No filter provided, returning empty filter: {{}}");
            return "{}";
        }

        var filterObject = BuildFilterObject(filter);
        var filterJson = JsonSerializer.Serialize(filterObject, _jsonOptions);
        
        _logger?.LogDebug("LINQ Filter Generated: {FilterJson}", filterJson);
        return filterJson;
    }

    public string BuildOrderBy(IReadOnlyList<OrderingExpression> orderings)
    {
        if (!orderings.Any())
        {
            _logger?.LogDebug("LINQ OrderBy: No ordering provided, returning empty array: []");
            return "[]";
        }

        var orderArray = orderings.Select(o => new Dictionary<string, string>
        {
            [o.Property.Name] = o.Direction == SortDirection.Ascending ? "asc" : "desc"
        }).ToArray();

        var orderJson = JsonSerializer.Serialize(orderArray, _jsonOptions);
        _logger?.LogDebug("LINQ OrderBy Generated: {OrderJson}", orderJson);
        return orderJson;
    }

    public QueryParameters BuildQueryParameters(int? limit = null, int? offset = null)
    {
        return new QueryParameters(limit, offset);
    }

    private object BuildFilterObject(FilterExpression filter)
    {
        return filter switch
        {
            ComparisonExpression comparison => BuildComparisonFilter(comparison),
            LogicalExpression logical => BuildLogicalFilter(logical),
            NullCheckExpression nullCheck => BuildNullCheckFilter(nullCheck),
            InExpression inExpr => BuildInFilter(inExpr),
            _ => throw new NotSupportedException($"Filter expression type {filter.GetType().Name} is not supported")
        };
    }

    private object BuildComparisonFilter(ComparisonExpression comparison)
    {
        var fieldName = BuildFieldPath(comparison.Property);
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ö–µ–º—ã –ø–æ–ª—è!
        var originalValue = comparison.Value;
        var value = ConvertValueToFieldType(comparison.Value, comparison.Property.Type);
        
        // üîç –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø –¢–ò–ü–û–í
        _logger?.LogInformation($"üîç TYPE CONVERSION: Field '{comparison.Property.Name}' (Type: {comparison.Property.Type.Name})");
        _logger?.LogInformation($"   üì• Original value: {originalValue} ({originalValue?.GetType().Name ?? "null"})");
        _logger?.LogInformation($"   üì§ Converted value: {value} ({value?.GetType().Name ?? "null"})");
        _logger?.LogInformation($"   üéØ Operator: {comparison.Operator}");

        // üîç –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø EQUALITY
        if (comparison.Operator == ComparisonOperator.Equal)
        {
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï JSON –°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–ò: –î–ª—è Double —Ç–∏–ø–æ–≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ  
            var finalValue = value;
            if (comparison.Property.Type == typeof(double) || comparison.Property.Type == typeof(double?))
            {
                if (value is double doubleVal && doubleVal == Math.Floor(doubleVal))
                {
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 2000.0 –≤ "2000.0" —á—Ç–æ–±—ã SQL –ø–æ–Ω–∏–º–∞–ª —á—Ç–æ —ç—Ç–æ Double
                    finalValue = doubleVal.ToString("F1", System.Globalization.CultureInfo.InvariantCulture);  // 2000 ‚Üí "2000.0"
                    _logger?.LogInformation($"   üîß FIXED: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º double string: {finalValue}");
                }
            }
            
            var result = new Dictionary<string, object>
            {
                [fieldName] = new Dictionary<string, object?> { ["$eq"] = finalValue }
            };
            
            // üîç –õ–û–ì–ò–†–£–ï–ú –ò–¢–û–ì–û–í–´–ô JSON –§–ò–õ–¨–¢–†  
            _logger?.LogInformation($"   üìã Generated filter: {{{fieldName}: {{\"$eq\": {finalValue}}}}}");
            return result;
        }
        
        return comparison.Operator switch
        {
            ComparisonOperator.NotEqual => new Dictionary<string, object> 
            { 
                [fieldName] = new Dictionary<string, object?> { ["$ne"] = value } 
            },
            ComparisonOperator.GreaterThan => new Dictionary<string, object> 
            { 
                [fieldName] = new Dictionary<string, object?> { ["$gt"] = value } 
            },
            ComparisonOperator.GreaterThanOrEqual => new Dictionary<string, object> 
            { 
                [fieldName] = new Dictionary<string, object?> { ["$gte"] = value } 
            },
            ComparisonOperator.LessThan => new Dictionary<string, object> 
            { 
                [fieldName] = new Dictionary<string, object?> { ["$lt"] = value } 
            },
            ComparisonOperator.LessThanOrEqual => new Dictionary<string, object> 
            { 
                [fieldName] = new Dictionary<string, object?> { ["$lte"] = value } 
            },
            ComparisonOperator.Contains => BuildContainsFilter(fieldName, value, false),
            ComparisonOperator.ContainsIgnoreCase => BuildContainsFilter(fieldName, value, true),
            ComparisonOperator.StartsWith => new Dictionary<string, object> 
            { 
                [fieldName] = new Dictionary<string, object?> { ["$startsWith"] = value } 
            },
            ComparisonOperator.StartsWithIgnoreCase => new Dictionary<string, object> 
            { 
                [fieldName] = new Dictionary<string, object?> { ["$startsWithIgnoreCase"] = value } 
            },
            ComparisonOperator.EndsWith => new Dictionary<string, object> 
            { 
                [fieldName] = new Dictionary<string, object?> { ["$endsWith"] = value } 
            },
            ComparisonOperator.EndsWithIgnoreCase => new Dictionary<string, object> 
            { 
                [fieldName] = new Dictionary<string, object?> { ["$endsWithIgnoreCase"] = value } 
            },
            
            // üéØ NULL –°–ï–ú–ê–ù–¢–ò–ö–ê
            ComparisonOperator.Exists => new Dictionary<string, object> 
            { 
                [fieldName] = new Dictionary<string, object> { ["$exists"] = value } 
            },
            // üöÄ –ë–ê–ó–û–í–´–ï –û–ü–ï–†–ê–¢–û–†–´ –ú–ê–°–°–ò–í–û–í
            ComparisonOperator.ArrayContains => BuildArrayFilter(fieldName, "$arrayContains", value),
            ComparisonOperator.ArrayAny => BuildArrayFilter(fieldName, "$arrayAny", true),
            ComparisonOperator.ArrayEmpty => BuildArrayFilter(fieldName, "$arrayEmpty", true),
            ComparisonOperator.ArrayCount => BuildArrayFilter(fieldName, "$arrayCount", value),
            ComparisonOperator.ArrayCountGt => BuildArrayFilter(fieldName, "$arrayCountGt", value),
            ComparisonOperator.ArrayCountGte => BuildArrayFilter(fieldName, "$arrayCountGte", value),
            ComparisonOperator.ArrayCountLt => BuildArrayFilter(fieldName, "$arrayCountLt", value),
            ComparisonOperator.ArrayCountLte => BuildArrayFilter(fieldName, "$arrayCountLte", value),
            
            // üéØ –ü–û–ó–ò–¶–ò–û–ù–ù–´–ï –û–ü–ï–†–ê–¢–û–†–´ –ú–ê–°–°–ò–í–û–í
            ComparisonOperator.ArrayAt => BuildArrayFilter(fieldName, "$arrayAt", value),
            ComparisonOperator.ArrayFirst => BuildArrayFilter(fieldName, "$arrayFirst", value),
            ComparisonOperator.ArrayLast => BuildArrayFilter(fieldName, "$arrayLast", value),
            
            // üîç –ü–û–ò–°–ö–û–í–´–ï –û–ü–ï–†–ê–¢–û–†–´ –ú–ê–°–°–ò–í–û–í
            ComparisonOperator.ArrayStartsWith => BuildArrayFilter(fieldName, "$arrayStartsWith", value),
            ComparisonOperator.ArrayEndsWith => BuildArrayFilter(fieldName, "$arrayEndsWith", value),
            ComparisonOperator.ArrayMatches => BuildArrayFilter(fieldName, "$arrayMatches", value),
            
            // üìà –ê–ì–†–ï–ì–ê–¶–ò–û–ù–ù–´–ï –û–ü–ï–†–ê–¢–û–†–´ –ú–ê–°–°–ò–í–û–í
            ComparisonOperator.ArraySum => BuildArrayFilter(fieldName, "$arraySum", value),
            ComparisonOperator.ArrayAvg => BuildArrayFilter(fieldName, "$arrayAvg", value),
            ComparisonOperator.ArrayMin => BuildArrayFilter(fieldName, "$arrayMin", value),
            ComparisonOperator.ArrayMax => BuildArrayFilter(fieldName, "$arrayMax", value),
            _ => throw new NotSupportedException($"Comparison operator {comparison.Operator} is not supported")
        };
    }

    private object BuildLogicalFilter(LogicalExpression logical)
    {
        return logical.Operator switch
        {
            LogicalOperator.And => BuildAndFilter(logical.Operands),
            LogicalOperator.Or => new Dictionary<string, object> 
            { 
                ["$or"] = logical.Operands.Select(BuildFilterObject).ToArray() 
            },
            LogicalOperator.Not => new Dictionary<string, object> 
            { 
                ["$not"] = BuildFilterObject(logical.Operands.First()) 
            },
            _ => throw new NotSupportedException($"Logical operator {logical.Operator} is not supported")
        };
    }

    private object BuildAndFilter(IReadOnlyList<FilterExpression> operands)
    {
        // –î–ª—è AND –º—ã –º–æ–∂–µ–º –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç
        // –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º $and
        var result = new Dictionary<string, object>();

        foreach (var operand in operands)
        {
            var filterObj = BuildFilterObject(operand);
            
            if (filterObj is Dictionary<string, object> dict)
            {
                foreach (var kvp in dict)
                {
                    if (result.ContainsKey(kvp.Key))
                    {
                        // –ö–æ–Ω—Ñ–ª–∏–∫—Ç –∫–ª—é—á–µ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º $and
                        return new Dictionary<string, object>
                        {
                            ["$and"] = operands.Select(BuildFilterObject).ToArray()
                        };
                    }
                    result[kvp.Key] = kvp.Value;
                }
            }
            else
            {
                // –°–ª–æ–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º $and
                return new Dictionary<string, object>
                {
                    ["$and"] = operands.Select(BuildFilterObject).ToArray()
                };
            }
        }

        return result;
    }

    private object BuildNullCheckFilter(NullCheckExpression nullCheck)
    {
        var fieldName = BuildFieldPath(nullCheck.Property);
        
        if (nullCheck.IsNull)
        {
            // üéØ –û–ü–¢–ò–ú–ê–õ–¨–ù–ê–Ø NULL –°–ï–ú–ê–ù–¢–ò–ö–ê - –ø–æ–ª–µ –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ _values
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º $exists: false –¥–ª—è —è–≤–Ω–æ—Å—Ç–∏
            return new Dictionary<string, object> 
            { 
                [fieldName] = new Dictionary<string, object> { ["$exists"] = false } 
            };
        }
        else
        {
            // üéØ –û–ü–¢–ò–ú–ê–õ–¨–ù–ê–Ø NULL –°–ï–ú–ê–ù–¢–ò–ö–ê - –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –Ω–µ-NULL –∑–Ω–∞—á–µ–Ω–∏–µ–º
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π $ne null, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            return new Dictionary<string, object> 
            { 
                [fieldName] = new Dictionary<string, object?> { ["$ne"] = null } 
            };
        }
    }

    private object BuildInFilter(InExpression inExpr)
    {
        var fieldName = BuildFieldPath(inExpr.Property);
        
        return new Dictionary<string, object> 
        { 
            [fieldName] = new Dictionary<string, object> { ["$in"] = inExpr.Values.ToArray() } 
        };
    }

    // ===== üöÄ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ù–û–í–û–ô –ü–ê–†–ê–î–ò–ì–ú–´ =====

    /// <summary>
    /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—É—Ç–∏ –ø–æ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Class –ø–æ–ª–µ–π (Contact.Name, Contacts[].Email)
    /// </summary>
    private string BuildFieldPath(redb.Core.Query.QueryExpressions.PropertyInfo property)
    {
        var fieldPath = property.Name;
        
        // üéØ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –¢–ò–ü –ü–û–õ–Ø –î–õ–Ø CLASS –ü–û–õ–ï–ô
        if (IsClassField(property))
        {
            // Class –ø–æ–ª–µ: Contact.Name, Address.City
            return fieldPath; // –ü–æ–ª–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞
        }
        
        if (IsClassArrayField(property))
        {
            // Class –º–∞—Å—Å–∏–≤: Contacts[].Email, Addresses[].Street
            return fieldPath; // –ü–æ–ª–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –æ—Ç –ø–∞—Ä—Å–µ—Ä–∞  
        }
        
        if (IsCollectionType(property.Type))
        {
            // –û–±—ã—á–Ω—ã–π –º–∞—Å—Å–∏–≤: Tags[], Scores[], Categories[]
            if (!fieldPath.EndsWith("[]"))
            {
                return fieldPath + "[]";
            }
        }
        
        // –û–±—ã—á–Ω–æ–µ –ø–æ–ª–µ: Name, Age, Status
        return fieldPath;
    }

    /// <summary>
    /// üéØ –ó–ê–ö–ê–ó–ß–ò–ö–û–í–ê –°–ï–ú–ê–ù–¢–ò–ö–ê: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ Contains —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –ø–æ–∏—Å–∫–∞
    /// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: r.Article.Contains(filter, StringComparison.OrdinalIgnoreCase)
    /// </summary>
    private object BuildContainsFilter(string fieldName, object? value, bool ignoreCase)
    {
        if (ignoreCase)
        {
            // üöÄ –†–ï–ì–ò–°–¢–†–û–ù–ï–ó–ê–í–ò–°–ò–ú–´–ô –ü–û–ò–°–ö
            return new Dictionary<string, object> 
            { 
                [fieldName] = new Dictionary<string, object?> { ["$containsIgnoreCase"] = value } 
            };
        }
        else
        {
            // üìù –û–ë–´–ß–ù–´–ô –ü–û–ò–°–ö –° –£–ß–ï–¢–û–ú –†–ï–ì–ò–°–¢–†–ê
            return new Dictionary<string, object> 
            { 
                [fieldName] = new Dictionary<string, object?> { ["$contains"] = value } 
            };
        }
    }

    /// <summary>
    /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π nullable
    /// </summary>
    private object BuildArrayFilter(string fieldName, string operatorName, object? value, bool isNullable = false)
    {
        // üîß –ò–°–ü–†–ê–í–õ–Ø–ï–ú –î–í–û–ô–ù–´–ï –°–ö–û–ë–ö–ò - –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º "[]" –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
        var arrayFieldName = fieldName.EndsWith("[]") ? fieldName : fieldName + "[]";
        
        if (isNullable && value == null)
        {
            // Nullable –º–∞—Å—Å–∏–≤ - –∏—â–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –º–∞—Å—Å–∏–≤–∞
            return new Dictionary<string, object> 
            { 
                [arrayFieldName] = new Dictionary<string, object> { ["$exists"] = false }
            };
        }
        
        return new Dictionary<string, object> 
        { 
            [arrayFieldName] = new Dictionary<string, object?> { [operatorName] = value } 
        };
    }

    /// <summary>
    /// üéØ –ó–ê–ö–ê–ó–ß–ò–ö–û–í–ê–Ø –°–ï–ú–ê–ù–¢–ò–ö–ê: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è nullable –ø–æ–ª–µ–π
    /// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: r.Auction != null && r.Auction.Costs > 100
    /// </summary>
    private object BuildNullableFieldFilter(string fieldName, object? value, ComparisonOperator op)
    {
        if (value == null)
        {
            // Nullable –ø–æ–ª–µ —Å null –∑–Ω–∞—á–µ–Ω–∏–µ–º
            switch (op)
            {
                case ComparisonOperator.Equal:
                    // field == null ‚Üí –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                    return new Dictionary<string, object> 
                    { 
                        [fieldName] = new Dictionary<string, object> { ["$exists"] = false } 
                    };
                    
                case ComparisonOperator.NotEqual:
                    // field != null ‚Üí –ø–æ–ª–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å –ª—é–±—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º  
                    return new Dictionary<string, object> 
                    { 
                        [fieldName] = new Dictionary<string, object> { ["$exists"] = true } 
                    };
                    
                default:
                    throw new NotSupportedException($"Operator {op} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è nullable –ø–æ–ª—è —Å null –∑–Ω–∞—á–µ–Ω–∏–µ–º");
            }
        }
        
        // Nullable –ø–æ–ª–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º - –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
        var operatorName = op switch
        {
            ComparisonOperator.Equal => "=",
            ComparisonOperator.NotEqual => "$ne", 
            ComparisonOperator.GreaterThan => "$gt",
            ComparisonOperator.GreaterThanOrEqual => "$gte",
            ComparisonOperator.LessThan => "$lt", 
            ComparisonOperator.LessThanOrEqual => "$lte",
            ComparisonOperator.Contains => "$contains",
            ComparisonOperator.StartsWith => "$startsWith",
            ComparisonOperator.EndsWith => "$endsWith",
            _ => throw new NotSupportedException($"Operator {op} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è nullable –ø–æ–ª—è")
        };
        
        if (operatorName == "=")
        {
            return new Dictionary<string, object?> { [fieldName] = value };
        }
        
        return new Dictionary<string, object> 
        { 
            [fieldName] = new Dictionary<string, object?> { [operatorName] = value } 
        };
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ nullable —Ç–∏–ø –ø–æ–ª—è
    /// </summary>
    private bool IsNullableType(Type type)
    {
        return type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>);
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Å—Å–∏–≤/–∫–æ–ª–ª–µ–∫—Ü–∏—é
    /// </summary>
    private bool IsCollectionType(Type type)
    {
        if (type == typeof(string)) return false; // string –Ω–µ –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –Ω–∞—à–∏—Ö —Ü–µ–ª–µ–π
        
        return type.IsArray || 
               (type.IsGenericType && (
                   type.GetGenericTypeDefinition() == typeof(List<>) ||
                   type.GetGenericTypeDefinition() == typeof(IList<>) ||
                   type.GetGenericTypeDefinition() == typeof(ICollection<>) ||
                   type.GetGenericTypeDefinition() == typeof(IEnumerable<>)
               ));
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Class –ø–æ–ª–µ (Contact.Name, Address.City)
    /// </summary>
    private bool IsClassField(redb.Core.Query.QueryExpressions.PropertyInfo property)
    {
        // Class –ø–æ–ª–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –Ω–∞–ª–∏—á–∏—é —Ç–æ—á–∫–∏ –≤ –∏–º–µ–Ω–∏ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é [] 
        return property.Name.Contains('.') && !property.Name.Contains("[]");
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Class –º–∞—Å—Å–∏–≤ (Contacts[].Email, Addresses[].Street)
    /// </summary>
    private bool IsClassArrayField(redb.Core.Query.QueryExpressions.PropertyInfo property)
    {
        // Class –º–∞—Å—Å–∏–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –Ω–∞–ª–∏—á–∏—é –∏ —Ç–æ—á–∫–∏ –∏ [] –≤ –∏–º–µ–Ω–∏
        return property.Name.Contains('.') && property.Name.Contains("[]");
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å (–Ω–µ –ø—Ä–∏–º–∏—Ç–∏–≤ –∏ –Ω–µ –∫–æ–ª–ª–µ–∫—Ü–∏—è)
    /// </summary>
    private bool IsBusinessClass(Type type)
    {
        // –ë–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å: –Ω–µ –ø—Ä–∏–º–∏—Ç–∏–≤, –Ω–µ —Å—Ç—Ä–æ–∫–∞, –Ω–µ –∫–æ–ª–ª–µ–∫—Ü–∏—è, –Ω–µ nullable –ø—Ä–∏–º–∏—Ç–∏–≤
        if (type.IsPrimitive || type == typeof(string) || type == typeof(decimal) || 
            type == typeof(DateTime) || type == typeof(Guid))
            return false;
            
        if (IsNullableType(type))
        {
            var underlyingType = Nullable.GetUnderlyingType(type)!;
            return IsBusinessClass(underlyingType);
        }
        
        if (IsCollectionType(type))
            return false;
            
        // –≠—Ç–æ –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å (Address, Contact, etc.)
        return type.IsClass;
    }
    
    /// <summary>
    /// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ ‚Ññ4: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –ø–æ–ª—è
    /// –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∫–æ–≥–¥–∞ Price (double) –∏—â–µ—Ç—Å—è –∫–∞–∫ integer –∑–Ω–∞—á–µ–Ω–∏–µ
    /// </summary>
    private object? ConvertValueToFieldType(object? value, Type fieldType)
    {
        if (value == null) return null;
        
        // –£–±–∏—Ä–∞–µ–º Nullable wrapper –µ—Å–ª–∏ –µ—Å—Ç—å
        var targetType = Nullable.GetUnderlyingType(fieldType) ?? fieldType;
        
        // –ï—Å–ª–∏ —Ç–∏–ø—ã —É–∂–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (value.GetType() == targetType)
            return value;
            
        try
        {
            // ‚úÖ –ß–ò–°–õ–û–í–´–ï –¢–ò–ü–´ - –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã!
            if (targetType == typeof(double))
            {
                return Convert.ToDouble(value);  // 2000 ‚Üí 2000.0
            }
            else if (targetType == typeof(float))
            {
                return Convert.ToSingle(value);
            }
            else if (targetType == typeof(decimal))
            {
                return Convert.ToDecimal(value);
            }
            else if (targetType == typeof(long))
            {
                return Convert.ToInt64(value);
            }
            else if (targetType == typeof(int))
            {
                return Convert.ToInt32(value);
            }
            else if (targetType == typeof(short))
            {
                return Convert.ToInt16(value);
            }
            else if (targetType == typeof(byte))
            {
                return Convert.ToByte(value);
            }
            
            // ‚úÖ –ë–£–õ–ï–í–°–ö–ò–ï –¢–ò–ü–´
            else if (targetType == typeof(bool))
            {
                return Convert.ToBoolean(value);
            }
            
            // ‚úÖ –î–ê–¢–ê-–í–†–ï–ú–Ø
            else if (targetType == typeof(DateTime))
            {
                return Convert.ToDateTime(value);
            }
            
            // ‚úÖ GUID
            else if (targetType == typeof(Guid))
            {
                if (value is string guidStr)
                    return Guid.Parse(guidStr);
                return (Guid)value;
            }
            
            // ‚úÖ –°–¢–†–û–ö–ò
            else if (targetType == typeof(string))
            {
                return value.ToString();
            }
            
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return value;
        }
        catch (Exception ex)
        {
            _logger?.LogWarning($"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ {value} ({value.GetType().Name}) –≤ —Ç–∏–ø {targetType.Name}: {ex.Message}");
            return value; // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        }
    }
}
