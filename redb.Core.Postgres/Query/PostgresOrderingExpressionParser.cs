using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using redb.Core.Query.QueryExpressions;

namespace redb.Core.Postgres.Query;

/// <summary>
/// –ü–∞—Ä—Å–µ—Ä –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è PostgreSQL —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
/// –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ—Ä–Ω–∞—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è nullable –ø–æ–ª–µ–π
/// </summary>
public class PostgresOrderingExpressionParser : IOrderingExpressionParser
{
    public OrderingExpression ParseOrdering<TProps, TKey>(Expression<Func<TProps, TKey>> keySelector, SortDirection direction) where TProps : class
    {
        var property = ExtractProperty(keySelector.Body);
        return new OrderingExpression(property, direction);
    }

    public IReadOnlyList<OrderingExpression> ParseMultipleOrderings<TProps>(IEnumerable<(LambdaExpression KeySelector, SortDirection Direction)> orderings) where TProps : class
    {
        var result = new List<OrderingExpression>();

        foreach (var (keySelector, direction) in orderings)
        {
            var property = ExtractProperty(keySelector.Body);
            result.Add(new OrderingExpression(property, direction));
        }

        return result;
    }

    /// <summary>
    /// üéØ –ó–ê–ö–ê–ó–ß–ò–ö–û–í–ê –°–ï–ú–ê–ù–¢–ò–ö–ê: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ—Ä–Ω–∞—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è nullable –ø–æ–ª–µ–π
    /// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: r.Auction != null ? r.Auction.Baskets : 0
    /// </summary>
    private redb.Core.Query.QueryExpressions.PropertyInfo ExtractProperty(Expression expression)
    {
        return expression switch
        {
            // üöÄ –¢–ï–†–ù–ê–†–ù–´–ô –û–ü–ï–†–ê–¢–û–† (r.Auction != null ? r.Auction.Baskets : 0)
            ConditionalExpression conditional => ExtractFromConditional(conditional),
            
            // üÜï –ë–ò–ù–ê–†–ù–û–ï –í–´–†–ê–ñ–ï–ù–ò–ï (r.Auction != null, r.Field == value)
            BinaryExpression binary => ExtractFromBinaryExpression(binary),
            
            // üìù –û–ë–´–ß–ù–û–ï –°–í–û–ô–°–¢–í–û (r.Name) –∏–ª–∏ –í–õ–û–ñ–ï–ù–ù–û–ï (r.Auction.Baskets)
            MemberExpression member when member.Member is System.Reflection.PropertyInfo propInfo => 
                ExtractFromMemberExpression(member, propInfo),
                
            _ => throw new ArgumentException($"Expression must be a property access, conditional, or binary comparison, got {expression.GetType().Name}")
        };
    }

    /// <summary>
    /// üÜï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (r.Auction != null, r.Field == value)
    /// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ nullable –ø–æ–ª—è–º –∏ –ø–æ–ª—è–º —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    /// </summary>
    private redb.Core.Query.QueryExpressions.PropertyInfo ExtractFromBinaryExpression(BinaryExpression binary)
    {
        // –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ BinaryExpression –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–π—Å—Ç–≤–æ, –Ω–µ –æ–ø–µ—Ä–∞—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        // –ü—Ä–∏–º–µ—Ä—ã:
        // r.Auction != null ‚Üí —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ "Auction" 
        // r.Status == "Active" ‚Üí —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ "Status"
        
        // –ò—â–µ–º MemberExpression –≤ –ª–µ–≤–æ–π –∏–ª–∏ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏
        if (binary.Left is MemberExpression leftMember && leftMember.Member is System.Reflection.PropertyInfo leftProp)
        {
            return ExtractFromMemberExpression(leftMember, leftProp);
        }
        
        if (binary.Right is MemberExpression rightMember && rightMember.Member is System.Reflection.PropertyInfo rightProp)
        {
            return ExtractFromMemberExpression(rightMember, rightProp);
        }
        
        throw new ArgumentException($"Binary expression must have at least one property access side. Got: {binary.Left.GetType().Name} {binary.NodeType} {binary.Right.GetType().Name}");
    }

    /// <summary>
    /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ —Ç–µ—Ä–Ω–∞—Ä–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (r.Auction != null ? r.Auction.Baskets : 0)
    /// </summary>
    private redb.Core.Query.QueryExpressions.PropertyInfo ExtractFromConditional(ConditionalExpression conditional)
    {
        // üéØ –ó–ê–ö–ê–ó–ß–ò–ö–û–í–ê –õ–û–ì–ò–ö–ê: –í —Ç–µ—Ä–Ω–∞—Ä–Ω–æ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ –≥–ª–∞–≤–Ω–æ–µ –ø–æ–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ True-–≤–µ—Ç–∫–µ
        // r.Auction != null ? r.Auction.Baskets : 0
        //                     ^^^^^^^^^^^^^^^^^ - —ç—Ç–æ –Ω–∞—à–µ –ø–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        
        if (conditional.IfTrue is MemberExpression trueMember && 
            trueMember.Member is System.Reflection.PropertyInfo truePropInfo)
        {
            return ExtractFromMemberExpression(trueMember, truePropInfo);
        }
        
        // –ï—Å–ª–∏ True-–≤–µ—Ç–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–æ–º, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ —É—Å–ª–æ–≤–∏—è
        // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª—É—á–∞–π: someCondition ? 0 : r.Field
        if (conditional.IfFalse is MemberExpression falseMember && 
            falseMember.Member is System.Reflection.PropertyInfo falsePropInfo)
        {
            return ExtractFromMemberExpression(falseMember, falsePropInfo);
        }
        
        throw new ArgumentException("Conditional expression must have at least one property access branch");
    }

    /// <summary>
    /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π (r.Auction.Baskets ‚Üí "Auction.Baskets")
    /// </summary>
    private redb.Core.Query.QueryExpressions.PropertyInfo ExtractFromMemberExpression(MemberExpression member, System.Reflection.PropertyInfo propInfo)
    {
        // üöÄ –ü–û–î–î–ï–†–ñ–ö–ê –í–õ–û–ñ–ï–ù–ù–´–• –ü–û–õ–ï–ô –¥–ª—è nullable –æ–±—ä–µ–∫—Ç–æ–≤ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ FilterExpressionParser)
        var fullPath = BuildPropertyPath(member);
        return new redb.Core.Query.QueryExpressions.PropertyInfo(fullPath, propInfo.PropertyType);
    }

    /// <summary>
    /// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è nullable –ø–æ–ª–µ–π (Auction.Baskets)
    /// </summary>
    private string BuildPropertyPath(MemberExpression memberExpression)
    {
        var pathParts = new List<string>();
        var current = memberExpression;

        // –û–±—Ö–æ–¥–∏–º —Ü–µ–ø–æ—á–∫—É —Å–≤–æ–π—Å—Ç–≤ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
        while (current != null && current.Member is System.Reflection.PropertyInfo)
        {
            pathParts.Add(current.Member.Name);
            
            if (current.Expression is MemberExpression parentMember)
            {
                current = parentMember;
            }
            else
            {
                // –î–æ—à–ª–∏ –¥–æ –∫–æ—Ä–Ω—è (–ø–∞—Ä–∞–º–µ—Ç—Ä–∞ r)
                break;
            }
        }

        // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ (–±—ã–ª —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö, –Ω—É–∂–µ–Ω —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
        pathParts.Reverse();
        
        // –î–ª—è —Å–ª—É—á–∞—è r.Auction.Baskets –ø–æ–ª—É—á–∞–µ–º "Auction.Baskets"
        return string.Join(".", pathParts);
    }
}
