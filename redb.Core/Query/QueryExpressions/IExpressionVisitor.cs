using System.Linq.Expressions;

namespace redb.Core.Query.QueryExpressions;

/// <summary>
/// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Expression Tree
/// </summary>
public interface IExpressionVisitor<out TResult>
{
    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    /// </summary>
    TResult Visit(Expression expression);
}

/// <summary>
/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª–µ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏
/// </summary>
public record PropertyInfo(string Name, Type Type);

/// <summary>
/// –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
/// –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–π –ø–∞—Ä–∞–¥–∏–≥–º—ã —Å 25+ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –º–∞—Å—Å–∏–≤–æ–≤
/// </summary>
public enum ComparisonOperator
{
    // üìã –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
    Equal,
    NotEqual,
    GreaterThan,
    GreaterThanOrEqual,
    LessThan,
    LessThanOrEqual,
    Contains,
    ContainsIgnoreCase,     // Contains —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
    StartsWith,
    StartsWithIgnoreCase,   // StartsWith —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
    EndsWith,
    EndsWithIgnoreCase,     // EndsWith —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
    
    // üéØ NULL —Å–µ–º–∞–Ω—Ç–∏–∫–∞  
    Exists,             // $exists - —è–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—è
    
    // üöÄ –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–∞—Å—Å–∏–≤–æ–≤
    ArrayContains,      // $arrayContains - –ø–æ–∏—Å–∫ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤–µ
    ArrayAny,           // $arrayAny - –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º–∞—Å—Å–∏–≤ –Ω–µ –ø—É—Å—Ç–æ–π
    ArrayEmpty,         // $arrayEmpty - –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π
    ArrayCount,         // $arrayCount - —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    ArrayCountGt,       // $arrayCountGt - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ N
    ArrayCountGte,      // $arrayCountGte - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ N
    ArrayCountLt,       // $arrayCountLt - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—å—à–µ N
    ArrayCountLte,      // $arrayCountLte - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ N
    
    // üéØ –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–∞—Å—Å–∏–≤–æ–≤
    ArrayAt,            // $arrayAt - —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    ArrayFirst,         // $arrayFirst - –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
    ArrayLast,          // $arrayLast - –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
    
    // üîç –ü–æ–∏—Å–∫–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–∞—Å—Å–∏–≤–æ–≤ (–¥–ª—è —Å—Ç—Ä–æ–∫)
    ArrayStartsWith,    // $arrayStartsWith - —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞
    ArrayEndsWith,      // $arrayEndsWith - —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è —Å—É—Ñ—Ñ–∏–∫—Å–æ–º
    ArrayMatches,       // $arrayMatches - –ø–æ–∏—Å–∫ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
    
    // üìà –ê–≥—Ä–µ–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–∞—Å—Å–∏–≤–æ–≤
    ArraySum,           // $arraySum - —Å—É–º–º–∞ —á–∏—Å–ª–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    ArrayAvg,           // $arrayAvg - —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ
    ArrayMin,           // $arrayMin - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    ArrayMax            // $arrayMax - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
}

/// <summary>
/// –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
/// </summary>
public enum LogicalOperator
{
    And,
    Or,
    Not
}

/// <summary>
/// –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
/// </summary>
public enum SortDirection
{
    Ascending,
    Descending
}
