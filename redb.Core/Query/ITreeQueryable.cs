using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Threading.Tasks;
using redb.Core.Models.Entities;
using redb.Core.Models.Contracts;

namespace redb.Core.Query;

/// <summary>
/// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö LINQ-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ REDB
/// –†–∞—Å—à–∏—Ä—è–µ—Ç IRedbQueryable –¥–æ–±–∞–≤–ª—è—è –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
/// </summary>
public interface ITreeQueryable<TProps> : IRedbQueryable<TProps> where TProps : class, new()
{
    // ===== –î–†–ï–í–û–í–ò–î–ù–´–ï –§–ò–õ–¨–¢–†–´ =====
    
    /// <summary>
    /// –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–¥–∫–∞–º: –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç—ã —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø—Ä–µ–¥–æ–∫ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–π —É—Å–ª–æ–≤–∏—é
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SQL –æ–ø–µ—Ä–∞—Ç–æ—Ä $hasAncestor
    /// </summary>
    /// <param name="ancestorCondition">–£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–∫–æ–≤</param>
    /// <returns>–ó–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –ø—Ä–µ–¥–∫–∞–º</returns>
    ITreeQueryable<TProps> WhereHasAncestor(Expression<Func<TProps, bool>> ancestorCondition);
    
    /// <summary>
    /// –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ—Ç–æ–º–∫–∞–º: –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç—ã —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø–æ—Ç–æ–º–æ–∫ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–π —É—Å–ª–æ–≤–∏—é  
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SQL –æ–ø–µ—Ä–∞—Ç–æ—Ä $hasDescendant
    /// </summary>
    /// <param name="descendantCondition">–£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–æ–º–∫–æ–≤</param>
    /// <returns>–ó–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –ø–æ—Ç–æ–º–∫–∞–º</returns>
    ITreeQueryable<TProps> WhereHasDescendant(Expression<Func<TProps, bool>> descendantCondition);
    
    /// <summary>
    /// –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é –≤ –¥–µ—Ä–µ–≤–µ
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SQL –æ–ø–µ—Ä–∞—Ç–æ—Ä $level
    /// </summary>
    /// <param name="level">–£—Ä–æ–≤–µ–Ω—å –≤ –¥–µ—Ä–µ–≤–µ (0 = –∫–æ—Ä–µ–Ω—å)</param>
    /// <returns>–ó–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —É—Ä–æ–≤–Ω—é</returns>
    ITreeQueryable<TProps> WhereLevel(int level);
    
    /// <summary>
    /// –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é –≤ –¥–µ—Ä–µ–≤–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SQL –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã $level: {$gt: N}, {$lt: N}, etc.
    /// </summary>
    /// <param name="levelCondition">–£—Å–ª–æ–≤–∏–µ –¥–ª—è —É—Ä–æ–≤–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: level => level > 2)</param>
    /// <returns>–ó–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —É—Å–ª–æ–≤–∏—é —É—Ä–æ–≤–Ω—è</returns>
    ITreeQueryable<TProps> WhereLevel(Expression<Func<int, bool>> levelCondition);
    
    /// <summary>
    /// –¢–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (parent_id IS NULL)
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SQL –æ–ø–µ—Ä–∞—Ç–æ—Ä $isRoot
    /// </summary>
    /// <returns>–ó–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –∫–æ—Ä–Ω–µ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤</returns>
    ITreeQueryable<TProps> WhereRoots();
    
    /// <summary>
    /// –¢–æ–ª—å–∫–æ –ª–∏—Å—Ç—å—è (–æ–±—ä–µ–∫—Ç—ã –±–µ–∑ –¥–µ—Ç–µ–π)
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SQL –æ–ø–µ—Ä–∞—Ç–æ—Ä $isLeaf  
    /// </summary>
    /// <returns>–ó–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –ª–∏—Å—Ç–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤</returns>
    ITreeQueryable<TProps> WhereLeaves();
    
    /// <summary>
    /// –ü—Ä—è–º—ã–µ –¥–µ—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SQL –æ–ø–µ—Ä–∞—Ç–æ—Ä $childrenOf
    /// </summary>
    /// <param name="parentId">ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞</param>
    /// <returns>–ó–∞–ø—Ä–æ—Å –¥–µ—Ç–µ–π –æ–±—ä–µ–∫—Ç–∞</returns>
    ITreeQueryable<TProps> WhereChildrenOf(long parentId);
    
    /// <summary>
    /// –ü—Ä—è–º—ã–µ –¥–µ—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SQL –æ–ø–µ—Ä–∞—Ç–æ—Ä $childrenOf
    /// </summary>
    /// <param name="parentObject">–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç</param>
    /// <returns>–ó–∞–ø—Ä–æ—Å –¥–µ—Ç–µ–π –æ–±—ä–µ–∫—Ç–∞</returns>
    ITreeQueryable<TProps> WhereChildrenOf(IRedbObject parentObject);
    
    /// <summary>
    /// –í—Å–µ –ø–æ—Ç–æ–º–∫–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SQL –æ–ø–µ—Ä–∞—Ç–æ—Ä $descendantsOf
    /// </summary>
    /// <param name="ancestorId">ID –ø—Ä–µ–¥–∫–∞</param>
    /// <param name="maxDepth">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞ (null = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)</param>
    /// <returns>–ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤ –æ–±—ä–µ–∫—Ç–∞</returns>
    ITreeQueryable<TProps> WhereDescendantsOf(long ancestorId, int? maxDepth = null);
    
    /// <summary>
    /// –í—Å–µ –ø–æ—Ç–æ–º–∫–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SQL –æ–ø–µ—Ä–∞—Ç–æ—Ä $descendantsOf  
    /// </summary>
    /// <param name="ancestorObject">–û–±—ä–µ–∫—Ç-–ø—Ä–µ–¥–æ–∫</param>
    /// <param name="maxDepth">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞ (null = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)</param>
    /// <returns>–ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤ –æ–±—ä–µ–∫—Ç–∞</returns>
    ITreeQueryable<TProps> WhereDescendantsOf(IRedbObject ancestorObject, int? maxDepth = null);

    // ===== –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –í–û–ó–í–†–ê–¢–ê –î–†–ï–í–û–í–ò–î–ù–´–• –û–ë–™–ï–ö–¢–û–í =====
    
    /// <summary>
    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    /// </summary>
    /// <returns>–°–ø–∏—Å–æ–∫ TreeRedbObject —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏</returns>
    new Task<List<TreeRedbObject<TProps>>> ToListAsync();
    
    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ null
    /// </summary>
    /// <returns>TreeRedbObject –∏–ª–∏ null</returns>
    new Task<TreeRedbObject<TProps>?> FirstOrDefaultAsync();

    // ===== –î–†–ï–í–û–í–ò–î–ù–û-–°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ =====
    
    /// <summary>
    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω–æ–µ –¥–µ—Ä–µ–≤–æ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–µ—Ç—å–º–∏
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã –∏ –∏—Ö —Å–≤—è–∑–∏ Parent/Children  
    /// </summary>
    /// <param name="maxDepth">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–µ–π</param>
    /// <returns>–°–ø–∏—Å–æ–∫ –∫–æ—Ä–Ω–µ–≤—ã—Ö TreeRedbObject —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–µ—Ç—å–º–∏</returns>
    Task<List<TreeRedbObject<TProps>>> ToTreeListAsync(int maxDepth = 10);
    
    /// <summary>
    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤  
    /// –ë–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–µ–π Parent/Children (–¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
    /// </summary>
    /// <returns>–ü–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ TreeRedbObject</returns>
    Task<List<TreeRedbObject<TProps>>> ToFlatListAsync();

    // ===== TREE-–°–ü–ï–¶–ò–§–ò–ß–ù–´–ï API =====
    // üíÄ –£–î–ê–õ–ï–ù–´ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ 'new' –æ–±—ä—è–≤–ª–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª IRedbQueryable!
    
    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞ –≤ –¥–µ—Ä–µ–≤–µ
    /// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50 —É—Ä–æ–≤–Ω–µ–π (–ø–æ–∏—Å–∫ –ø–æ—Ç–æ–º–∫–æ–≤), 1 (–ø–æ–∏—Å–∫ –¥–µ—Ç–µ–π)
    /// </summary>
    ITreeQueryable<TProps> WithMaxDepth(int depth);
    
    /// <summary>
    /// –ü—Ä–æ–µ–∫—Ü–∏—è –¥–ª—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è TreeRedbObject)
    /// </summary>
    IRedbProjectedQueryable<TResult> Select<TResult>(Expression<Func<TreeRedbObject<TProps>, TResult>> selector);
}

/// <summary>
/// –£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ThenBy/ThenByDescending)
/// </summary>  
public interface IOrderedTreeQueryable<TProps> : ITreeQueryable<TProps>, IOrderedRedbQueryable<TProps> 
    where TProps : class, new()
{
    // üíÄ –£–î–ê–õ–ï–ù–´ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ 'new' –æ–±—ä—è–≤–ª–µ–Ω–∏—è ThenBy/ThenByDescending!
    // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª IOrderedRedbQueryable
}
