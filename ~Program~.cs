using System;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using redb.Core.Postgres;
using redb.Core;
using redb.Core.Models;
using redb.Core.Utils;
using System.Linq;

// –ü—Ä–æ—Å—Ç–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
public class SimpleConsoleLogger : ILogger
{
    public IDisposable BeginScope<TState>(TState state) => null!;
    public bool IsEnabled(LogLevel logLevel) => logLevel >= LogLevel.Information;

    public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception? exception, Func<TState, Exception?, string> formatter)
    {
        if (!IsEnabled(logLevel)) return;

        var message = formatter(state, exception);
        var levelText = logLevel switch
        {
            LogLevel.Warning => "warn:",
            LogLevel.Error => "error:",
            LogLevel.Critical => "critical:",
            _ => ""
        };

        if (!string.IsNullOrEmpty(levelText))
            Console.WriteLine($"{levelText} {message}");
        else
            Console.WriteLine(message);
    }
}

public class SimpleConsoleLoggerProvider : ILoggerProvider
{
    public ILogger CreateLogger(string categoryName) => new SimpleConsoleLogger();
    public void Dispose() { }
}

// –ö–ª–∞—Å—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (properties —Å–µ–∫—Ü–∏—è)
public class AnalyticsMetricsProps
{
    public long AdvertId { get; set; }
    public long? Baskets { get; set; }
    public long? Base { get; set; }
    public long? Association { get; set; }
    public double? Costs { get; set; }
    public long? Rate { get; set; }
}

public class AnalyticsRecordProps
{
    public DateTime Date { get; set; }
    public string Article { get; set; } = string.Empty;
    public long? Orders { get; set; }
    public long Stock { get; set; }
    public long? TotalCart { get; set; }
    public string? Tag { get; set; }
    public string? TestName { get; set; }
    public redb.Core.Models.RedbObject<AnalyticsMetricsProps>? AutoMetrics { get; set; }
    public redb.Core.Models.RedbObject<AnalyticsMetricsProps>? AuctionMetrics { get; set; }
}

// –ú–æ–¥–µ–ª—å –¥–ª—è —á—Ç–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
public class ArchivedObjectRecord
{
    public long _id { get; set; }
    public string? _name { get; set; }
    public string? _note { get; set; }
    public DateTime _date_create { get; set; }
    public DateTime _date_modify { get; set; }
    public DateTime _date_delete { get; set; }
    public string? _values { get; set; }
    public Guid? _hash { get; set; }
    public long _id_scheme { get; set; }
    public long _id_owner { get; set; }
    public long _id_who_change { get; set; }
}

internal class Program
{
    static async Task Main()
    {
        var services = new ServiceCollection();

        // –û–ø—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        bool detailedLogging = Environment.GetEnvironmentVariable("DETAILED_LOGGING") == "true";

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        services.AddLogging(b =>
        {
            b.ClearProviders(); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            b.AddProvider(new SimpleConsoleLoggerProvider()) // –ù–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
             .SetMinimumLevel(LogLevel.Information);

            if (!detailedLogging)
            {
                // –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ª–æ–≥–∏ EF Core –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                b.AddFilter("Microsoft.EntityFrameworkCore.Database.Command", LogLevel.Warning); // SQL –∑–∞–ø—Ä–æ—Å—ã
                b.AddFilter("Microsoft.EntityFrameworkCore.Query", LogLevel.Warning); // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∑–∞–ø—Ä–æ—Å–∞—Ö
                b.AddFilter("Microsoft.EntityFrameworkCore.Update", LogLevel.Warning); // –û–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            }
        });

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ–¥ –≤–∞—à—É —Å—Ä–µ–¥—É)
        var connectionString = "Host=localhost;Port=5432;Username=postgres;Password=1;Database=redb;Pooling=true;";

        services.AddDbContext<redb.Core.Postgres.RedbContext>(options =>
        {
            options.UseNpgsql(connectionString);
        });

        services.AddScoped<IRedbService, RedbService>();

        var provider = services.BuildServiceProvider();
        var logger = provider.GetRequiredService<ILoggerFactory>().CreateLogger("ConsoleTest");

        try
        {
            var redb = provider.GetRequiredService<IRedbService>();

            logger.LogInformation("üîó === –≠–¢–ê–ü 1: –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–ê–ó–ï –î–ê–ù–ù–´–• ===");
            logger.LogInformation("DB Type: {dbType}", redb.dbType);
            logger.LogInformation("DB Version: {version}", redb.dbVersion);
            logger.LogInformation("DB Size: {size} bytes", redb.dbSize);

            logger.LogInformation("");
            logger.LogInformation("üìñ === –≠–¢–ê–ü 2: –ó–ê–ì–†–£–ó–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û –û–ë–™–ï–ö–¢–ê ===");
            logger.LogInformation("–ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç ID=1021 –∏–∑ –±–∞–∑—ã —á–µ—Ä–µ–∑ get_object_json()...");
            var obj = await ((RedbService)redb).LoadAsync<AnalyticsRecordProps>(1021, depth: 3);
            logger.LogInformation("‚úÖ –û–±—ä–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: id={id}, name='{name}', scheme_id={schemeId}", obj.id, obj.name, obj.scheme_id);
            logger.LogInformation("   Properties: Article='{Article}', Date={Date}, Stock={Stock}", obj.properties.Article, obj.properties.Date, obj.properties.Stock);

            logger.LogInformation("");
            logger.LogInformation("üèóÔ∏è === –≠–¢–ê–ü 3: CODE-FIRST –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –°–•–ï–ú–´ ===");
            var schemeName = "TrueSight.Models.AnalyticsRecord";
            logger.LogInformation("–ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {scheme}", schemeName);
            var schemeId = await redb.SyncSchemeAsync<AnalyticsRecordProps>(schemeName, alias: "–ó–∞–ø–∏—Å—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", strictDeleteExtra: true);
            logger.LogInformation("‚úÖ Scheme ID: {schemeId}, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã", schemeId);

            logger.LogInformation("");
            logger.LogInformation("üîê === –≠–¢–ê–ü 4: –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–• –ü–†–û–í–ï–†–û–ö –ü–†–ê–í ===");
            logger.LogInformation("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ 1021...");
            var canEdit = await ((RedbService)redb).CanUserEditObject(-9223372036854775800, 1021);
            logger.LogInformation("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {canEdit}", canEdit ? "–†–ê–ó–†–ï–®–ï–ù–û" : "–ó–ê–ü–†–ï–©–ï–ù–û");

            logger.LogInformation("");
            logger.LogInformation("üìã –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –ø—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏—è—Ö:");

            // –ó–∞–≥—Ä—É–∑–∫–∞ –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            logger.LogInformation("  ‚Üí LoadAsync –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é checkPermissions=false)");
            var objWithoutCheck = await redb.LoadAsync<AnalyticsRecordProps>(1021);
            logger.LogInformation($"    ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {objWithoutCheck.name}");

            // –ó–∞–≥—Ä—É–∑–∫–∞ –° –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤
            logger.LogInformation("  ‚Üí LoadAsync –° –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ (checkPermissions=true)");
            try
            {
                var objWithCheck = await redb.LoadAsync<AnalyticsRecordProps>(1021, userId: -9223372036854775800, checkPermissions: true);
                logger.LogInformation($"    ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤: {objWithCheck.name}");
            }
            catch (UnauthorizedAccessException ex)
            {
                logger.LogInformation($"    ‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: {ex.Message}");
            }

            logger.LogInformation("");
            logger.LogInformation("‚ûï === –≠–¢–ê–ü 5: –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –û–ë–™–ï–ö–¢–ê ===");
            logger.LogInformation("–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç AnalyticsRecord...");
            var newObj = new redb.Core.Models.RedbObject<AnalyticsRecordProps>
            {
                scheme_id = schemeId,
                name = "–ù–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å",
                note = "–°–æ–∑–¥–∞–Ω–∞ –≤ —Ç–µ—Å—Ç–µ",
                owner_id = -9223372036854775800,
                who_change_id = -9223372036854775800,
                date_create = DateTime.Now,
                date_modify = DateTime.Now,
                properties = new AnalyticsRecordProps
                {
                    Date = DateTime.Today,
                    Article = "–¢–µ—Å—Ç–æ–≤—ã–π –∞—Ä—Ç–∏–∫—É–ª",
                    Stock = 100,
                    Orders = 5,
                    TotalCart = 10,
                    Tag = "—Ç–µ—Å—Ç",
                    TestName = "Console Test Create"
                }
            };

            logger.LogInformation("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞:");
            logger.LogInformation("   –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è: name='{name}', note='{note}', scheme_id={schemeId}",
                newObj.name, newObj.note, newObj.scheme_id);
            logger.LogInformation("   Properties (–±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ _values):");
            logger.LogInformation("     Article: '{article}'", newObj.properties.Article);
            logger.LogInformation("     Date: {date}", newObj.properties.Date);
            logger.LogInformation("     Stock: {stock}", newObj.properties.Stock);
            logger.LogInformation("     Orders: {orders}", newObj.properties.Orders);
            logger.LogInformation("     TotalCart: {totalCart}", newObj.properties.TotalCart);
            logger.LogInformation("     Tag: '{tag}'", newObj.properties.Tag);
            logger.LogInformation("     TestName: '{testName}'", newObj.properties.TestName);

            logger.LogInformation("–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ (checkPermissions=false - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)...");
            logger.LogInformation("   ‚Üí INSERT –≤ _objects (–±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è)");
            logger.LogInformation("   ‚Üí INSERT –≤ _values (7 –∑–∞–ø–∏—Å–µ–π –¥–ª—è properties)");
            logger.LogInformation("   ‚Üí –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç MD5 —Ö–µ—à–∞");
            var newId = await redb.SaveAsync(newObj, checkPermissions: false); // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            logger.LogInformation("‚úÖ –û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {newId}", newId);

            logger.LogInformation("");
            logger.LogInformation("üîç === –≠–¢–ê–ü 6: –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ù–û–ì–û –û–ë–™–ï–ö–¢–ê ===");
            logger.LogInformation("–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç {newId} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...", newId);
            var createdObj = await ((RedbService)redb).LoadAsync<AnalyticsRecordProps>(newId);
            logger.LogInformation("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: name='{name}', TestName='{testName}'", createdObj.name, createdObj.properties.TestName);

            logger.LogInformation("");
            logger.LogInformation("‚úèÔ∏è === –≠–¢–ê–ü 7: –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–ë–™–ï–ö–¢–ê ===");
            logger.LogInformation("–û–±—ä–µ–∫—Ç –î–û –∏–∑–º–µ–Ω–µ–Ω–∏–π:");
            logger.LogInformation("   Name: '{oldName}' ‚Üí TestName: '{oldTestName}' ‚Üí Stock: {oldStock}",
                createdObj.name, createdObj.properties.TestName, createdObj.properties.Stock);

            logger.LogInformation("–ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è:");
            var oldName = createdObj.name;
            var oldTestName = createdObj.properties.TestName;
            var oldStock = createdObj.properties.Stock;

            createdObj.name = "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å";
            createdObj.properties.TestName = "Console Test Update";
            createdObj.properties.Stock = 150;
            createdObj.date_modify = DateTime.Now;

            logger.LogInformation("   Name: '{oldName}' ‚Üí '{newName}'", oldName, createdObj.name);
            logger.LogInformation("   TestName: '{oldTestName}' ‚Üí '{newTestName}'", oldTestName, createdObj.properties.TestName);
            logger.LogInformation("   Stock: {oldStock} ‚Üí {newStock}", oldStock, createdObj.properties.Stock);
            logger.LogInformation("   date_modify: –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏");

            logger.LogInformation("–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è (UPDATE –≤ _objects –∏ _values)...");
            var updatedId = await redb.SaveAsync(createdObj);
            logger.LogInformation("‚úÖ –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω, ID: {updatedId}", updatedId);

            logger.LogInformation("");
            logger.LogInformation("üéØ === –≠–¢–ê–ü 8: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ===");
            logger.LogInformation("–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ {updatedId}...", updatedId);
            var updatedObj = await ((RedbService)redb).LoadAsync<AnalyticsRecordProps>(updatedId);
            logger.LogInformation("‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç: name='{name}', TestName='{testName}', Stock={stock}",
                updatedObj.name, updatedObj.properties.TestName, updatedObj.properties.Stock);

            logger.LogInformation("–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:");
            logger.LogInformation("   –í _objects: –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—è _name, _date_modify, _hash");
            logger.LogInformation("   –í _values: –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è Stock –∏ TestName");
            logger.LogInformation("   MD5 —Ö–µ—à –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö properties");

            logger.LogInformation("");
            logger.LogInformation("üîç === –≠–¢–ê–ü 9: –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –í –ë–ê–ó–ï ===");
            logger.LogInformation("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö _objects –∏ _values...");
            await CheckObjectInDatabase(redb, updatedId, logger);

            logger.LogInformation("");
            logger.LogInformation("üìä === –≠–¢–ê–ü 10: –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó ===");
            logger.LogInformation("–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç—ã...");
            await CompareObjectsInDatabase(redb, new[] { 1021, updatedId }, logger);

            logger.LogInformation("");
            // ========================================
            // –≠–¢–ê–ü 11: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø –û–ë–™–ï–ö–¢–û–í
            // ========================================

            logger.LogInformation("üóëÔ∏è === –≠–¢–ê–ü 11: –£–î–ê–õ–ï–ù–ò–ï –û–ë–™–ï–ö–¢–û–í ===");

            // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
            logger.LogInformation("–°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è...");
            var objectToDelete = new RedbObject<AnalyticsRecordProps>
            {
                name = "–û–±—ä–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                note = "–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –≤ —Ç–µ—Å—Ç–µ",
                scheme_id = schemeId,
                owner_id = -9223372036854775800,
                who_change_id = -9223372036854775800,
                properties = new AnalyticsRecordProps
                {
                    Article = "TEST_DELETE",
                    Date = DateTime.Now,
                    Stock = 999,
                    TestName = "ToBeDeleted"
                }
            };

            var deleteObjectId = await redb.SaveAsync(objectToDelete);
            logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ID={deleteObjectId}");

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä—è–º—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ë–î
            var redbService = (RedbService)redb;
            var context = redbService.GetType().GetField("_redbContext",
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)?.GetValue(redbService)
                as redb.Core.Postgres.RedbContext;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
            var beforeDelete = await CheckObjectExists(context!, deleteObjectId);
            logger.LogInformation($"–î–æ —É–¥–∞–ª–µ–Ω–∏—è: –æ–±—ä–µ–∫—Ç {deleteObjectId} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç = {beforeDelete}");

            // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ (–¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
            logger.LogInformation("–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è (checkPermissions=true)...");
            try
            {
                await redb.DeleteAsync(deleteObjectId, 12345, checkPermissions: true); // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤
                logger.LogInformation("‚ùå –û–®–ò–ë–ö–ê: —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ!");
            }
            catch (UnauthorizedAccessException ex)
            {
                logger.LogInformation($"‚úÖ –ó–∞—â–∏—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {ex.Message}");
            }

            // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ (—Å–∏—Å—Ç–µ–º–Ω—ã–π —Ä–µ–∂–∏–º)
            logger.LogInformation($"–¢–µ—Å—Ç 2: –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç {deleteObjectId} –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ (checkPermissions=false)...");
            try
            {
                var deleted = await redb.DeleteAsync(deleteObjectId, -9223372036854775800, checkPermissions: false);
                logger.LogInformation($"‚úÖ –û–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ: {deleted}");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä–µ–∫—Ç —É–¥–∞–ª–µ–Ω
                var afterDelete = await CheckObjectExists(context!, deleteObjectId);
                logger.LogInformation($"–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: –æ–±—ä–µ–∫—Ç {deleteObjectId} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç = {afterDelete}");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—ä–µ–∫—Ç –ø–æ–ø–∞–ª –≤ –∞—Ä—Ö–∏–≤
                var inArchive = await CheckObjectInArchive(context!, deleteObjectId);
                logger.LogInformation($"–í –∞—Ä—Ö–∏–≤–µ _deleted_objects: –æ–±—ä–µ–∫—Ç {deleteObjectId} –Ω–∞–π–¥–µ–Ω = {inArchive}");

                if (inArchive)
                {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏
                    await ShowArchivedObjectDetails(context!, deleteObjectId, logger);
                }
            }
            catch (Exception deleteEx)
            {
                logger.LogError(deleteEx, $"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ {deleteObjectId}: {deleteEx.Message}");
                if (deleteEx.InnerException != null)
                {
                    logger.LogError($"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {deleteEx.InnerException.Message}");
                }
                logger.LogError($"StackTrace: {deleteEx.StackTrace}");
                throw;
            }

            logger.LogInformation("");
            logger.LogInformation("üå≥ === –≠–¢–ê–ü 12: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–†–ï–í–û–í–ò–î–ù–´–• –°–¢–†–£–ö–¢–£–† ===");
            await TestTreeFunctionality(logger, (RedbService)redb);

            logger.LogInformation("");
            logger.LogInformation("üéâ === –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û ===");
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error in console test");
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–∫—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: –ø–æ–ª—è _objects –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ _values
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    static async Task<bool> CheckObjectExists(redb.Core.Postgres.RedbContext redbContext, long objectId)
    {
        return await redbContext.Objects.AnyAsync(o => o.Id == objectId);
    }

    static async Task<bool> CheckObjectInArchive(redb.Core.Postgres.RedbContext redbContext, long objectId)
    {
        return await redbContext.Database
            .SqlQueryRaw<long>("SELECT _id FROM _deleted_objects WHERE _id = {0}", objectId)
            .AnyAsync();
    }

    static async Task ShowArchivedObjectDetails(redb.Core.Postgres.RedbContext redbContext, long objectId, ILogger logger)
    {
        logger.LogInformation("");
        logger.LogInformation("üìã === –î–ï–¢–ê–õ–ò –ê–†–•–ò–í–ù–û–ô –ó–ê–ü–ò–°–ò ===");

        // –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—É—é –∑–∞–ø–∏—Å—å
        var archivedRecord = await redbContext.Database
            .SqlQueryRaw<ArchivedObjectRecord>(@"
                SELECT _id, _name, _note, _date_create, _date_modify, _date_delete, 
                       _values, _hash, _id_scheme, _id_owner, _id_who_change
                FROM _deleted_objects 
                WHERE _id = {0}", objectId)
            .FirstOrDefaultAsync();

        if (archivedRecord == null)
        {
            logger.LogWarning("–ê—Ä—Ö–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {objectId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", objectId);
            return;
        }

        logger.LogInformation("–ê—Ä—Ö–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–±—ä–µ–∫—Ç–∞ {id}:", archivedRecord._id);
        logger.LogInformation("  Name: {name}", archivedRecord._name);
        logger.LogInformation("  Note: {note}", archivedRecord._note);
        logger.LogInformation("  Scheme: {scheme}, Owner: {owner}, WhoChange: {whoChange}",
            archivedRecord._id_scheme, archivedRecord._id_owner, archivedRecord._id_who_change);
        logger.LogInformation("  Created: {created}, Modified: {modified}, Deleted: {deleted}",
            archivedRecord._date_create, archivedRecord._date_modify, archivedRecord._date_delete);
        logger.LogInformation("  Hash: {hash}", archivedRecord._hash);

        logger.LogInformation("");
        logger.LogInformation("üìÑ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ _values (JSON):");
        if (string.IsNullOrEmpty(archivedRecord._values))
        {
            logger.LogInformation("  (–Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π)");
        }
        else
        {
            try
            {
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                var jsonObj = System.Text.Json.JsonSerializer.Deserialize<object>(archivedRecord._values);
                var formattedJson = System.Text.Json.JsonSerializer.Serialize(jsonObj, new System.Text.Json.JsonSerializerOptions
                {
                    WriteIndented = true
                });

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ JSON –¥–ª—è –æ–±–∑–æ—Ä–∞
                var preview = formattedJson.Length > 500 ? formattedJson.Substring(0, 500) + "..." : formattedJson;
                logger.LogInformation("  JSON Preview ({length} chars):", formattedJson.Length);
                logger.LogInformation("{preview}", preview);
            }
            catch (Exception ex)
            {
                logger.LogWarning("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {error}", ex.Message);
                logger.LogInformation("  Raw Values: {values}", archivedRecord._values);
            }
        }
    }

    // === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–†–ï–í–û–í–ò–î–ù–´–• –°–¢–†–£–ö–¢–£–† ===

    static async Task TestTreeFunctionality(ILogger logger, RedbService redb)
    {
        try
        {
            logger.LogInformation("–°–æ–∑–¥–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤...");

            // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            var rootCategory = new redb.Core.Models.TreeRedbObject<AnalyticsRecordProps>
            {
                scheme_id = 1002,
                owner_id = -9223372036854775800,
                who_change_id = -9223372036854775800,
                name = "–í—Å–µ —Ç–æ–≤–∞—Ä—ã",
                note = "–ö–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
                properties = new AnalyticsRecordProps
                {
                    Article = "ROOT",
                    Date = DateTime.Now,
                    Stock = 0,
                    TestName = "Root Category"
                }
            };

            var rootId = await redb.SaveAsync(rootCategory);
            logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ID={rootId}");

            // –°–æ–∑–¥–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            var electronics = new redb.Core.Models.TreeRedbObject<AnalyticsRecordProps>
            {
                scheme_id = 1002,
                owner_id = -9223372036854775800,
                who_change_id = -9223372036854775800,
                name = "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
                note = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏",
                properties = new AnalyticsRecordProps
                {
                    Article = "ELEC",
                    Date = DateTime.Now,
                    Stock = 50,
                    TestName = "Electronics Category"
                }
            };

            var electronicsId = await redb.CreateChildAsync(electronics, rootId);
            logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': ID={electronicsId}");

            var clothing = new redb.Core.Models.TreeRedbObject<AnalyticsRecordProps>
            {
                scheme_id = 1002,
                owner_id = -9223372036854775800,
                who_change_id = -9223372036854775800,
                name = "–û–¥–µ–∂–¥–∞",
                note = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–¥–µ–∂–¥—ã",
                properties = new AnalyticsRecordProps
                {
                    Article = "CLOTH",
                    Date = DateTime.Now,
                    Stock = 30,
                    TestName = "Clothing Category"
                }
            };

            var clothingId = await redb.CreateChildAsync(clothing, rootId);
            logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è '–û–¥–µ–∂–¥–∞': ID={clothingId}");

            // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏
            var smartphones = new redb.Core.Models.TreeRedbObject<AnalyticsRecordProps>
            {
                scheme_id = 1002,
                owner_id = -9223372036854775800,
                who_change_id = -9223372036854775800,
                name = "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã",
                note = "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤",
                properties = new AnalyticsRecordProps
                {
                    Article = "PHONE",
                    Date = DateTime.Now,
                    Stock = 15,
                    TestName = "Smartphones Subcategory"
                }
            };

            var smartphonesId = await redb.CreateChildAsync(smartphones, electronicsId);
            logger.LogInformation($"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã': ID={smartphonesId}");

            logger.LogInformation("");
            logger.LogInformation("üîç === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–¢–û–î–û–í –î–ï–†–ï–í–ê ===");

            // –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ä–µ–≤–∞
            logger.LogInformation("–¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...");
            var tree = await redb.LoadTreeAsync<AnalyticsRecordProps>(rootId, maxDepth: 5);
            logger.LogInformation($"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–µ—Ä–µ–≤–æ: –∫–æ—Ä–µ–Ω—å='{tree.name}', –¥–µ—Ç–µ–π={tree.Children.Count}");

            // –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞
            logger.LogInformation("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–µ—Ä–µ–≤–∞:");
            PrintTreeStructure(logger, tree, 0);

            // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–µ–π
            logger.LogInformation("");
            logger.LogInformation("–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—ã—Ö –¥–µ—Ç–µ–π –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...");
            var children = await redb.GetChildrenAsync<AnalyticsRecordProps>(rootId);
            logger.LogInformation($"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–µ—Ç–µ–π: {children.Count()}");
            foreach (var child in children)
            {
                logger.LogInformation($"   ‚Üí {child.name} (ID: {child.id})");
            }

            // –¢–µ—Å—Ç 3: –ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é
            logger.LogInformation("");
            logger.LogInformation("–¢–µ—Å—Ç 3: –°—Ç—Ä–æ–∏–º –ø—É—Ç—å –æ—Ç —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ –∫ –∫–æ—Ä–Ω—é...");
            var pathToRoot = await redb.GetPathToRootAsync<AnalyticsRecordProps>(smartphonesId);
            var breadcrumbs = string.Join(" > ", pathToRoot.Select(node => node.name));
            logger.LogInformation($"‚úÖ –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏: {breadcrumbs}");

            // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤
            logger.LogInformation("");
            logger.LogInformation("–¢–µ—Å—Ç 4: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤ –∫–æ—Ä–Ω–µ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...");
            var descendants = await redb.GetDescendantsAsync<AnalyticsRecordProps>(rootId);
            logger.LogInformation($"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–æ–º–∫–æ–≤: {descendants.Count()}");
            foreach (var descendant in descendants)
            {
                var level = ((redb.Core.Models.ITreeNode<redb.Core.Models.TreeRedbObject<AnalyticsRecordProps>>)descendant).Level;
                var indent = new string(' ', level * 2);
                logger.LogInformation($"   {indent}‚Üí {descendant.name} (—É—Ä–æ–≤–µ–Ω—å {level})");
            }

            // –¢–µ—Å—Ç 5: TreeCollection
            logger.LogInformation("");
            logger.LogInformation("–¢–µ—Å—Ç 5: –†–∞–±–æ—Ç–∞ —Å TreeCollection...");
            var collection = new redb.Core.Models.TreeCollection<AnalyticsRecordProps>();

            // –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
            collection.Add(tree);
            foreach (var child in tree.Children)
            {
                collection.Add(child);
                foreach (var grandchild in child.Children)
                {
                    collection.Add(grandchild);
                }
            }

            var stats = collection.GetStats();
            logger.LogInformation($"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TreeCollection: {stats}");

            // –¢–µ—Å—Ç 6: –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ä–µ–≤–∞
            logger.LogInformation("");
            logger.LogInformation("–¢–µ—Å—Ç 6: –û–±—Ö–æ–¥ –¥–µ—Ä–µ–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏...");

            logger.LogInformation("–û–±—Ö–æ–¥ –≤ –≥–ª—É–±–∏–Ω—É (DFS):");
            foreach (var node in tree.DepthFirstTraversal())
            {
                var level = ((redb.Core.Models.ITreeNode<redb.Core.Models.TreeRedbObject<AnalyticsRecordProps>>)node).Level;
                var indent = new string(' ', level * 2);
                logger.LogInformation($"   {indent}‚Üí {node.name}");
            }

            logger.LogInformation("–û–±—Ö–æ–¥ –≤ —à–∏—Ä–∏–Ω—É (BFS):");
            foreach (var node in tree.BreadthFirstTraversal())
            {
                var level = ((redb.Core.Models.ITreeNode<redb.Core.Models.TreeRedbObject<AnalyticsRecordProps>>)node).Level;
                logger.LogInformation($"   [–£—Ä–æ–≤–µ–Ω—å {level}] {node.name}");
            }

            // –¢–µ—Å—Ç 7: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —É–∑–ª–∞
            logger.LogInformation("");
            logger.LogInformation("–¢–µ—Å—Ç 7: –ü–µ—Ä–µ–º–µ—â–∞–µ–º '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã' –∏–∑ '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏' –≤ '–û–¥–µ–∂–¥—É'...");
            await redb.MoveObjectAsync(smartphonesId, clothingId, -9223372036854775800, checkPermissions: false);
            logger.LogInformation("‚úÖ –£–∑–µ–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            var updatedTree = await redb.LoadTreeAsync<AnalyticsRecordProps>(rootId, maxDepth: 5);
            logger.LogInformation("–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–µ—Ä–µ–≤–∞:");
            PrintTreeStructure(logger, updatedTree, 0);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
            logger.LogInformation("–í–æ–∑–≤—Ä–∞—â–∞–µ–º '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã' –æ–±—Ä–∞—Ç–Ω–æ –≤ '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—É'...");
            await redb.MoveObjectAsync(smartphonesId, electronicsId, -9223372036854775800, checkPermissions: false);
            logger.LogInformation("‚úÖ –£–∑–µ–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω –Ω–∞ –º–µ—Å—Ç–æ");

            logger.LogInformation("");
            logger.LogInformation("üéØ === –î–†–ï–í–û–í–ò–î–ù–´–ï –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´ –£–°–ü–ï–®–ù–û ===");
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä");
            throw;
        }
    }

    static void PrintTreeStructure(ILogger logger, redb.Core.Models.TreeRedbObject<AnalyticsRecordProps> node, int level)
    {
        var indent = new string(' ', level * 2);
        logger.LogInformation($"{indent}‚îú‚îÄ {node.name} (ID: {node.id})");

        foreach (var child in node.Children)
        {
            PrintTreeStructure(logger, child, level + 1);
        }
    }


    static async Task CheckObjectInDatabase(IRedbService redb, long objectId, ILogger logger)
    {
        var redbService = (RedbService)redb;
        var context = redbService.GetType().GetField("_redbContext",
            System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)?.GetValue(redbService)
            as redb.Core.Postgres.RedbContext;

        // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –æ–±—ä–µ–∫—Ç–∞ –∏–∑ _objects
        var objData = await context.Objects
            .Where(o => o.Id == objectId)
            .Select(o => new
            {
                o.Id,
                o.Name,
                o.Note,
                o.IdScheme,
                o.IdOwner,
                o.IdWhoChange,
                o.DateCreate,
                o.DateModify,
                o.Hash,
                o.Bool,
                o.Key,
                o.CodeInt,
                o.CodeString,
                o.CodeGuid
            })
            .FirstOrDefaultAsync();

        if (objData == null)
        {
            logger.LogWarning("–û–±—ä–µ–∫—Ç {objectId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ _objects", objectId);
            return;
        }

        logger.LogInformation("–û–±—ä–µ–∫—Ç {id} –≤ _objects:", objData.Id);
        logger.LogInformation("  Name: {name}", objData.Name);
        logger.LogInformation("  Note: {note}", objData.Note);
        logger.LogInformation("  Scheme: {scheme}, Owner: {owner}, WhoChange: {whoChange}",
            objData.IdScheme, objData.IdOwner, objData.IdWhoChange);
        logger.LogInformation("  Created: {created}, Modified: {modified}",
            objData.DateCreate, objData.DateModify);
        logger.LogInformation("  Hash: {hash}", objData.Hash);
        logger.LogInformation("  Bool: {bool}, Key: {key}", objData.Bool, objData.Key);
        logger.LogInformation("  CodeInt: {codeInt}, CodeString: {codeString}, CodeGuid: {codeGuid}",
            objData.CodeInt, objData.CodeString, objData.CodeGuid);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ _values –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        var values = await context.Values
            .Where(v => v.IdObject == objectId)
            .Join(context.Structures, v => v.IdStructure, s => s.Id, (v, s) => new
            {
                StructureName = s.Name,
                StructureType = s.TypeNavigation.DbType,
                IsArray = s.IsArray,
                StoreNull = s.StoreNull,
                v.String,
                v.Long,
                v.Guid,
                v.Double,
                v.DateTime,
                v.Boolean,
                v.ByteArray,
                v.Text,
                v.Array
            })
            .ToListAsync();

        logger.LogInformation("–ó–Ω–∞—á–µ–Ω–∏—è –≤ _values ({count} –∑–∞–ø–∏—Å–µ–π):", values.Count);
        foreach (var val in values)
        {
            var actualValue = GetActualValue(val);
            logger.LogInformation("  {name} ({type}{array}): {value}",
                val.StructureName,
                val.StructureType,
                val.IsArray == true ? "[]" : "",
                actualValue ?? "<NULL>");
        }
    }

    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    static async Task CompareObjectsInDatabase(IRedbService redb, long[] objectIds, ILogger logger)
    {
        var redbService = (RedbService)redb;
        var context = redbService.GetType().GetField("_redbContext",
            System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)?.GetValue(redbService)
            as redb.Core.Postgres.RedbContext;

        foreach (var objectId in objectIds)
        {
            logger.LogInformation("--- –û–±—ä–µ–∫—Ç {id} ---", objectId);

            // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
            var obj = await context.Objects.FindAsync(objectId);
            if (obj == null)
            {
                logger.LogWarning("–û–±—ä–µ–∫—Ç {id} –Ω–µ –Ω–∞–π–¥–µ–Ω", objectId);
                continue;
            }

            logger.LogInformation("–ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è: name='{name}', scheme={scheme}, hash={hash}",
                obj.Name, obj.IdScheme, obj.Hash);

            // –°–≤–æ–π—Å—Ç–≤–∞ (generic fields)
            var valueCount = await context.Values.CountAsync(v => v.IdObject == objectId);
            var propertyNames = await context.Values
                .Where(v => v.IdObject == objectId)
                .Join(context.Structures, v => v.IdStructure, s => s.Id, (v, s) => s.Name)
                .ToListAsync();

            logger.LogInformation("–î–∂–µ–Ω–µ—Ä–∏–∫ —Å–≤–æ–π—Å—Ç–≤–∞ ({count}): {names}",
                valueCount, string.Join(", ", propertyNames));
        }
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∑–∞–ø–∏—Å–∏ _values
    static object? GetActualValue(dynamic valueRecord)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ-null –∑–Ω–∞—á–µ–Ω–∏–µ
        if (valueRecord.String != null) return valueRecord.String;
        if (valueRecord.Long != null) return valueRecord.Long;
        if (valueRecord.Guid != null) return valueRecord.Guid;
        if (valueRecord.Double != null) return valueRecord.Double;
        if (valueRecord.DateTime != null) return valueRecord.DateTime;
        if (valueRecord.Boolean != null) return valueRecord.Boolean;
        if (valueRecord.ByteArray != null) return $"<ByteArray[{((byte[])valueRecord.ByteArray).Length}]>";
        if (valueRecord.Text != null) return valueRecord.Text;
        if (valueRecord.Array != null) return $"<Array: {valueRecord.Array}>";

        return null;
    }
}

